<html>
<meta http-equiv="content-type" content="text/html; charset=UTF-8"> 
<meta name="generator=" content=" vym - view your mind - http://www.insilmaril.de/vym">
<meta name="author" content=""> 
<meta name="description" content=""> 
<link rel='stylesheet' id='css.stylesheet' href='vym.css' />

<head><title>JavaScript the Weird Parts</title></head>
<body>
<center><img src="JavaScript the Weird Parts.png" usemap='#imagemap'></center>
<table class="vym-toc">
<tr><td class="vym-toc-title">
Contents:
</td></tr>
<tr><td>
<div class="vym-toc-branch-0"><a href="#mc:0">  JavaScript the Weird Parts</a></br>
</div><div class="vym-toc-branch-1"><a href="#mc:0,bo:0"> 1.  Introduction</a></br>
</div><div class="vym-toc-branch-2"><a href="#mc:0,bo:0,bo:0"> 1.1.  Understand, don't imediate</a></br>
</div><div class="vym-toc-branch-3"><a href="#mc:0,bo:0,bo:0,bo:0"> 1.1.1.  Type it out</a></br>
</div><div class="vym-toc-branch-2"><a href="#mc:0,bo:0,bo:1"> 1.2.  Frameworks</a></br>
</div><div class="vym-toc-branch-3"><a href="#mc:0,bo:0,bo:1,bo:0"> 1.2.1.  People who make the frameworks understand the weird parts</a></br>
</div><div class="vym-toc-branch-3"><a href="#mc:0,bo:0,bo:1,bo:1"> 1.2.2.  Angular</a></br>
</div><div class="vym-toc-branch-3"><a href="#mc:0,bo:0,bo:1,bo:2"> 1.2.3.  jQuery</a></br>
</div><div class="vym-toc-branch-2"><a href="#mc:0,bo:0,bo:2"> 1.3.  Weird Parts</a></br>
</div><div class="vym-toc-branch-3"><a href="#mc:0,bo:0,bo:2,bo:0"> 1.3.1.  Understanding the how JavaScript works will give you the bases of how to create
the frameworks</a></br>
</div><div class="vym-toc-branch-1"><a href="#mc:0,bo:1"> 2.  Execution Context and Lexical Enviroment</a></br>
</div><div class="vym-toc-branch-2"><a href="#mc:0,bo:1,bo:0"> 2.1.  Definitions</a></br>
</div><div class="vym-toc-branch-3"><a href="#mc:0,bo:1,bo:0,bo:0"> 2.1.1.  Name - Value Pair</a></br>
</div><div class="vym-toc-branch-4"><a href="#mc:0,bo:1,bo:0,bo:0,bo:0"> 2.1.1.1.  address = &quot;100 Miller Ct&quot;</a></br>
</div><div class="vym-toc-branch-4"><a href="#mc:0,bo:1,bo:0,bo:0,bo:1"> 2.1.1.2.  Object in JavaScript</a></br>
</div><div class="vym-toc-branch-5"><a href="#mc:0,bo:1,bo:0,bo:0,bo:1,bo:0"> 2.1.1.2.1.  Collection of name / value pairs</a></br>
</div><div class="vym-toc-branch-5"><a href="#mc:0,bo:1,bo:0,bo:0,bo:1,bo:1"> 2.1.1.2.2.  Name Values within name values within name values</a></br>
</div><div class="vym-toc-branch-4"><a href="#mc:0,bo:1,bo:0,bo:0,bo:2"> 2.1.1.3.  A name that maps to a unique value</a></br>
</div><div class="vym-toc-branch-4"><a href="#mc:0,bo:1,bo:0,bo:0,bo:3"> 2.1.1.4.  Only one value per context</a></br>
</div><div class="vym-toc-branch-3"><a href="#mc:0,bo:1,bo:0,bo:1"> 2.1.2.  Execution Context</a></br>
</div><div class="vym-toc-branch-4"><a href="#mc:0,bo:1,bo:0,bo:1,bo:0"> 2.1.2.1.  A wrapper that helps manage code that's running</a></br>
</div><div class="vym-toc-branch-4"><a href="#mc:0,bo:1,bo:0,bo:1,bo:1"> 2.1.2.2.  which lexical enviroment depends on execution context</a></br>
</div><div class="vym-toc-branch-4"><a href="#mc:0,bo:1,bo:0,bo:1,bo:2"> 2.1.2.3.  contains things beyond your code</a></br>
</div><div class="vym-toc-branch-3"><a href="#mc:0,bo:1,bo:0,bo:2"> 2.1.3.  Lexical Enviroment</a></br>
</div><div class="vym-toc-branch-4"><a href="#mc:0,bo:1,bo:0,bo:2,bo:0"> 2.1.3.1.  Lexical means having to do with language or grammar</a></br>
</div><div class="vym-toc-branch-4"><a href="#mc:0,bo:1,bo:0,bo:2,bo:1"> 2.1.3.2.  Where written code physically positioned</a></br>
</div><div class="vym-toc-branch-4"><a href="#mc:0,bo:1,bo:0,bo:2,bo:2"> 2.1.3.3.  Syntax parser cares on where things are placed</a></br>
</div><div class="vym-toc-branch-3"><a href="#mc:0,bo:1,bo:0,bo:3"> 2.1.4.  Syntax Parser</a></br>
</div><div class="vym-toc-branch-4"><a href="#mc:0,bo:1,bo:0,bo:3,bo:0"> 2.1.4.1.  A program that reads code and determines what to do with and if the grammar is
valid</a></br>
</div><div class="vym-toc-branch-4"><a href="#mc:0,bo:1,bo:0,bo:3,bo:1"> 2.1.4.2.  Translates it for a computer</a></br>
</div><div class="vym-toc-branch-2"><a href="#mc:0,bo:1,bo:1"> 2.2.  Global Enviroment and Global Object</a></br>
</div><div class="vym-toc-branch-3"><a href="#mc:0,bo:1,bo:1,bo:0"> 2.2.1.  Global Execution Context engine create 2 things</a></br>
</div><div class="vym-toc-branch-4"><a href="#mc:0,bo:1,bo:1,bo:0,bo:0"> 2.2.1.1.  this</a></br>
</div><div class="vym-toc-branch-4"><a href="#mc:0,bo:1,bo:1,bo:0,bo:1"> 2.2.1.2.  Global object</a></br>
</div><div class="vym-toc-branch-3"><a href="#mc:0,bo:1,bo:1,bo:1"> 2.2.2.  Nothing in JavaScript</a></br>
</div><div class="vym-toc-branch-4"><a href="#mc:0,bo:1,bo:1,bo:1,bo:0"> 2.2.2.1.  this</a></br>
</div><div class="vym-toc-branch-4"><a href="#mc:0,bo:1,bo:1,bo:1,bo:1"> 2.2.2.2.  window</a></br>
</div><div class="vym-toc-branch-4"><a href="#mc:0,bo:1,bo:1,bo:1,bo:2"> 2.2.2.3.  Both of these are the global object (while on a Browser)</a></br>
</div><div class="vym-toc-branch-5"><a href="#mc:0,bo:1,bo:1,bo:1,bo:2,bo:0"> 2.2.2.3.1.  At the global level, this = window</a></br>
</div><div class="vym-toc-branch-4"><a href="#mc:0,bo:1,bo:1,bo:1,bo:3"> 2.2.2.4.  JS still  creates variables</a></br>
</div><div class="vym-toc-branch-4"><a href="#mc:0,bo:1,bo:1,bo:1,bo:4"> 2.2.2.5.  YOU DIDN'T WRITE THIS STUFF</a></br>
</div><div class="vym-toc-branch-3"><a href="#mc:0,bo:1,bo:1,bo:2"> 2.2.3.  Global: Not inside a function</a></br>
</div><div class="vym-toc-branch-4"><a href="#mc:0,bo:1,bo:1,bo:2,bo:0"> 2.2.3.1.  When not in a function, the variables sit in the lexical enviroment.</a></br>
</div><div class="vym-toc-branch-4"><a href="#mc:0,bo:1,bo:1,bo:2,bo:1"> 2.2.3.2.  a = window.a</a></br>
</div><div class="vym-toc-branch-3"><a href="#mc:0,bo:1,bo:1,bo:3"> 2.2.4.  Review</a></br>
</div><div class="vym-toc-branch-4"><a href="#mc:0,bo:1,bo:1,bo:3,bo:0"> 2.2.4.1.  Execution Contxt</a></br>
</div><div class="vym-toc-branch-5"><a href="#mc:0,bo:1,bo:1,bo:3,bo:0,bo:0"> 2.2.4.1.1.  Global Object</a></br>
</div><div class="vym-toc-branch-5"><a href="#mc:0,bo:1,bo:1,bo:3,bo:0,bo:1"> 2.2.4.1.2.  this</a></br>
</div><div class="vym-toc-branch-5"><a href="#mc:0,bo:1,bo:1,bo:3,bo:0,bo:2"> 2.2.4.1.3.  window</a></br>
</div><div class="vym-toc-branch-5"><a href="#mc:0,bo:1,bo:1,bo:3,bo:0,bo:3"> 2.2.4.1.4.  Your code</a></br>
</div><div class="vym-toc-branch-2"><a href="#mc:0,bo:1,bo:2"> 2.3.  Execution Contenxt: Creation and Hoisting</a></br>
</div><div class="vym-toc-branch-3"><a href="#mc:0,bo:1,bo:2,bo:0"> 2.3.1.  Hoisting</a></br>
</div><div class="vym-toc-branch-3"><a href="#mc:0,bo:1,bo:2,bo:1"> 2.3.2.  WHAT EXECUTES ISN'T WHAT YOU'VE WRITTEN</a></br>
</div><div class="vym-toc-branch-4"><a href="#mc:0,bo:1,bo:2,bo:1,bo:0"> 2.3.2.1.  JavaScript Engine makes descisions</a></br>
</div><div class="vym-toc-branch-3"><a href="#mc:0,bo:1,bo:2,bo:2"> 2.3.3.  (1) Creation Phase</a></br>
</div><div class="vym-toc-branch-4"><a href="#mc:0,bo:1,bo:2,bo:2,bo:0"> 2.3.3.1.  Global Object</a></br>
</div><div class="vym-toc-branch-4"><a href="#mc:0,bo:1,bo:2,bo:2,bo:1"> 2.3.3.2.  this</a></br>
</div><div class="vym-toc-branch-4"><a href="#mc:0,bo:1,bo:2,bo:2,bo:2"> 2.3.3.3.  out enviroment</a></br>
</div><div class="vym-toc-branch-4"><a href="#mc:0,bo:1,bo:2,bo:2,bo:3"> 2.3.3.4.  Syntax parser recognizes where you've created variables and functions</a></br>
</div><div class="vym-toc-branch-5"><a href="#mc:0,bo:1,bo:2,bo:2,bo:3,bo:0"> 2.3.3.4.1.  Set ups memory space for functions and vvariables: &quot;Hoisting&quot;</a></br>
</div><div class="vym-toc-branch-3"><a href="#mc:0,bo:1,bo:2,bo:3"> 2.3.4.  Example Code</a></br>
</div><div class="vym-toc-branch-4"><a href="#mc:0,bo:1,bo:2,bo:3,bo:0"> 2.3.4.1.  Function in hosted in entirered</a></br>
</div><div class="vym-toc-branch-4"><a href="#mc:0,bo:1,bo:2,bo:3,bo:1"> 2.3.4.2.  variables doesn't until execution phase</a></br>
</div><div class="vym-toc-branch-4"><a href="#mc:0,bo:1,bo:2,bo:3,bo:2"> 2.3.4.3.  undefined is a placeholder</a></br>
</div><div class="vym-toc-branch-4"><a href="#mc:0,bo:1,bo:2,bo:3,bo:3"> 2.3.4.4.  Never rely on hoisting</a></br>
</div><div class="vym-toc-branch-3"><a href="#mc:0,bo:1,bo:2,bo:4"> 2.3.5.  Declare functions at the top of your code</a></br>
</div><div class="vym-toc-branch-2"><a href="#mc:0,bo:1,bo:3"> 2.4.  Exeution Content: Execution</a></br>
</div><div class="vym-toc-branch-3"><a href="#mc:0,bo:1,bo:3,bo:0"> 2.4.1.  Runs your code line by line</a></br>
</div><div class="vym-toc-branch-3"><a href="#mc:0,bo:1,bo:3,bo:1"> 2.4.2.  After hoisting, things are execution</a></br>
</div><div class="vym-toc-branch-2"><a href="#mc:0,bo:1,bo:4"> 2.5.  Conceptual Aside: JavaScript and Undeifined</a></br>
</div><div class="vym-toc-branch-3"><a href="#mc:0,bo:1,bo:4,bo:0"> 2.5.1.  not defined IS NOT undefined</a></br>
</div><div class="vym-toc-branch-3"><a href="#mc:0,bo:1,bo:4,bo:1"> 2.5.2.  Example Code</a></br>
</div><div class="vym-toc-branch-4"><a href="#mc:0,bo:1,bo:4,bo:1,bo:0"> 2.5.2.1.  When a variable isn't declared than the browser will say &quot;it's not in memory my
dude&quot;</a></br>
</div><div class="vym-toc-branch-4"><a href="#mc:0,bo:1,bo:4,bo:1,bo:1"> 2.5.2.2.  undefined takes up memory space</a></br>
</div><div class="vym-toc-branch-3"><a href="#mc:0,bo:1,bo:4,bo:2"> 2.5.3.  undefineid means it's  a value that JavaScript is creating</a></br>
</div><div class="vym-toc-branch-3"><a href="#mc:0,bo:1,bo:4,bo:3"> 2.5.4.  NEVER: a = undefined;</a></br>
</div><div class="vym-toc-branch-4"><a href="#mc:0,bo:1,bo:4,bo:3,bo:0"> 2.5.4.1.  Valid, yet dangerous</a></br>
</div><div class="vym-toc-branch-4"><a href="#mc:0,bo:1,bo:4,bo:3,bo:1"> 2.5.4.2.  Let JavaScript always set undefined</a></br>
</div><div class="vym-toc-branch-2"><a href="#mc:0,bo:1,bo:5"> 2.6.  Conceptual Aside: Single Threaded, Synchronous Execution</a></br>
</div><div class="vym-toc-branch-3"><a href="#mc:0,bo:1,bo:5,bo:0"> 2.6.1.  Single Threaded: Only one command at a time</a></br>
</div><div class="vym-toc-branch-4"><a href="#mc:0,bo:1,bo:5,bo:0,bo:0"> 2.6.1.1.  The browerser also runs</a></br>
</div><div class="vym-toc-branch-4"><a href="#mc:0,bo:1,bo:5,bo:0,bo:1"> 2.6.1.2.  JavaScript behaves as a single threaded message</a></br>
</div><div class="vym-toc-branch-3"><a href="#mc:0,bo:1,bo:5,bo:1"> 2.6.2.  Synchronous (in programming)</a></br>
</div><div class="vym-toc-branch-4"><a href="#mc:0,bo:1,bo:5,bo:1,bo:0"> 2.6.2.1.  One at a time</a></br>
</div><div class="vym-toc-branch-4"><a href="#mc:0,bo:1,bo:5,bo:1,bo:1"> 2.6.2.2.  One line of code at a time in order that it appears</a></br>
</div><div class="vym-toc-branch-2"><a href="#mc:0,bo:1,bo:6"> 2.7.  Function Invocation and Execution Stack</a></br>
</div><div class="vym-toc-branch-3"><a href="#mc:0,bo:1,bo:6,bo:0"> 2.7.1.  Innvocatoin: Calling a function or ()</a></br>
</div><div class="vym-toc-branch-3"><a href="#mc:0,bo:1,bo:6,bo:1"> 2.7.2.  Example Code</a></br>
</div><div class="vym-toc-branch-3"><a href="#mc:0,bo:1,bo:6,bo:2"> 2.7.3.  Execution Stack</a></br>
</div><div class="vym-toc-branch-4"><a href="#mc:0,bo:1,bo:6,bo:2,bo:0"> 2.7.3.1.  2) function a Execution Context</a></br>
</div><div class="vym-toc-branch-5"><a href="#mc:0,bo:1,bo:6,bo:2,bo:0,bo:0"> 2.7.3.1.1.  create</a></br>
</div><div class="vym-toc-branch-5"><a href="#mc:0,bo:1,bo:6,bo:2,bo:0,bo:1"> 2.7.3.1.2.  exeuction</a></br>
</div><div class="vym-toc-branch-4"><a href="#mc:0,bo:1,bo:6,bo:2,bo:1"> 2.7.3.2.  1) Global Execution Context</a></br>
</div><div class="vym-toc-branch-5"><a href="#mc:0,bo:1,bo:6,bo:2,bo:1,bo:0"> 2.7.3.2.1.  creates:</a></br>
</div><div class="vym-toc-branch-6"><a href="#mc:0,bo:1,bo:6,bo:2,bo:1,bo:0,bo:0"> 2.7.3.2.1.1.  Global object, this, window</a></br>
</div><div class="vym-toc-branch-6"><a href="#mc:0,bo:1,bo:6,bo:2,bo:1,bo:0,bo:1"> 2.7.3.2.1.2.  hoisting functions and setting variables to undefined</a></br>
</div><div class="vym-toc-branch-5"><a href="#mc:0,bo:1,bo:6,bo:2,bo:1,bo:1"> 2.7.3.2.2.  Executes</a></br>
</div><div class="vym-toc-branch-4"><a href="#mc:0,bo:1,bo:6,bo:2,bo:2"> 2.7.3.3.  3) When a Execution Context / Function is finshed executing, it's pop off the
stack</a></br>
</div><div class="vym-toc-branch-3"><a href="#mc:0,bo:1,bo:6,bo:3"> 2.7.4.  Even if a function invokes itself, a execution context is created</a></br>
</div><div class="vym-toc-branch-4"><a href="#mc:0,bo:1,bo:6,bo:3,bo:0"> 2.7.4.1.  Creation of this / global object  is creating within that funciton</a></br>
</div><div class="vym-toc-branch-2"><a href="#mc:0,bo:1,bo:7"> 2.8.  Functions, Context, Variable Enviroments</a></br>
</div><div class="vym-toc-branch-3"><a href="#mc:0,bo:1,bo:7,bo:0"> 2.8.1.  Variable Enviorment</a></br>
</div><div class="vym-toc-branch-4"><a href="#mc:0,bo:1,bo:7,bo:0,bo:0"> 2.8.1.1.  Where the varibales lives in the memory</a></br>
</div><div class="vym-toc-branch-4"><a href="#mc:0,bo:1,bo:7,bo:0,bo:1"> 2.8.1.2.  Where is the variable?</a></br>
</div><div class="vym-toc-branch-4"><a href="#mc:0,bo:1,bo:7,bo:0,bo:2"> 2.8.1.3.  Each execution context has a variable enviroment (it's own memory space)</a></br>
</div><div class="vym-toc-branch-4"><a href="#mc:0,bo:1,bo:7,bo:0,bo:3"> 2.8.1.4.  Code Example</a></br>
</div><div class="vym-toc-branch-5"><a href="#mc:0,bo:1,bo:7,bo:0,bo:3,bo:0"> 2.8.1.4.1.  Each varibales are in there own scope</a></br>
</div><div class="vym-toc-branch-2"><a href="#mc:0,bo:1,bo:8"> 2.9.  The Scope Chain</a></br>
</div><div class="vym-toc-branch-3"><a href="#mc:0,bo:1,bo:8,bo:0"> 2.9.1.  Example Code 1</a></br>
</div><div class="vym-toc-branch-3"><a href="#mc:0,bo:1,bo:8,bo:1"> 2.9.2.  JavaScript does more than look in the variable enviroment of the current
execution context</a></br>
</div><div class="vym-toc-branch-4"><a href="#mc:0,bo:1,bo:8,bo:1,bo:0"> 2.9.2.1.  variable this</a></br>
</div><div class="vym-toc-branch-4"><a href="#mc:0,bo:1,bo:8,bo:1,bo:1"> 2.9.2.2.  Each execution has a reference  to the outer enviroment</a></br>
</div><div class="vym-toc-branch-4"><a href="#mc:0,bo:1,bo:8,bo:1,bo:2"> 2.9.2.3.  Outer enviroment ~ Lexical Enviroment</a></br>
</div><div class="vym-toc-branch-5"><a href="#mc:0,bo:1,bo:8,bo:1,bo:2,bo:0"> 2.9.2.3.1.  Lexical Enviroment</a></br>
</div><div class="vym-toc-branch-6"><a href="#mc:0,bo:1,bo:8,bo:1,bo:2,bo:0,bo:0"> 2.9.2.3.1.1.  The physical location of where code is written</a></br>
</div><div class="vym-toc-branch-3"><a href="#mc:0,bo:1,bo:8,bo:2"> 2.9.3.  Execution stack is create by invocation, not locatoin</a></br>
</div><div class="vym-toc-branch-3"><a href="#mc:0,bo:1,bo:8,bo:3"> 2.9.4.  Finding the variable reference, it goes down the Scope Chain to find</a></br>
</div><div class="vym-toc-branch-3"><a href="#mc:0,bo:1,bo:8,bo:4"> 2.9.5.  &quot;Who created me?&quot;</a></br>
</div><div class="vym-toc-branch-4"><a href="#mc:0,bo:1,bo:8,bo:4,bo:0"> 2.9.5.1.  Example Code 2</a></br>
</div><div class="vym-toc-branch-3"><a href="#mc:0,bo:1,bo:8,bo:5"> 2.9.6.  Where a function sits lexically determines it's out reference</a></br>
</div><div class="vym-toc-branch-2"><a href="#mc:0,bo:1,bo:9"> 2.10.  Scope, ES6, let</a></br>
</div><div class="vym-toc-branch-3"><a href="#mc:0,bo:1,bo:9,bo:0"> 2.10.1.  Scope: Where code is avaiable in code</a></br>
</div><div class="vym-toc-branch-4"><a href="#mc:0,bo:1,bo:9,bo:0,bo:0"> 2.10.1.1.  And if it's the same variable or a copy (another innovcation / object)</a></br>
</div><div class="vym-toc-branch-5"><a href="#mc:0,bo:1,bo:9,bo:0,bo:0,bo:0"> 2.10.1.1.1.  </a></br>
</div><div class="vym-toc-branch-3"><a href="#mc:0,bo:1,bo:9,bo:1"> 2.10.2.  ECMAScript 6 / 2015</a></br>
</div><div class="vym-toc-branch-4"><a href="#mc:0,bo:1,bo:9,bo:1,bo:0"> 2.10.2.1.  let: a new way to declare variables</a></br>
</div><div class="vym-toc-branch-5"><a href="#mc:0,bo:1,bo:9,bo:1,bo:0,bo:0"> 2.10.2.1.1.  Block scoping</a></br>
</div><div class="vym-toc-branch-5"><a href="#mc:0,bo:1,bo:9,bo:1,bo:0,bo:1"> 2.10.2.1.2.  Only available within the block it's declared in</a></br>
</div><div class="vym-toc-branch-5"><a href="#mc:0,bo:1,bo:9,bo:1,bo:0,bo:2"> 2.10.2.1.3.  Cannot use the let variable until the code is ran</a></br>
</div><div class="vym-toc-branch-2"><a href="#mc:0,bo:1,bo:10"> 2.11.  Asynchronous Callbacks</a></br>
</div><div class="vym-toc-branch-3"><a href="#mc:0,bo:1,bo:10,bo:0"> 2.11.1.  More than one at a time</a></br>
</div><div class="vym-toc-branch-3"><a href="#mc:0,bo:1,bo:10,bo:1"> 2.11.2.  Event Queue</a></br>
</div><div class="vym-toc-branch-4"><a href="#mc:0,bo:1,bo:10,bo:1,bo:0"> 2.11.2.1.  Queues is looked at when execution stack is empty</a></br>
</div><div class="vym-toc-branch-4"><a href="#mc:0,bo:1,bo:10,bo:1,bo:1"> 2.11.2.2.  JavaScript looks at th queue perodically</a></br>
</div><div class="vym-toc-branch-5"><a href="#mc:0,bo:1,bo:10,bo:1,bo:1,bo:0"> 2.11.2.2.1.  Event Loop</a></br>
</div><div class="vym-toc-branch-4"><a href="#mc:0,bo:1,bo:10,bo:1,bo:2"> 2.11.2.3.  click event</a></br>
</div><div class="vym-toc-branch-5"><a href="#mc:0,bo:1,bo:10,bo:1,bo:2,bo:0"> 2.11.2.3.1.  exeuction context for the function happens,</a></br>
</div><div class="vym-toc-branch-5"><a href="#mc:0,bo:1,bo:10,bo:1,bo:2,bo:1"> 2.11.2.3.2.  The code is still line by line</a></br>
</div><div class="vym-toc-branch-5"><a href="#mc:0,bo:1,bo:10,bo:1,bo:2,bo:2"> 2.11.2.3.3.  *The stack has to be empty*</a></br>
</div><div class="vym-toc-branch-3"><a href="#mc:0,bo:1,bo:10,bo:2"> 2.11.3.  Exeuction Stack</a></br>
</div><div class="vym-toc-branch-3"><a href="#mc:0,bo:1,bo:10,bo:3"> 2.11.4.  Code Example</a></br>
</div><div class="vym-toc-branch-4"><a href="#mc:0,bo:1,bo:10,bo:3,bo:0"> 2.11.4.1.  The click event is consoled lasted</a></br>
</div><div class="vym-toc-branch-4"><a href="#mc:0,bo:1,bo:10,bo:3,bo:1"> 2.11.4.2.  How does JavaScript, a synchronoistic langauge, deal with asynchronistic events?</a></br>
</div><div class="vym-toc-branch-5"><a href="#mc:0,bo:1,bo:10,bo:3,bo:1,bo:0"> 2.11.4.2.1.  It will run it's code and place it into the event queue</a></br>
</div><div class="vym-toc-branch-3"><a href="#mc:0,bo:1,bo:10,bo:4"> 2.11.5.  The asynchrnous part is outside of the JavaScript engine</a></br>
</div><div class="vym-toc-branch-4"><a href="#mc:0,bo:1,bo:10,bo:4,bo:0"> 2.11.5.1.  These async events will then be process in order that they happen</a></br>
</div><div class="vym-toc-branch-1"><a href="#mc:0,bo:2"> 3.  Types and Operators</a></br>
</div><div class="vym-toc-branch-2"><a href="#mc:0,bo:2,bo:0"> 3.1.  Coneptual Aside: Types</a></br>
</div><div class="vym-toc-branch-3"><a href="#mc:0,bo:2,bo:0,bo:0"> 3.1.1.  Dynamic Typing</a></br>
</div><div class="vym-toc-branch-4"><a href="#mc:0,bo:2,bo:0,bo:0,bo:0"> 3.1.1.1.  You don't tell JavaScript engine what type, it'll figure it out while the code
is running</a></br>
</div><div class="vym-toc-branch-3"><a href="#mc:0,bo:2,bo:0,bo:1"> 3.1.2.  Static Typing</a></br>
</div><div class="vym-toc-branch-4"><a href="#mc:0,bo:2,bo:0,bo:1,bo:0"> 3.1.2.1.  Java, C++, you need to have a certain type into it</a></br>
</div><div class="vym-toc-branch-4"><a href="#mc:0,bo:2,bo:0,bo:1,bo:1"> 3.1.2.2.  You get an error otherwise</a></br>
</div><div class="vym-toc-branch-2"><a href="#mc:0,bo:2,bo:1"> 3.2.  Primiative Type</a></br>
</div><div class="vym-toc-branch-3"><a href="#mc:0,bo:2,bo:1,bo:0"> 3.2.1.  A single value</a></br>
</div><div class="vym-toc-branch-3"><a href="#mc:0,bo:2,bo:1,bo:1"> 3.2.2.  Not an object</a></br>
</div><div class="vym-toc-branch-3"><a href="#mc:0,bo:2,bo:1,bo:2"> 3.2.3.  Six Types in JavaScript</a></br>
</div><div class="vym-toc-branch-4"><a href="#mc:0,bo:2,bo:1,bo:2,bo:0"> 3.2.3.1.  Undefined</a></br>
</div><div class="vym-toc-branch-5"><a href="#mc:0,bo:2,bo:1,bo:2,bo:0,bo:0"> 3.2.3.1.1.  Let JavaScript say when this doesn't exists</a></br>
</div><div class="vym-toc-branch-4"><a href="#mc:0,bo:2,bo:1,bo:2,bo:1"> 3.2.3.2.  Null</a></br>
</div><div class="vym-toc-branch-5"><a href="#mc:0,bo:2,bo:1,bo:2,bo:1,bo:0"> 3.2.3.2.1.  Use this if you want sometihng to mean &quot;not in existence&quot;</a></br>
</div><div class="vym-toc-branch-4"><a href="#mc:0,bo:2,bo:1,bo:2,bo:2"> 3.2.3.3.  Boolean</a></br>
</div><div class="vym-toc-branch-5"><a href="#mc:0,bo:2,bo:1,bo:2,bo:2,bo:0"> 3.2.3.3.1.  true</a></br>
</div><div class="vym-toc-branch-5"><a href="#mc:0,bo:2,bo:1,bo:2,bo:2,bo:1"> 3.2.3.3.2.  false</a></br>
</div><div class="vym-toc-branch-4"><a href="#mc:0,bo:2,bo:1,bo:2,bo:3"> 3.2.3.4.  Number</a></br>
</div><div class="vym-toc-branch-5"><a href="#mc:0,bo:2,bo:1,bo:2,bo:3,bo:0"> 3.2.3.4.1.  floating point number</a></br>
</div><div class="vym-toc-branch-5"><a href="#mc:0,bo:2,bo:1,bo:2,bo:3,bo:1"> 3.2.3.4.2.  Always some decimal at the end of it</a></br>
</div><div class="vym-toc-branch-4"><a href="#mc:0,bo:2,bo:1,bo:2,bo:4"> 3.2.3.5.  String</a></br>
</div><div class="vym-toc-branch-5"><a href="#mc:0,bo:2,bo:1,bo:2,bo:4,bo:0"> 3.2.3.5.1.  list of chatacters</a></br>
</div><div class="vym-toc-branch-4"><a href="#mc:0,bo:2,bo:1,bo:2,bo:5"> 3.2.3.6.  Symbol</a></br>
</div><div class="vym-toc-branch-5"><a href="#mc:0,bo:2,bo:1,bo:2,bo:5,bo:0"> 3.2.3.6.1.  es6</a></br>
</div><div class="vym-toc-branch-2"><a href="#mc:0,bo:2,bo:2"> 3.3.  Conceptual Asdie: Operators</a></br>
</div><div class="vym-toc-branch-3"><a href="#mc:0,bo:2,bo:2,bo:0"> 3.3.1.  A function that is syntaxtcally different</a></br>
</div><div class="vym-toc-branch-3"><a href="#mc:0,bo:2,bo:2,bo:1"> 3.3.2.  Usually takes 2 inputs and results in 1 output</a></br>
</div><div class="vym-toc-branch-3"><a href="#mc:0,bo:2,bo:2,bo:2"> 3.3.3.  notations</a></br>
</div><div class="vym-toc-branch-4"><a href="#mc:0,bo:2,bo:2,bo:2,bo:0"> 3.3.3.1.  +(3, 4) Prefix notation</a></br>
</div><div class="vym-toc-branch-4"><a href="#mc:0,bo:2,bo:2,bo:2,bo:1"> 3.3.3.2.  3+4 infix</a></br>
</div><div class="vym-toc-branch-4"><a href="#mc:0,bo:2,bo:2,bo:2,bo:2"> 3.3.3.3.  (3,4)+ post fix</a></br>
</div><div class="vym-toc-branch-3"><a href="#mc:0,bo:2,bo:2,bo:3"> 3.3.4.  The operators are functions in infix notation</a></br>
</div><div class="vym-toc-branch-3"><a href="#mc:0,bo:2,bo:2,bo:4"> 3.3.5.  Operators are functions that return values</a></br>
</div><div class="vym-toc-branch-2"><a href="#mc:0,bo:2,bo:3"> 3.4.  Operator Precedence and Associativity</a></br>
</div><div class="vym-toc-branch-3"><a href="#mc:0,bo:2,bo:3,bo:0"> 3.4.1.  Operator Precedence</a></br>
</div><div class="vym-toc-branch-4"><a href="#mc:0,bo:2,bo:3,bo:0,bo:0"> 3.4.1.1.  Which operators gets called first</a></br>
</div><div class="vym-toc-branch-4"><a href="#mc:0,bo:2,bo:3,bo:0,bo:1"> 3.4.1.2.  Higher precendene wins</a></br>
</div><div class="vym-toc-branch-4"><a href="#mc:0,bo:2,bo:3,bo:0,bo:2"> 3.4.1.3.  JS engine picks the highest precendence</a></br>
</div><div class="vym-toc-branch-3"><a href="#mc:0,bo:2,bo:3,bo:1"> 3.4.2.  Operator Associativity</a></br>
</div><div class="vym-toc-branch-4"><a href="#mc:0,bo:2,bo:3,bo:1,bo:0"> 3.4.2.1.  What order a function/operator gets called in (right to left, left to right)</a></br>
</div><div class="vym-toc-branch-4"><a href="#mc:0,bo:2,bo:3,bo:1,bo:1"> 3.4.2.2.  When they have the same precendence, associativity determines what gets ccalled
first</a></br>
</div><div class="vym-toc-branch-3"><a href="#mc:0,bo:2,bo:3,bo:2"> 3.4.3.  file:///home/juxley/Documents/Websites/Operator-Precedence-In-Javascript.pdf</a></br>
</div><div class="vym-toc-branch-3"><a href="#mc:0,bo:2,bo:3,bo:3"> 3.4.4.  Helps us to tell what the order that a operator (function) is called</a></br>
</div><div class="vym-toc-branch-3"><a href="#mc:0,bo:2,bo:3,bo:4"> 3.4.5.  Why is this important? JavaScript is dynamically typed</a></br>
</div><div class="vym-toc-branch-2"><a href="#mc:0,bo:2,bo:4"> 3.5.  Conceptual Aside: Coercion</a></br>
</div><div class="vym-toc-branch-3"><a href="#mc:0,bo:2,bo:4,bo:0"> 3.5.1.  Converting a value from one type to another</a></br>
</div><div class="vym-toc-branch-3"><a href="#mc:0,bo:2,bo:4,bo:1"> 3.5.2.  &quot;helllo &quot; + &quot;world&quot;</a></br>
</div><div class="vym-toc-branch-3"><a href="#mc:0,bo:2,bo:4,bo:2"> 3.5.3.  1 + 2</a></br>
</div><div class="vym-toc-branch-4"><a href="#mc:0,bo:2,bo:4,bo:2,bo:0"> 3.5.3.1.  3</a></br>
</div><div class="vym-toc-branch-3"><a href="#mc:0,bo:2,bo:4,bo:3"> 3.5.4.  1 + &quot;2&quot;</a></br>
</div><div class="vym-toc-branch-4"><a href="#mc:0,bo:2,bo:4,bo:3,bo:0"> 3.5.4.1.  12</a></br>
</div><div class="vym-toc-branch-4"><a href="#mc:0,bo:2,bo:4,bo:3,bo:1"> 3.5.4.2.  The value is coercied as a string</a></br>
</div><div class="vym-toc-branch-4"><a href="#mc:0,bo:2,bo:4,bo:3,bo:2"> 3.5.4.3.  In the memory, string and number 1 look very different</a></br>
</div><div class="vym-toc-branch-4"><a href="#mc:0,bo:2,bo:4,bo:3,bo:3"> 3.5.4.4.  JS engine makes a best guess</a></br>
</div><div class="vym-toc-branch-5"><a href="#mc:0,bo:2,bo:4,bo:3,bo:3,bo:0"> 3.5.4.4.1.  THIS choice!</a></br>
</div><div class="vym-toc-branch-3"><a href="#mc:0,bo:2,bo:4,bo:4"> 3.5.5.  This happens since JS is dynmaically typed</a></br>
</div><div class="vym-toc-branch-4"><a href="#mc:0,bo:2,bo:4,bo:4,bo:0"> 3.5.5.1.  Happen in the JS engine</a></br>
</div><div class="vym-toc-branch-3"><a href="#mc:0,bo:2,bo:4,bo:5"> 3.5.6.  operators are function, they run code as well</a></br>
</div><div class="vym-toc-branch-3"><a href="#mc:0,bo:2,bo:4,bo:6"> 3.5.7.  Coercion is a fundalmental part of the language, don't forget it!</a></br>
</div><div class="vym-toc-branch-2"><a href="#mc:0,bo:2,bo:5"> 3.6.  Comparison Operators</a></br>
</div><div class="vym-toc-branch-3"><a href="#mc:0,bo:2,bo:5,bo:0"> 3.6.1.  3 &lt; 2  &lt;  1</a></br>
</div><div class="vym-toc-branch-4"><a href="#mc:0,bo:2,bo:5,bo:0,bo:0"> 3.6.1.1.  true</a></br>
</div><div class="vym-toc-branch-3"><a href="#mc:0,bo:2,bo:5,bo:1"> 3.6.2.  1 &lt; 2 &lt; 3</a></br>
</div><div class="vym-toc-branch-4"><a href="#mc:0,bo:2,bo:5,bo:1,bo:0"> 3.6.2.1.  true</a></br>
</div><div class="vym-toc-branch-3"><a href="#mc:0,bo:2,bo:5,bo:2"> 3.6.3.  Boolen left &amp; right associativity</a></br>
</div><div class="vym-toc-branch-3"><a href="#mc:0,bo:2,bo:5,bo:3"> 3.6.4.  null</a></br>
</div><div class="vym-toc-branch-4"><a href="#mc:0,bo:2,bo:5,bo:3,bo:0"> 3.6.4.1.  Coerced to a number results into 0</a></br>
</div><div class="vym-toc-branch-3"><a href="#mc:0,bo:2,bo:5,bo:4"> 3.6.5.  NaN</a></br>
</div><div class="vym-toc-branch-4"><a href="#mc:0,bo:2,bo:5,bo:4,bo:0"> 3.6.5.1.  Coericing undeified</a></br>
</div><div class="vym-toc-branch-3"><a href="#mc:0,bo:2,bo:5,bo:5"> 3.6.6.  null == 0</a></br>
</div><div class="vym-toc-branch-3"><a href="#mc:0,bo:2,bo:5,bo:6"> 3.6.7.  Strict equals solves these weird coercives issues</a></br>
</div><div class="vym-toc-branch-4"><a href="#mc:0,bo:2,bo:5,bo:6,bo:0"> 3.6.7.1.  use strict equals when comparing quanities</a></br>
</div><div class="vym-toc-branch-4"><a href="#mc:0,bo:2,bo:5,bo:6,bo:1"> 3.6.7.2.  function ==(a, b)</a></br>
</div><div class="vym-toc-branch-4"><a href="#mc:0,bo:2,bo:5,bo:6,bo:2"> 3.6.7.3.  function ===(a, b)</a></br>
</div><div class="vym-toc-branch-4"><a href="#mc:0,bo:2,bo:5,bo:6,bo:3"> 3.6.7.4.  These are only function with different outcomes</a></br>
</div><div class="vym-toc-branch-3"><a href="#mc:0,bo:2,bo:5,bo:7"> 3.6.8.  Equality Sheet</a></br>
</div><div class="vym-toc-branch-2"><a href="#mc:0,bo:2,bo:6"> 3.7.  Existence &amp; Boolean</a></br>
</div><div class="vym-toc-branch-3"><a href="#mc:0,bo:2,bo:6,bo:0"> 3.7.1.  Things that imply a lack of existence = false</a></br>
</div><div class="vym-toc-branch-4"><a href="#mc:0,bo:2,bo:6,bo:0,bo:0"> 3.7.1.1.  We can use this to our advantage with if statements</a></br>
</div><div class="vym-toc-branch-4"><a href="#mc:0,bo:2,bo:6,bo:0,bo:1"> 3.7.1.2.  if (a || a === 0) // if a has something</a></br>
</div><div class="vym-toc-branch-3"><a href="#mc:0,bo:2,bo:6,bo:1"> 3.7.2.  Code Example</a></br>
</div><div class="vym-toc-branch-2"><a href="#mc:0,bo:2,bo:7"> 3.8.  Default Values</a></br>
</div><div class="vym-toc-branch-3"><a href="#mc:0,bo:2,bo:7,bo:0"> 3.8.1.  Code Example</a></br>
</div><div class="vym-toc-branch-4"><a href="#mc:0,bo:2,bo:7,bo:0,bo:0"> 3.8.1.1.  JavaScript creates the memory for the name variable, which would be undeined</a></br>
</div><div class="vym-toc-branch-4"><a href="#mc:0,bo:2,bo:7,bo:0,bo:1"> 3.8.1.2.  Then, undefined got coericed into a string</a></br>
</div><div class="vym-toc-branch-3"><a href="#mc:0,bo:2,bo:7,bo:1"> 3.8.2.  JavaScript doesn't care if you don't pass in a paramater for a function</a></br>
</div><div class="vym-toc-branch-3"><a href="#mc:0,bo:2,bo:7,bo:2"> 3.8.3.  What if we want a default value/</a></br>
</div><div class="vym-toc-branch-3"><a href="#mc:0,bo:2,bo:7,bo:3"> 3.8.4.  || doesn't always return true or false</a></br>
</div><div class="vym-toc-branch-4"><a href="#mc:0,bo:2,bo:7,bo:3,bo:0"> 3.8.4.1.  Gives the first one that coerces into true</a></br>
</div><div class="vym-toc-branch-2"><a href="#mc:0,bo:2,bo:8"> 3.9.  Framework Aside</a></br>
</div><div class="vym-toc-branch-3"><a href="#mc:0,bo:2,bo:8,bo:0"> 3.9.1.  Framework / LIbaryary = same thing. Reusable code</a></br>
</div><div class="vym-toc-branch-3"><a href="#mc:0,bo:2,bo:8,bo:1"> 3.9.2.  scritp tag</a></br>
</div><div class="vym-toc-branch-4"><a href="#mc:0,bo:2,bo:8,bo:1,bo:0"> 3.9.2.1.  They get stacked ontop of each other</a></br>
</div><div class="vym-toc-branch-4"><a href="#mc:0,bo:2,bo:8,bo:1,bo:1"> 3.9.2.2.  JS is usually minfied anyway</a></br>
</div><div class="vym-toc-branch-4"><a href="#mc:0,bo:2,bo:8,bo:1,bo:2"> 3.9.2.3.  The code is stacked onto itself, like it's on the file</a></br>
</div><div class="vym-toc-branch-3"><a href="#mc:0,bo:2,bo:8,bo:2"> 3.9.3.  window.varName = window.varName || &quot;Another string&quot;;</a></br>
</div><div class="vym-toc-branch-4"><a href="#mc:0,bo:2,bo:8,bo:2,bo:0"> 3.9.3.1.  Oh, you already used that variable name, I'll excuse myself</a></br>
</div><div class="vym-toc-branch-4"><a href="#mc:0,bo:2,bo:8,bo:2,bo:1"> 3.9.3.2.  The window object checks the Global Execution Context</a></br>
</div><div class="vym-toc-branch-1"><a href="#mc:0,bo:3"> 4.  Objects and Functions</a></br>
</div><div class="vym-toc-branch-2"><a href="#mc:0,bo:3,bo:0"> 4.1.  objects and the Dot</a></br>
</div><div class="vym-toc-branch-3"><a href="#mc:0,bo:3,bo:0,bo:0"> 4.1.1.  Names and values</a></br>
</div><div class="vym-toc-branch-3"><a href="#mc:0,bo:3,bo:0,bo:1"> 4.1.2.  Object 0-1</a></br>
</div><div class="vym-toc-branch-4"><a href="#mc:0,bo:3,bo:0,bo:1,bo:0"> 4.1.2.1.  Primitave &quot;property&quot; 0-11</a></br>
</div><div class="vym-toc-branch-5"><a href="#mc:0,bo:3,bo:0,bo:1,bo:0,bo:0"> 4.1.2.1.1.  booleans, strings, numbers, etc.</a></br>
</div><div class="vym-toc-branch-4"><a href="#mc:0,bo:3,bo:0,bo:1,bo:1"> 4.1.2.2.  Another (child) Object &quot;property&quot; 0-12</a></br>
</div><div class="vym-toc-branch-4"><a href="#mc:0,bo:3,bo:0,bo:1,bo:2"> 4.1.2.3.  function &quot;method&quot; 0-13</a></br>
</div><div class="vym-toc-branch-4"><a href="#mc:0,bo:3,bo:0,bo:1,bo:3"> 4.1.2.4.  Numbers are related like addresses</a></br>
</div><div class="vym-toc-branch-4"><a href="#mc:0,bo:3,bo:0,bo:1,bo:4"> 4.1.2.5.  it knows where the other object are</a></br>
</div><div class="vym-toc-branch-3"><a href="#mc:0,bo:3,bo:0,bo:2"> 4.1.3.  Operator</a></br>
</div><div class="vym-toc-branch-4"><a href="#mc:0,bo:3,bo:0,bo:2,bo:0"> 4.1.3.1.  computed memeber access</a></br>
</div><div class="vym-toc-branch-5"><a href="#mc:0,bo:3,bo:0,bo:2,bo:0,bo:0"> 4.1.3.1.1.  person[&quot;firstname&quot;] = &quot;Jason&quot;;</a></br>
</div><div class="vym-toc-branch-4"><a href="#mc:0,bo:3,bo:0,bo:2,bo:1"> 4.1.3.2.  Member access</a></br>
</div><div class="vym-toc-branch-5"><a href="#mc:0,bo:3,bo:0,bo:2,bo:1,bo:0"> 4.1.3.2.1.  The dot</a></br>
</div><div class="vym-toc-branch-5"><a href="#mc:0,bo:3,bo:0,bo:2,bo:1,bo:1"> 4.1.3.2.2.  person.firstname</a></br>
</div><div class="vym-toc-branch-4"><a href="#mc:0,bo:3,bo:0,bo:2,bo:2"> 4.1.3.3.  just functoin / operators to FIND these properties</a></br>
</div><div class="vym-toc-branch-2"><a href="#mc:0,bo:3,bo:1"> 4.2.  Object Literals</a></br>
</div><div class="vym-toc-branch-3"><a href="#mc:0,bo:3,bo:1,bo:0"> 4.2.1.  var person = { name: &quot;Jason&quot;, sign: &quot;Leo&quot; };</a></br>
</div><div class="vym-toc-branch-3"><a href="#mc:0,bo:3,bo:1,bo:1"> 4.2.2.  JavaScript is liberal with whitespaces</a></br>
</div><div class="vym-toc-branch-3"><a href="#mc:0,bo:3,bo:1,bo:2"> 4.2.3.  Example code</a></br>
</div><div class="vym-toc-branch-3"><a href="#mc:0,bo:3,bo:1,bo:3"> 4.2.4.  Where ever I want, I can make an object!</a></br>
</div><div class="vym-toc-branch-3"><a href="#mc:0,bo:3,bo:1,bo:4"> 4.2.5.  The code that you're written isn't what is happening under the hood</a></br>
</div><div class="vym-toc-branch-2"><a href="#mc:0,bo:3,bo:2"> 4.3.  Framework Aside: Faking Namespaces</a></br>
</div><div class="vym-toc-branch-3"><a href="#mc:0,bo:3,bo:2,bo:0"> 4.3.1.  Namespaces</a></br>
</div><div class="vym-toc-branch-4"><a href="#mc:0,bo:3,bo:2,bo:0,bo:0"> 4.3.1.1.  A container for variables and functions</a></br>
</div><div class="vym-toc-branch-3"><a href="#mc:0,bo:3,bo:2,bo:1"> 4.3.2.  JavaScript doesn't have namespaces, it doesn't need to; it can fake it.</a></br>
</div><div class="vym-toc-branch-3"><a href="#mc:0,bo:3,bo:2,bo:2"> 4.3.3.  Problem: a case where a global variable needs 2 values</a></br>
</div><div class="vym-toc-branch-3"><a href="#mc:0,bo:3,bo:2,bo:3"> 4.3.4.  Solution: use an object to make sure there is not namespace collations</a></br>
</div><div class="vym-toc-branch-4"><a href="#mc:0,bo:3,bo:2,bo:3,bo:0"> 4.3.4.1.  Example code</a></br>
</div><div class="vym-toc-branch-5"><a href="#mc:0,bo:3,bo:2,bo:3,bo:0,bo:0"> 4.3.4.1.1.  </a></br>
</div><div class="vym-toc-branch-3"><a href="#mc:0,bo:3,bo:2,bo:4"> 4.3.5.  Pitfall</a></br>
</div><div class="vym-toc-branch-4"><a href="#mc:0,bo:3,bo:2,bo:4,bo:0"> 4.3.5.1.  var english = {}; english.greetings.greet1 = &quot;Hello&quot;;</a></br>
</div><div class="vym-toc-branch-5"><a href="#mc:0,bo:3,bo:2,bo:4,bo:0,bo:0"> 4.3.5.1.1.  Output:Uncaught type error: greetings is undefined</a></br>
</div><div class="vym-toc-branch-5"><a href="#mc:0,bo:3,bo:2,bo:4,bo:0,bo:1"> 4.3.5.1.2.  english.greeting will be undefined</a></br>
</div><div class="vym-toc-branch-2"><a href="#mc:0,bo:3,bo:3"> 4.4.  JSON and Object Literal</a></br>
</div><div class="vym-toc-branch-3"><a href="#mc:0,bo:3,bo:3,bo:0"> 4.4.1.  Inspired by object literal</a></br>
</div><div class="vym-toc-branch-4"><a href="#mc:0,bo:3,bo:3,bo:0,bo:0"> 4.4.1.1.  Not the same as object literals</a></br>
</div><div class="vym-toc-branch-3"><a href="#mc:0,bo:3,bo:3,bo:1"> 4.4.2.  JavaScript Object Nottation</a></br>
</div><div class="vym-toc-branch-3"><a href="#mc:0,bo:3,bo:3,bo:2"> 4.4.3.  Many formats were send across the wire (the internet)</a></br>
</div><div class="vym-toc-branch-3"><a href="#mc:0,bo:3,bo:3,bo:3"> 4.4.4.  Example code</a></br>
</div><div class="vym-toc-branch-3"><a href="#mc:0,bo:3,bo:3,bo:4"> 4.4.5.  JSON is more strict</a></br>
</div><div class="vym-toc-branch-2"><a href="#mc:0,bo:3,bo:4"> 4.5.  Functions are objects</a></br>
</div><div class="vym-toc-branch-3"><a href="#mc:0,bo:3,bo:4,bo:0"> 4.5.1.  1st class functions</a></br>
</div><div class="vym-toc-branch-4"><a href="#mc:0,bo:3,bo:4,bo:0,bo:0"> 4.5.1.1.  Everything you can do other types, you can do with functions</a></br>
</div><div class="vym-toc-branch-4"><a href="#mc:0,bo:3,bo:4,bo:0,bo:1"> 4.5.1.2.  You can have functions as paramerts, set them equal to variables, write them on
the fly</a></br>
</div><div class="vym-toc-branch-3"><a href="#mc:0,bo:3,bo:4,bo:1"> 4.5.2.  A function is a special type of object</a></br>
</div><div class="vym-toc-branch-4"><a href="#mc:0,bo:3,bo:4,bo:1,bo:0"> 4.5.2.1.  You can attach properties and methods to a function</a></br>
</div><div class="vym-toc-branch-5"><a href="#mc:0,bo:3,bo:4,bo:1,bo:0,bo:0"> 4.5.2.1.1.  Primative</a></br>
</div><div class="vym-toc-branch-5"><a href="#mc:0,bo:3,bo:4,bo:1,bo:0,bo:1"> 4.5.2.1.2.  Object</a></br>
</div><div class="vym-toc-branch-5"><a href="#mc:0,bo:3,bo:4,bo:1,bo:0,bo:2"> 4.5.2.1.3.  Functions</a></br>
</div><div class="vym-toc-branch-5"><a href="#mc:0,bo:3,bo:4,bo:1,bo:0,bo:3"> 4.5.2.1.4.  Example Code</a></br>
</div><div class="vym-toc-branch-4"><a href="#mc:0,bo:3,bo:4,bo:1,bo:1"> 4.5.2.2.  Special parts</a></br>
</div><div class="vym-toc-branch-5"><a href="#mc:0,bo:3,bo:4,bo:1,bo:1,bo:0"> 4.5.2.2.1.  Names</a></br>
</div><div class="vym-toc-branch-6"><a href="#mc:0,bo:3,bo:4,bo:1,bo:1,bo:0,bo:0"> 4.5.2.2.1.1.  Doesn't have to have one</a></br>
</div><div class="vym-toc-branch-5"><a href="#mc:0,bo:3,bo:4,bo:1,bo:1,bo:1"> 4.5.2.2.2.  Code property</a></br>
</div><div class="vym-toc-branch-6"><a href="#mc:0,bo:3,bo:4,bo:1,bo:1,bo:1,bo:0"> 4.5.2.2.2.1.  Invocable</a></br>
</div><div class="vym-toc-branch-7"><a href="#mc:0,bo:3,bo:4,bo:1,bo:1,bo:1,bo:0,bo:0"> 4.5.2.2.2.1.1.  Run this code please! (execution context, exeuction, etc.)</a></br>
</div><div class="vym-toc-branch-2"><a href="#mc:0,bo:3,bo:5"> 4.6.  Function Statements and Function Expressions</a></br>
</div><div class="vym-toc-branch-3"><a href="#mc:0,bo:3,bo:5,bo:0"> 4.6.1.  Expression: a unit of code that results in a value</a></br>
</div><div class="vym-toc-branch-4"><a href="#mc:0,bo:3,bo:5,bo:0,bo:0"> 4.6.1.1.  Doesn't have to save inside a variable</a></br>
</div><div class="vym-toc-branch-4"><a href="#mc:0,bo:3,bo:5,bo:0,bo:1"> 4.6.1.2.  Examples</a></br>
</div><div class="vym-toc-branch-4"><a href="#mc:0,bo:3,bo:5,bo:0,bo:2"> 4.6.1.3.  function expression</a></br>
</div><div class="vym-toc-branch-5"><a href="#mc:0,bo:3,bo:5,bo:0,bo:2,bo:0"> 4.6.1.3.1.  It doesn't have a name, it's an anonymous function stored in memory with the
name of anaoymous greet</a></br>
</div><div class="vym-toc-branch-4"><a href="#mc:0,bo:3,bo:5,bo:0,bo:3"> 4.6.1.4.  Returns an object, while a function statement will say &quot;yeah there's a function
there&quot; and won't execute it in any way</a></br>
</div><div class="vym-toc-branch-4"><a href="#mc:0,bo:3,bo:5,bo:0,bo:4"> 4.6.1.5.  Variable set to undefined first</a></br>
</div><div class="vym-toc-branch-3"><a href="#mc:0,bo:3,bo:5,bo:1"> 4.6.2.  STatement: does work</a></br>
</div><div class="vym-toc-branch-4"><a href="#mc:0,bo:3,bo:5,bo:1,bo:0"> 4.6.2.1.  If statement</a></br>
</div><div class="vym-toc-branch-4"><a href="#mc:0,bo:3,bo:5,bo:1,bo:1"> 4.6.2.2.  function statement</a></br>
</div><div class="vym-toc-branch-5"><a href="#mc:0,bo:3,bo:5,bo:1,bo:1,bo:0"> 4.6.2.2.1.  It doesn't result in a value</a></br>
</div><div class="vym-toc-branch-5"><a href="#mc:0,bo:3,bo:5,bo:1,bo:1,bo:1"> 4.6.2.2.2.  Available in memory</a></br>
</div><div class="vym-toc-branch-5"><a href="#mc:0,bo:3,bo:5,bo:1,bo:1,bo:2"> 4.6.2.2.3.  Hoisted</a></br>
</div><div class="vym-toc-branch-3"><a href="#mc:0,bo:3,bo:5,bo:2"> 4.6.3.  Good good is being understandable and consie</a></br>
</div><div class="vym-toc-branch-3"><a href="#mc:0,bo:3,bo:5,bo:3"> 4.6.4.  function log(a) {</a></br>
</div><div class="vym-toc-branch-3"><a href="#mc:0,bo:3,bo:5,bo:4"> 4.6.5.  Passing function around, give function to function as parameters, use them like
variables = functional programming</a></br>
</div><div class="vym-toc-branch-3"><a href="#mc:0,bo:3,bo:5,bo:5"> 4.6.6.  first class function'; functions in JS are objects</a></br>
</div><div class="vym-toc-branch-2"><a href="#mc:0,bo:3,bo:6"> 4.7.  By Reference / By Value</a></br>
</div><div class="vym-toc-branch-3"><a href="#mc:0,bo:3,bo:6,bo:0"> 4.7.1.  By Value</a></br>
</div><div class="vym-toc-branch-4"><a href="#mc:0,bo:3,bo:6,bo:0,bo:0"> 4.7.1.1.  b = a</a></br>
</div><div class="vym-toc-branch-4"><a href="#mc:0,bo:3,bo:6,bo:0,bo:1"> 4.7.1.2.  Model</a></br>
</div><div class="vym-toc-branch-4"><a href="#mc:0,bo:3,bo:6,bo:0,bo:2"> 4.7.1.3.  Primitve types! (all, except objects)</a></br>
</div><div class="vym-toc-branch-4"><a href="#mc:0,bo:3,bo:6,bo:0,bo:3"> 4.7.1.4.  After copying, the variables can stay on their own.</a></br>
</div><div class="vym-toc-branch-3"><a href="#mc:0,bo:3,bo:6,bo:1"> 4.7.2.  By Reference</a></br>
</div><div class="vym-toc-branch-4"><a href="#mc:0,bo:3,bo:6,bo:1,bo:0"> 4.7.2.1.  Objects (all objects, which includes functions)</a></br>
</div><div class="vym-toc-branch-4"><a href="#mc:0,bo:3,bo:6,bo:1,bo:1"> 4.7.2.2.  Two names point to the same place in memory</a></br>
</div><div class="vym-toc-branch-4"><a href="#mc:0,bo:3,bo:6,bo:1,bo:2"> 4.7.2.3.  Model</a></br>
</div><div class="vym-toc-branch-3"><a href="#mc:0,bo:3,bo:6,bo:2"> 4.7.3.  Code</a></br>
</div><div class="vym-toc-branch-3"><a href="#mc:0,bo:3,bo:6,bo:3"> 4.7.4.  mutated</a></br>
</div><div class="vym-toc-branch-4"><a href="#mc:0,bo:3,bo:6,bo:3,bo:0"> 4.7.4.1.  To chang a avlue</a></br>
</div><div class="vym-toc-branch-3"><a href="#mc:0,bo:3,bo:6,bo:4"> 4.7.5.  immuatable</a></br>
</div><div class="vym-toc-branch-4"><a href="#mc:0,bo:3,bo:6,bo:4,bo:0"> 4.7.5.1.  Cannot be change</a></br>
</div><div class="vym-toc-branch-2"><a href="#mc:0,bo:3,bo:7"> 4.8.  Objects, Functions, and &quot;this&quot;</a></br>
</div><div class="vym-toc-branch-3"><a href="#mc:0,bo:3,bo:7,bo:0"> 4.8.1.  Each time an execution context is made, JavaScript makes the 'this' object</a></br>
</div><div class="vym-toc-branch-3"><a href="#mc:0,bo:3,bo:7,bo:1"> 4.8.2.  3 Execution Conext</a></br>
</div><div class="vym-toc-branch-4"><a href="#mc:0,bo:3,bo:7,bo:1,bo:0"> 4.8.2.1.  All 3 'this' point to the global object, the Window object</a></br>
</div><div class="vym-toc-branch-4"><a href="#mc:0,bo:3,bo:7,bo:1,bo:1"> 4.8.2.2.  Code Example</a></br>
</div><div class="vym-toc-branch-4"><a href="#mc:0,bo:3,bo:7,bo:1,bo:2"> 4.8.2.3.  'this' will point to the ojbect is attached to. It will point to the object it
contains to.</a></br>
</div><div class="vym-toc-branch-4"><a href="#mc:0,bo:3,bo:7,bo:1,bo:3"> 4.8.2.4.  You can access the properties within the object using 'this'</a></br>
</div><div class="vym-toc-branch-4"><a href="#mc:0,bo:3,bo:7,bo:1,bo:4"> 4.8.2.5.  when just invocating a funciton, 'this' points to the global object</a></br>
</div><div class="vym-toc-branch-4"><a href="#mc:0,bo:3,bo:7,bo:1,bo:5"> 4.8.2.6.  when in a object, 'this points to the object itself</a></br>
</div><div class="vym-toc-branch-2"><a href="#mc:0,bo:3,bo:8"> 4.9.  Conceptual Aside: Collection of Anything</a></br>
</div><div class="vym-toc-branch-2"><a href="#mc:0,bo:3,bo:9"> 4.10.  arguments and &quot;spread&quot;</a></br>
</div><div class="vym-toc-branch-3"><a href="#mc:0,bo:3,bo:9,bo:0"> 4.10.1.  </a></br>
</div><div class="vym-toc-branch-3"><a href="#mc:0,bo:3,bo:9,bo:1"> 4.10.2.  arguments hold all the values of all of the parameters passed into a function</a></br>
</div><div class="vym-toc-branch-3"><a href="#mc:0,bo:3,bo:9,bo:2"> 4.10.3.  Arguments =&gt; The parameters yyou pass into a function</a></br>
</div><div class="vym-toc-branch-3"><a href="#mc:0,bo:3,bo:9,bo:3"> 4.10.4.  JavaScript gives you a key word that stores tthem in</a></br>
</div><div class="vym-toc-branch-3"><a href="#mc:0,bo:3,bo:9,bo:4"> 4.10.5.  Example</a></br>
</div><div class="vym-toc-branch-3"><a href="#mc:0,bo:3,bo:9,bo:5"> 4.10.6.  Hving default parameters</a></br>
</div><div class="vym-toc-branch-3"><a href="#mc:0,bo:3,bo:9,bo:6"> 4.10.7.  arguments keyword IS NOT really an array.</a></br>
</div><div class="vym-toc-branch-4"><a href="#mc:0,bo:3,bo:9,bo:6,bo:0"> 4.10.7.1.  Know as array-like</a></br>
</div><div class="vym-toc-branch-3"><a href="#mc:0,bo:3,bo:9,bo:7"> 4.10.8.  Arguments are depreeated</a></br>
</div><div class="vym-toc-branch-3"><a href="#mc:0,bo:3,bo:9,bo:8"> 4.10.9.  Spread!</a></br>
</div><div class="vym-toc-branch-4"><a href="#mc:0,bo:3,bo:9,bo:8,bo:0"> 4.10.9.1.  ...other</a></br>
</div><div class="vym-toc-branch-4"><a href="#mc:0,bo:3,bo:9,bo:8,bo:1"> 4.10.9.2.  Take the paramets and put them in an array called other</a></br>
</div><div class="vym-toc-branch-2"><a href="#mc:0,bo:3,bo:10"> 4.11.  Framework Aside : function overloading</a></br>
</div><div class="vym-toc-branch-3"><a href="#mc:0,bo:3,bo:10,bo:0"> 4.11.1.  JavaScript doesn't have this, and we don't care</a></br>
</div><div class="vym-toc-branch-3"><a href="#mc:0,bo:3,bo:10,bo:1"> 4.11.2.  We have 1st class functions</a></br>
</div><div class="vym-toc-branch-3"><a href="#mc:0,bo:3,bo:10,bo:2"> 4.11.3.  Example</a></br>
</div><div class="vym-toc-branch-2"><a href="#mc:0,bo:3,bo:11"> 4.12.  Concept Aside: Syntax Parser</a></br>
</div><div class="vym-toc-branch-3"><a href="#mc:0,bo:3,bo:11,bo:0"> 4.12.1.  The computer transflate it into what the computer can understand</a></br>
</div><div class="vym-toc-branch-3"><a href="#mc:0,bo:3,bo:11,bo:1"> 4.12.2.  A browser is on for JavaScript</a></br>
</div><div class="vym-toc-branch-3"><a href="#mc:0,bo:3,bo:11,bo:2"> 4.12.3.  if it see proper syntax, it'll know what you tend to do</a></br>
</div><div class="vym-toc-branch-3"><a href="#mc:0,bo:3,bo:11,bo:3"> 4.12.4.  character by  character making assumptions, rules, and might even make changes
to your code; trying to determine what you intend to do</a></br>
</div><div class="vym-toc-branch-2"><a href="#mc:0,bo:3,bo:12"> 4.13.  Dangerous Aside!!!!!!! Automatic Semicolin Insertation</a></br>
</div><div class="vym-toc-branch-3"><a href="#mc:0,bo:3,bo:12,bo:0"> 4.13.1.  The JavaScript syntax parser will put a ; where it expects it to be.</a></br>
</div><div class="vym-toc-branch-3"><a href="#mc:0,bo:3,bo:12,bo:1"> 4.13.2.  Put the semicolons, as you don't want JavaScript to guess for you.</a></br>
</div><div class="vym-toc-branch-3"><a href="#mc:0,bo:3,bo:12,bo:2"> 4.13.3.  Returns (enter) may cause some problems in your code</a></br>
</div><div class="vym-toc-branch-3"><a href="#mc:0,bo:3,bo:12,bo:3"> 4.13.4.  Example (Incorrect)</a></br>
</div><div class="vym-toc-branch-3"><a href="#mc:0,bo:3,bo:12,bo:4"> 4.13.5.  Example (Correct)</a></br>
</div><div class="vym-toc-branch-3"><a href="#mc:0,bo:3,bo:12,bo:5"> 4.13.6.  Put { on the same line as the statement (object, function, if, etc.)</a></br>
</div><div class="vym-toc-branch-2"><a href="#mc:0,bo:3,bo:13"> 4.14.  Conceptual Aside :WhitespacesJ</a></br>
</div><div class="vym-toc-branch-3"><a href="#mc:0,bo:3,bo:13,bo:0"> 4.14.1.  JavaScript is very liberal</a></br>
</div><div class="vym-toc-branch-3"><a href="#mc:0,bo:3,bo:13,bo:1"> 4.14.2.  Make comments! You add one using white spaces</a></br>
</div><div class="vym-toc-branch-4"><a href="#mc:0,bo:3,bo:13,bo:1,bo:0"> 4.14.2.1.  </a></br>
</div><div class="vym-toc-branch-3"><a href="#mc:0,bo:3,bo:13,bo:2"> 4.14.3.  Example</a></br>
</div><div class="vym-toc-branch-3"><a href="#mc:0,bo:3,bo:13,bo:3"> 4.14.4.  Programming will be happy to put a lot of coments to take adventage of this</a></br>
</div><div class="vym-toc-branch-3"><a href="#mc:0,bo:3,bo:13,bo:4"> 4.14.5.  When coming back to your own code you'll be happy</a></br>
</div><div class="vym-toc-branch-2"><a href="#mc:0,bo:3,bo:14"> 4.15.  Immeditaly Invoked Function Expressions</a></br>
</div><div class="vym-toc-branch-3"><a href="#mc:0,bo:3,bo:14,bo:0"> 4.15.1.  Function statment</a></br>
</div><div class="vym-toc-branch-3"><a href="#mc:0,bo:3,bo:14,bo:1"> 4.15.2.  Function Expression</a></br>
</div><div class="vym-toc-branch-3"><a href="#mc:0,bo:3,bo:14,bo:2"> 4.15.3.  Functoins</a></br>
</div><div class="vym-toc-branch-4"><a href="#mc:0,bo:3,bo:14,bo:2,bo:0"> 4.15.3.1.  Code property (innovcation)</a></br>
</div><div class="vym-toc-branch-4"><a href="#mc:0,bo:3,bo:14,bo:2,bo:1"> 4.15.3.2.  Name</a></br>
</div><div class="vym-toc-branch-3"><a href="#mc:0,bo:3,bo:14,bo:3"> 4.15.4.  Invoking something on the fly</a></br>
</div><div class="vym-toc-branch-3"><a href="#mc:0,bo:3,bo:14,bo:4"> 4.15.5.  IIFE</a></br>
</div><div class="vym-toc-branch-4"><a href="#mc:0,bo:3,bo:14,bo:4,bo:0"> 4.15.5.1.  Invocate a function immeditably after creating it</a></br>
</div><div class="vym-toc-branch-4"><a href="#mc:0,bo:3,bo:14,bo:4,bo:1"> 4.15.5.2.  The variable holds the returned value, not the function</a></br>
</div><div class="vym-toc-branch-3"><a href="#mc:0,bo:3,bo:14,bo:5"> 4.15.6.  We can put strings, numbers, and objects anywhere, that's not doing anything; we
can do so.</a></br>
</div><div class="vym-toc-branch-4"><a href="#mc:0,bo:3,bo:14,bo:5,bo:0"> 4.15.6.1.  We can't do it with functions; it wants to be a function STATEMENT</a></br>
</div><div class="vym-toc-branch-4"><a href="#mc:0,bo:3,bo:14,bo:5,bo:1"> 4.15.6.2.  UNLESS we have a function expression, by WRAPPING YOUR FUNCTION IN PARENTHESES</a></br>
</div><div class="vym-toc-branch-3"><a href="#mc:0,bo:3,bo:14,bo:6"> 4.15.7.  Expression: Something that returns a value</a></br>
</div><div class="vym-toc-branch-3"><a href="#mc:0,bo:3,bo:14,bo:7"> 4.15.8.  What's special about this?</a></br>
</div><div class="vym-toc-branch-4"><a href="#mc:0,bo:3,bo:14,bo:7,bo:0"> 4.15.8.1.  we can have a function expression (wrapped in parens to trick the syntax
paratex, then we can write a function and run it at the same time</a></br>
</div><div class="vym-toc-branch-4"><a href="#mc:0,bo:3,bo:14,bo:7,bo:1"> 4.15.8.2.  Another Example</a></br>
</div><div class="vym-toc-branch-3"><a href="#mc:0,bo:3,bo:14,bo:8"> 4.15.9.  Framework aside IIFE and Safe Code</a></br>
</div><div class="vym-toc-branch-4"><a href="#mc:0,bo:3,bo:14,bo:8,bo:0"> 4.15.9.1.  Ran Code</a></br>
</div><div class="vym-toc-branch-4"><a href="#mc:0,bo:3,bo:14,bo:8,bo:1"> 4.15.9.2.  Execution Stack</a></br>
</div><div class="vym-toc-branch-5"><a href="#mc:0,bo:3,bo:14,bo:8,bo:1,bo:0"> 4.15.9.2.1.  Hits the function expression, create an object with code (anynomous function)</a></br>
</div><div class="vym-toc-branch-5"><a href="#mc:0,bo:3,bo:14,bo:8,bo:1,bo:1"> 4.15.9.2.2.  Hits the parentheses that invokes the funciton</a></br>
</div><div class="vym-toc-branch-5"><a href="#mc:0,bo:3,bo:14,bo:8,bo:1,bo:2"> 4.15.9.2.3.  Execution Conext of the anynomous function</a></br>
</div><div class="vym-toc-branch-6"><a href="#mc:0,bo:3,bo:14,bo:8,bo:1,bo:2,bo:0"> 4.15.9.2.3.1.  The parameter goes into the Execution Conext of the anyonmous function, it is
not touching the global enviroment.</a></br>
</div><div class="vym-toc-branch-6"><a href="#mc:0,bo:3,bo:14,bo:8,bo:1,bo:2,bo:1"> 4.15.9.2.3.2.  This allows us to have 2 variable names in JavaScript; esecially when usng
frameworks.</a></br>
</div><div class="vym-toc-branch-4"><a href="#mc:0,bo:3,bo:14,bo:8,bo:2"> 4.15.9.3.  Image</a></br>
</div><div class="vym-toc-branch-4"><a href="#mc:0,bo:3,bo:14,bo:8,bo:3"> 4.15.9.4.  The entire framework wll be in an IIFE to prevent code from crashing into other
code</a></br>
</div><div class="vym-toc-branch-5"><a href="#mc:0,bo:3,bo:14,bo:8,bo:3,bo:0"> 4.15.9.4.1.  This will also create reuseable code</a></br>
</div><div class="vym-toc-branch-4"><a href="#mc:0,bo:3,bo:14,bo:8,bo:4"> 4.15.9.5.  What if we want someting inthe global object?</a></br>
</div><div class="vym-toc-branch-5"><a href="#mc:0,bo:3,bo:14,bo:8,bo:4,bo:0"> 4.15.9.5.1.  Pass the global object (window) into the IIFE</a></br>
</div><div class="vym-toc-branch-6"><a href="#mc:0,bo:3,bo:14,bo:8,bo:4,bo:0,bo:0"> 4.15.9.5.1.1.  Example</a></br>
</div><div class="vym-toc-branch-2"><a href="#mc:0,bo:3,bo:15"> 4.16.  Understanding Closures</a></br>
</div><div class="vym-toc-branch-3"><a href="#mc:0,bo:3,bo:15,bo:0"> 4.16.1.  Example</a></br>
</div><div class="vym-toc-branch-3"><a href="#mc:0,bo:3,bo:15,bo:1"> 4.16.2.  How does the sayhey varable still know the whattosay value?</a></br>
</div><div class="vym-toc-branch-3"><a href="#mc:0,bo:3,bo:15,bo:2"> 4.16.3.  This is possible due to closures</a></br>
</div><div class="vym-toc-branch-3"><a href="#mc:0,bo:3,bo:15,bo:3"> 4.16.4.  The greet function needs to &quot;end&quot; after the execution is complete. How does it
work?</a></br>
</div><div class="vym-toc-branch-4"><a href="#mc:0,bo:3,bo:15,bo:3,bo:0"> 4.16.4.1.  It's pop off the stack when greet finshes reading &quot;return&quot;</a></br>
</div><div class="vym-toc-branch-3"><a href="#mc:0,bo:3,bo:15,bo:4"> 4.16.5.  The Execution Conext has a space in memory where the variables live.</a></br>
</div><div class="vym-toc-branch-4"><a href="#mc:0,bo:3,bo:15,bo:4,bo:0"> 4.16.5.1.  Using it cleans out, due to garabage collection</a></br>
</div><div class="vym-toc-branch-4"><a href="#mc:0,bo:3,bo:15,bo:4,bo:1"> 4.16.5.2.  However, when the execution conext is complete, the vairables in memory are
still there</a></br>
</div><div class="vym-toc-branch-3"><a href="#mc:0,bo:3,bo:15,bo:5"> 4.16.6.  When sayHey hits whatstosay, it'll go up the Scope Chain</a></br>
</div><div class="vym-toc-branch-4"><a href="#mc:0,bo:3,bo:15,bo:5,bo:0"> 4.16.6.1.  What's in memoery for the &quot;lost&quot; execution conext, the variable can still go
down the scope chain.</a></br>
</div><div class="vym-toc-branch-4"><a href="#mc:0,bo:3,bo:15,bo:5,bo:1"> 4.16.6.2.  It's &quot;closed it&quot; the outer variables.</a></br>
</div><div class="vym-toc-branch-4"><a href="#mc:0,bo:3,bo:15,bo:5,bo:2"> 4.16.6.3.  Closing in the variables that are needed.</a></br>
</div><div class="vym-toc-branch-3"><a href="#mc:0,bo:3,bo:15,bo:6"> 4.16.7.  Clousres are a feature of JavaScript; it'll do it for you.</a></br>
</div><div class="vym-toc-branch-4"><a href="#mc:0,bo:3,bo:15,bo:6,bo:0"> 4.16.7.1.  &quot;You&quot; don't create a clousre</a></br>
</div><div class="vym-toc-branch-3"><a href="#mc:0,bo:3,bo:15,bo:7"> 4.16.8.  You don't need to worry that the outer execution conext is running; it'll have
the variables within scope</a></br>
</div><div class="vym-toc-branch-3"><a href="#mc:0,bo:3,bo:15,bo:8"> 4.16.9.  Classic Example</a></br>
</div><div class="vym-toc-branch-4"><a href="#mc:0,bo:3,bo:15,bo:8,bo:0"> 4.16.9.1.  pic</a></br>
</div><div class="vym-toc-branch-4"><a href="#mc:0,bo:3,bo:15,bo:8,bo:1"> 4.16.9.2.  What is the value of the PARENT, what is the value of the memory RIGHT NOW, when
the code is being executed.</a></br>
</div><div class="vym-toc-branch-4"><a href="#mc:0,bo:3,bo:15,bo:8,bo:2"> 4.16.9.3.  Buildfunctions2</a></br>
</div><div class="vym-toc-branch-4"><a href="#mc:0,bo:3,bo:15,bo:8,bo:3"> 4.16.9.4.  IIFE Version</a></br>
</div><div class="vym-toc-branch-3"><a href="#mc:0,bo:3,bo:15,bo:9"> 4.16.10.  Framework Aside: Function Factories</a></br>
</div><div class="vym-toc-branch-4"><a href="#mc:0,bo:3,bo:15,bo:9,bo:0"> 4.16.10.1.  Clousres give us the ability to have set parameters in a function; building it
off another function</a></br>
</div><div class="vym-toc-branch-4"><a href="#mc:0,bo:3,bo:15,bo:9,bo:1"> 4.16.10.2.  When calling the built funciton; the orginal parameter passed through, doesn't
have access to the parameter</a></br>
</div><div class="vym-toc-branch-4"><a href="#mc:0,bo:3,bo:15,bo:9,bo:2"> 4.16.10.3.  Example</a></br>
</div><div class="vym-toc-branch-4"><a href="#mc:0,bo:3,bo:15,bo:9,bo:3"> 4.16.10.4.  When calling the function twice, they aren't in the same memeory space since
they are in another execution context</a></br>
</div><div class="vym-toc-branch-4"><a href="#mc:0,bo:3,bo:15,bo:9,bo:4"> 4.16.10.5.  Image</a></br>
</div><div class="vym-toc-branch-3"><a href="#mc:0,bo:3,bo:15,bo:10"> 4.16.11.  Closures and CallbacksC</a></br>
</div><div class="vym-toc-branch-4"><a href="#mc:0,bo:3,bo:15,bo:10,bo:0"> 4.16.11.1.  Example</a></br>
</div><div class="vym-toc-branch-4"><a href="#mc:0,bo:3,bo:15,bo:10,bo:1"> 4.16.11.2.  We are passing a function as a variable (first class function)</a></br>
</div><div class="vym-toc-branch-4"><a href="#mc:0,bo:3,bo:15,bo:10,bo:2"> 4.16.11.3.  We used a function expression (declaring a function on the fly)</a></br>
</div><div class="vym-toc-branch-4"><a href="#mc:0,bo:3,bo:15,bo:10,bo:3"> 4.16.11.4.  We have greet as clousres</a></br>
</div><div class="vym-toc-branch-4"><a href="#mc:0,bo:3,bo:15,bo:10,bo:4"> 4.16.11.5.  All of long you've used clousres and first call functoin :D</a></br>
</div><div class="vym-toc-branch-4"><a href="#mc:0,bo:3,bo:15,bo:10,bo:5"> 4.16.11.6.  Callback; when you're done working, call the function the other function for me
when yo'ure odne</a></br>
</div><div class="vym-toc-branch-4"><a href="#mc:0,bo:3,bo:15,bo:10,bo:6"> 4.16.11.7.  Callback function: a function given to another function to be run when the other
function is finished</a></br>
</div><div class="vym-toc-branch-5"><a href="#mc:0,bo:3,bo:15,bo:10,bo:6,bo:0"> 4.16.11.7.1.  The function invoked &quot;callsback&quot; by calling the function given when finished</a></br>
</div><div class="vym-toc-branch-5"><a href="#mc:0,bo:3,bo:15,bo:10,bo:6,bo:1"> 4.16.11.7.2.  Example Callback</a></br>
</div><div class="vym-toc-branch-2"><a href="#mc:0,bo:3,bo:16"> 4.17.  call(), apply() bind()</a></br>
</div><div class="vym-toc-branch-3"><a href="#mc:0,bo:3,bo:16,bo:0"> 4.17.1.  Controlling what the &quot;this&quot; variable can be?</a></br>
</div><div class="vym-toc-branch-4"><a href="#mc:0,bo:3,bo:16,bo:0,bo:0"> 4.17.1.1.  That's what these function can do</a></br>
</div><div class="vym-toc-branch-3"><a href="#mc:0,bo:3,bo:16,bo:1"> 4.17.2.  All function get special methods</a></br>
</div><div class="vym-toc-branch-4"><a href="#mc:0,bo:3,bo:16,bo:1,bo:0"> 4.17.2.1.  bind</a></br>
</div><div class="vym-toc-branch-5"><a href="#mc:0,bo:3,bo:16,bo:1,bo:0,bo:0"> 4.17.2.1.1.  Creates a copy, and passing what we want the &quot;this vairable&quot; is</a></br>
</div><div class="vym-toc-branch-5"><a href="#mc:0,bo:3,bo:16,bo:1,bo:0,bo:1"> 4.17.2.1.2.  Doesn't call it</a></br>
</div><div class="vym-toc-branch-4"><a href="#mc:0,bo:3,bo:16,bo:1,bo:1"> 4.17.2.2.  call</a></br>
</div><div class="vym-toc-branch-5"><a href="#mc:0,bo:3,bo:16,bo:1,bo:1,bo:0"> 4.17.2.2.1.  logName.call invokes the function, yet we can pass  the &quot;this&quot; variable, and
pass in parameters</a></br>
</div><div class="vym-toc-branch-4"><a href="#mc:0,bo:3,bo:16,bo:1,bo:2"> 4.17.2.3.  apply</a></br>
</div><div class="vym-toc-branch-5"><a href="#mc:0,bo:3,bo:16,bo:1,bo:2,bo:0"> 4.17.2.3.1.  aSame as call, yet you'll have to use arrays; which would help with mathmatics</a></br>
</div><div class="vym-toc-branch-5"><a href="#mc:0,bo:3,bo:16,bo:1,bo:2,bo:1"> 4.17.2.3.2.  Can also use a IIFE</a></br>
</div><div class="vym-toc-branch-6"><a href="#mc:0,bo:3,bo:16,bo:1,bo:2,bo:1,bo:0"> 4.17.2.3.2.1.  When would we use this?</a></br>
</div><div class="vym-toc-branch-6"><a href="#mc:0,bo:3,bo:16,bo:1,bo:2,bo:1,bo:1"> 4.17.2.3.2.2.  Function Borrowing</a></br>
</div><div class="vym-toc-branch-7"><a href="#mc:0,bo:3,bo:16,bo:1,bo:2,bo:1,bo:1,bo:0"> 4.17.2.3.2.2.1.  We borrwed a functoin and used the person2 object</a></br>
</div><div class="vym-toc-branch-6"><a href="#mc:0,bo:3,bo:16,bo:1,bo:2,bo:1,bo:2"> 4.17.2.3.2.3.  Function Currying (bind)</a></br>
</div><div class="vym-toc-branch-7"><a href="#mc:0,bo:3,bo:16,bo:1,bo:2,bo:1,bo:2,bo:0"> 4.17.2.3.2.3.1.  Sets permant values of the parameters for the copied (new) funciton)</a></br>
</div><div class="vym-toc-branch-7"><a href="#mc:0,bo:3,bo:16,bo:1,bo:2,bo:1,bo:2,bo:1"> 4.17.2.3.2.3.2.  BWA: function currying: building a copy of a function yet with set parametrs,
good for mathmatics</a></br>
</div><div class="vym-toc-branch-3"><a href="#mc:0,bo:3,bo:16,bo:2"> 4.17.3.  Image</a></br>
</div><div class="vym-toc-branch-2"><a href="#mc:0,bo:3,bo:17"> 4.18.  Functional Programming</a></br>
</div><div class="vym-toc-branch-3"><a href="#mc:0,bo:3,bo:17,bo:0"> 4.18.1.  JavaScript looks like other functional programming</a></br>
</div><div class="vym-toc-branch-4"><a href="#mc:0,bo:3,bo:17,bo:0,bo:0"> 4.18.1.1.  </a></br>
</div><div class="vym-toc-branch-4"><a href="#mc:0,bo:3,bo:17,bo:0,bo:1"> 4.18.1.2.  </a></br>
</div><div class="vym-toc-branch-3"><a href="#mc:0,bo:3,bo:17,bo:1"> 4.18.2.  Think and code in terms of functions</a></br>
</div><div class="vym-toc-branch-3"><a href="#mc:0,bo:3,bo:17,bo:2"> 4.18.3.  Introduces a new approach of thinking in programming due to first class
functions</a></br>
</div><div class="vym-toc-branch-3"><a href="#mc:0,bo:3,bo:17,bo:3"> 4.18.4.  mapForEach example</a></br>
</div><div class="vym-toc-branch-4"><a href="#mc:0,bo:3,bo:17,bo:3,bo:0"> 4.18.4.1.  Telling the parameter function to do the work to each item</a></br>
</div><div class="vym-toc-branch-4"><a href="#mc:0,bo:3,bo:17,bo:3,bo:1"> 4.18.4.2.  Clean, easy to read, consie, REUSEABLE code</a></br>
</div><div class="vym-toc-branch-3"><a href="#mc:0,bo:3,bo:17,bo:4"> 4.18.5.  In functional programming, don't mutated data.</a></br>
</div><div class="vym-toc-branch-4"><a href="#mc:0,bo:3,bo:17,bo:4,bo:0"> 4.18.5.1.  Return something new</a></br>
</div><div class="vym-toc-branch-4"><a href="#mc:0,bo:3,bo:17,bo:4,bo:1"> 4.18.5.2.  Mutated the data early</a></br>
</div><div class="vym-toc-branch-4"><a href="#mc:0,bo:3,bo:17,bo:4,bo:2"> 4.18.5.3.  It could become an entire course</a></br>
</div><div class="vym-toc-branch-4"><a href="#mc:0,bo:3,bo:17,bo:4,bo:3"> 4.18.5.4.  This is what take JavaScript to the next level</a></br>
</div><div class="vym-toc-branch-3"><a href="#mc:0,bo:3,bo:17,bo:5"> 4.18.6.  Part 2</a></br>
</div><div class="vym-toc-branch-4"><a href="#mc:0,bo:3,bo:17,bo:5,bo:0"> 4.18.6.1.  underscore.js library</a></br>
</div><div class="vym-toc-branch-5"><a href="#mc:0,bo:3,bo:17,bo:5,bo:0,bo:0"> 4.18.6.1.1.  </a></br>
</div><div class="vym-toc-branch-4"><a href="#mc:0,bo:3,bo:17,bo:5,bo:1"> 4.18.6.2.  An Open Source Eduation</a></br>
</div><div class="vym-toc-branch-5"><a href="#mc:0,bo:3,bo:17,bo:5,bo:1,bo:0"> 4.18.6.2.1.  Read and Write good JavaScript</a></br>
</div><div class="vym-toc-branch-5"><a href="#mc:0,bo:3,bo:17,bo:5,bo:1,bo:1"> 4.18.6.2.2.  You'll need to understand the foundation of JavaScript</a></br>
</div><div class="vym-toc-branch-4"><a href="#mc:0,bo:3,bo:17,bo:5,bo:2"> 4.18.6.3.  underscore.js example</a></br>
</div><div class="vym-toc-branch-1"><a href="#mc:0,bo:4"> 5.  Object Oriented JavaScript and Prototypal Inhertiance</a></br>
</div><div class="vym-toc-branch-2"><a href="#mc:0,bo:4,bo:0"> 5.1.  Conceptual Aside: Classical vs Proptoypal Inhertiance</a></br>
</div><div class="vym-toc-branch-3"><a href="#mc:0,bo:4,bo:0,bo:0"> 5.1.1.  BWA: Inhertiance: when an object gets access to antoher objects properties and
methods</a></br>
</div><div class="vym-toc-branch-3"><a href="#mc:0,bo:4,bo:0,bo:1"> 5.1.2.  Classical</a></br>
</div><div class="vym-toc-branch-4"><a href="#mc:0,bo:4,bo:0,bo:1,bo:0"> 5.1.2.1.  Common structure in Java</a></br>
</div><div class="vym-toc-branch-4"><a href="#mc:0,bo:4,bo:0,bo:1,bo:1"> 5.1.2.2.  Cons: verbose</a></br>
</div><div class="vym-toc-branch-4"><a href="#mc:0,bo:4,bo:0,bo:1,bo:2"> 5.1.2.3.  Extedned vocabulary</a></br>
</div><div class="vym-toc-branch-3"><a href="#mc:0,bo:4,bo:0,bo:2"> 5.1.3.  Prototypal</a></br>
</div><div class="vym-toc-branch-4"><a href="#mc:0,bo:4,bo:0,bo:2,bo:0"> 5.1.3.1.  Flexible, simple, easy to understand</a></br>
</div><div class="vym-toc-branch-4"><a href="#mc:0,bo:4,bo:0,bo:2,bo:1"> 5.1.3.2.  Very different than other programming languages</a></br>
</div><div class="vym-toc-branch-2"><a href="#mc:0,bo:4,bo:1"> 5.2.  Understanding the Prototype</a></br>
</div><div class="vym-toc-branch-3"><a href="#mc:0,bo:4,bo:1,bo:0"> 5.2.1.  All objects (including functions) has the prototype object</a></br>
</div><div class="vym-toc-branch-3"><a href="#mc:0,bo:4,bo:1,bo:1"> 5.2.2.  Image</a></br>
</div><div class="vym-toc-branch-3"><a href="#mc:0,bo:4,bo:1,bo:2"> 5.2.3.  It will look like prop2 within proto</a></br>
</div><div class="vym-toc-branch-3"><a href="#mc:0,bo:4,bo:1,bo:3"> 5.2.4.  Each object can has it's own prototype</a></br>
</div><div class="vym-toc-branch-3"><a href="#mc:0,bo:4,bo:1,bo:4"> 5.2.5.  obj.prop2 will go down the PROTOTYPE CHAIN</a></br>
</div><div class="vym-toc-branch-4"><a href="#mc:0,bo:4,bo:1,bo:4,bo:0"> 5.2.5.1.  The JS Engine will search for the property for us</a></br>
</div><div class="vym-toc-branch-3"><a href="#mc:0,bo:4,bo:1,bo:5"> 5.2.6.  Code Example</a></br>
</div><div class="vym-toc-branch-4"><a href="#mc:0,bo:4,bo:1,bo:5,bo:0"> 5.2.6.1.  NEVER DO THIS EVER.  IT WILL SLOW DOWN YOUR STUFF</a></br>
</div><div class="vym-toc-branch-4"><a href="#mc:0,bo:4,bo:1,bo:5,bo:1"> 5.2.6.2.  this also knows the object that orginated the call</a></br>
</div><div class="vym-toc-branch-2"><a href="#mc:0,bo:4,bo:2"> 5.3.  Everything is an Object (or a primative)</a></br>
</div><div class="vym-toc-branch-3"><a href="#mc:0,bo:4,bo:2,bo:0"> 5.3.1.  functions, arrays, etc. all have a prototype</a></br>
</div><div class="vym-toc-branch-3"><a href="#mc:0,bo:4,bo:2,bo:1"> 5.3.2.  Execept the base object</a></br>
</div><div class="vym-toc-branch-4"><a href="#mc:0,bo:4,bo:2,bo:1,bo:0"> 5.3.2.1.  Everything eventually leads to the base Object</a></br>
</div><div class="vym-toc-branch-3"><a href="#mc:0,bo:4,bo:2,bo:2"> 5.3.3.  Code</a></br>
</div><div class="vym-toc-branch-3"><a href="#mc:0,bo:4,bo:2,bo:3"> 5.3.4.  All of the base prototypes have share methods with ALL of the other objects,
functions, and arrays</a></br>
</div><div class="vym-toc-branch-3"><a href="#mc:0,bo:4,bo:2,bo:4"> 5.3.5.  The JavaScript engine has already set the proto of soething</a></br>
</div><div class="vym-toc-branch-3"><a href="#mc:0,bo:4,bo:2,bo:5"> 5.3.6.  The prototype of the protype points to the base Object</a></br>
</div><div class="vym-toc-branch-2"><a href="#mc:0,bo:4,bo:3"> 5.4.  Reflection and Extension</a></br>
</div><div class="vym-toc-branch-3"><a href="#mc:0,bo:4,bo:3,bo:0"> 5.4.1.  BWA: Reflection: An object can look at itself, listing and changing its
properties and methods</a></br>
</div><div class="vym-toc-branch-3"><a href="#mc:0,bo:4,bo:3,bo:1"> 5.4.2.  Example</a></br>
</div><div class="vym-toc-branch-4"><a href="#mc:0,bo:4,bo:3,bo:1,bo:0"> 5.4.2.1.  This is an example of reflection as it lists an objects properties and methods</a></br>
</div><div class="vym-toc-branch-3"><a href="#mc:0,bo:4,bo:3,bo:2"> 5.4.3.  Extend</a></br>
</div><div class="vym-toc-branch-4"><a href="#mc:0,bo:4,bo:3,bo:2,bo:0"> 5.4.3.1.  Compliment to JS prototype</a></br>
</div><div class="vym-toc-branch-5"><a href="#mc:0,bo:4,bo:3,bo:2,bo:0,bo:0"> 5.4.3.1.1.  </a></br>
</div><div class="vym-toc-branch-4"><a href="#mc:0,bo:4,bo:3,bo:2,bo:1"> 5.4.3.2.  underscore.js creates one</a></br>
</div><div class="vym-toc-branch-1"><a href="#mc:0,bo:5"> 6.  Building Objects</a></br>
</div><div class="vym-toc-branch-2"><a href="#mc:0,bo:5,bo:0"> 6.1.  Function Constructors, 'new', and the History of JavaScript</a></br>
</div><div class="vym-toc-branch-3"><a href="#mc:0,bo:5,bo:0,bo:0"> 6.1.1.  History</a></br>
</div><div class="vym-toc-branch-4"><a href="#mc:0,bo:5,bo:0,bo:0,bo:0"> 6.1.1.1.  Programming war!!!</a></br>
</div><div class="vym-toc-branch-4"><a href="#mc:0,bo:5,bo:0,bo:0,bo:1"> 6.1.1.2.  Call JavaScript; to attract Java developers (marketing!)</a></br>
</div><div class="vym-toc-branch-4"><a href="#mc:0,bo:5,bo:0,bo:0,bo:2"> 6.1.1.3.  var john = new Person()</a></br>
</div><div class="vym-toc-branch-5"><a href="#mc:0,bo:5,bo:0,bo:0,bo:2,bo:0"> 6.1.1.3.1.  Looks a bit like Java</a></br>
</div><div class="vym-toc-branch-3"><a href="#mc:0,bo:5,bo:0,bo:1"> 6.1.2.  Example Code</a></br>
</div><div class="vym-toc-branch-3"><a href="#mc:0,bo:5,bo:0,bo:2"> 6.1.3.  Learning the proper way to build objects to assign properites, methods, and
settting the prototypes</a></br>
</div><div class="vym-toc-branch-3"><a href="#mc:0,bo:5,bo:0,bo:3"> 6.1.4.  new is an opperator</a></br>
</div><div class="vym-toc-branch-4"><a href="#mc:0,bo:5,bo:0,bo:3,bo:0"> 6.1.4.1.  immediatedly an empty object is created</a></br>
</div><div class="vym-toc-branch-4"><a href="#mc:0,bo:5,bo:0,bo:3,bo:1"> 6.1.4.2.  Then it calls the Person() function</a></br>
</div><div class="vym-toc-branch-5"><a href="#mc:0,bo:5,bo:0,bo:3,bo:1,bo:0"> 6.1.4.2.1.  Execution conext is made, and &quot;this&quot; is created</a></br>
</div><div class="vym-toc-branch-5"><a href="#mc:0,bo:5,bo:0,bo:3,bo:1,bo:1"> 6.1.4.2.2.  The &quot;This&quot; points to the empty object that new created</a></br>
</div><div class="vym-toc-branch-4"><a href="#mc:0,bo:5,bo:0,bo:3,bo:2"> 6.1.4.3.  Having a function create an object</a></br>
</div><div class="vym-toc-branch-3"><a href="#mc:0,bo:5,bo:0,bo:4"> 6.1.5.  Function Constructors = function</a></br>
</div><div class="vym-toc-branch-4"><a href="#mc:0,bo:5,bo:0,bo:4,bo:0"> 6.1.5.1.  A normal function, used to create objecs</a></br>
</div><div class="vym-toc-branch-4"><a href="#mc:0,bo:5,bo:0,bo:4,bo:1"> 6.1.5.2.  The &quot;this&quot; variable points to an new empty object, and the object is return from
the function automatically</a></br>
</div><div class="vym-toc-branch-2"><a href="#mc:0,bo:5,bo:1"> 6.2.  Function Constructors and .prototype</a></br>
</div><div class="vym-toc-branch-3"><a href="#mc:0,bo:5,bo:1,bo:0"> 6.2.1.  Image</a></br>
</div><div class="vym-toc-branch-3"><a href="#mc:0,bo:5,bo:1,bo:1"> 6.2.2.  When function constructors are called with new, it creates an empty object</a></br>
</div><div class="vym-toc-branch-3"><a href="#mc:0,bo:5,bo:1,bo:2"> 6.2.3.  The .prototype points to this object</a></br>
</div><div class="vym-toc-branch-3"><a href="#mc:0,bo:5,bo:1,bo:3"> 6.2.4.  It has properties and methods; and it has</a></br>
</div><div class="vym-toc-branch-3"><a href="#mc:0,bo:5,bo:1,bo:4"> 6.2.5.  Why add it to the prototype and not the function constructor?</a></br>
</div><div class="vym-toc-branch-4"><a href="#mc:0,bo:5,bo:1,bo:4,bo:0"> 6.2.5.1.  The method sits in the prototype in memory only one time</a></br>
</div><div class="vym-toc-branch-4"><a href="#mc:0,bo:5,bo:1,bo:4,bo:1"> 6.2.5.2.  The object can be created many times and point to the one method</a></br>
</div><div class="vym-toc-branch-3"><a href="#mc:0,bo:5,bo:1,bo:5"> 6.2.6.  Example</a></br>
</div><div class="vym-toc-branch-4"><a href="#mc:0,bo:5,bo:1,bo:5,bo:0"> 6.2.6.1.  One of the valid ways of setting the prototype in JavaScript</a></br>
</div><div class="vym-toc-branch-2"><a href="#mc:0,bo:5,bo:2"> 6.3.  Dangerous Aside: new and function constructors</a></br>
</div><div class="vym-toc-branch-3"><a href="#mc:0,bo:5,bo:2,bo:0"> 6.3.1.  if you don't have the &quot;new&quot; keyword, then the object will be undefinied since
the function doesn't return anything</a></br>
</div><div class="vym-toc-branch-3"><a href="#mc:0,bo:5,bo:2,bo:1"> 6.3.2.  Coding Convention: Functoin Constructors have capital letters</a></br>
</div><div class="vym-toc-branch-3"><a href="#mc:0,bo:5,bo:2,bo:2"> 6.3.3.  there are going to be making a new way for function constructor?</a></br>
</div><div class="vym-toc-branch-2"><a href="#mc:0,bo:5,bo:3"> 6.4.  Conceptual Aside: Built In Function Constructors</a></br>
</div><div class="vym-toc-branch-3"><a href="#mc:0,bo:5,bo:3,bo:0"> 6.4.1.  var a = new Number(&quot;3&quot;) // Numbe {[Primiative Value], 3}</a></br>
</div><div class="vym-toc-branch-3"><a href="#mc:0,bo:5,bo:3,bo:1"> 6.4.2.  var b = new String(&quot;Jason&quot;)</a></br>
</div><div class="vym-toc-branch-4"><a href="#mc:0,bo:5,bo:3,bo:1,bo:0"> 6.4.2.1.  b.indexOf(&quot;o&quot;)</a></br>
</div><div class="vym-toc-branch-4"><a href="#mc:0,bo:5,bo:3,bo:1,bo:1"> 6.4.2.2.  String.prototype.indexOf(&quot;o&quot;)</a></br>
</div><div class="vym-toc-branch-3"><a href="#mc:0,bo:5,bo:3,bo:2"> 6.4.3.  You are not creating primiative, you are creating objects</a></br>
</div><div class="vym-toc-branch-3"><a href="#mc:0,bo:5,bo:3,bo:3"> 6.4.4.  &quot;Jason&quot;.length</a></br>
</div><div class="vym-toc-branch-4"><a href="#mc:0,bo:5,bo:3,bo:3,bo:0"> 6.4.4.1.  It will &quot;box&quot; the string in an object for you, so you can use properties and
methods of the prototype'</a></br>
</div><div class="vym-toc-branch-3"><a href="#mc:0,bo:5,bo:3,bo:4"> 6.4.5.  var d = new Date(&quot;3/1/15&quot;)</a></br>
</div><div class="vym-toc-branch-3"><a href="#mc:0,bo:5,bo:3,bo:5"> 6.4.6.  We can tac on features onto Strings, Numbers, Dates</a></br>
</div><div class="vym-toc-branch-3"><a href="#mc:0,bo:5,bo:3,bo:6"> 6.4.7.  By understanding this, we can extend the language</a></br>
</div><div class="vym-toc-branch-3"><a href="#mc:0,bo:5,bo:3,bo:7"> 6.4.8.  Warning! make sure that you don't overwrite pre-existing methods or prototypes</a></br>
</div><div class="vym-toc-branch-3"><a href="#mc:0,bo:5,bo:3,bo:8"> 6.4.9.  Strings and Array do get boxing, while Numbers do not</a></br>
</div><div class="vym-toc-branch-3"><a href="#mc:0,bo:5,bo:3,bo:9"> 6.4.10.  new Number !== a primative number</a></br>
</div><div class="vym-toc-branch-2"><a href="#mc:0,bo:5,bo:4"> 6.5.  Dangerous Aside: Build In Function Constructor</a></br>
</div><div class="vym-toc-branch-3"><a href="#mc:0,bo:5,bo:4,bo:0"> 6.5.1.  Example code</a></br>
</div><div class="vym-toc-branch-3"><a href="#mc:0,bo:5,bo:4,bo:1"> 6.5.2.  Function Constructors are not pritatives</a></br>
</div><div class="vym-toc-branch-3"><a href="#mc:0,bo:5,bo:4,bo:2"> 6.5.3.  To avoid this, use literals</a></br>
</div><div class="vym-toc-branch-3"><a href="#mc:0,bo:5,bo:4,bo:3"> 6.5.4.  If you do use them, understand what is goin gon</a></br>
</div><div class="vym-toc-branch-3"><a href="#mc:0,bo:5,bo:4,bo:4"> 6.5.5.  If you using the Date, use moment.js</a></br>
</div><div class="vym-toc-branch-3"><a href="#mc:0,bo:5,bo:4,bo:5"> 6.5.6.  It's dangerous to use function constructor for primatives</a></br>
</div><div class="vym-toc-branch-3"><a href="#mc:0,bo:5,bo:4,bo:6"> 6.5.7.  You can also use this a function, not a constructor</a></br>
</div><div class="vym-toc-branch-2"><a href="#mc:0,bo:5,bo:5"> 6.6.  Dangerous Aside: Arrays and for.in</a></br>
</div><div class="vym-toc-branch-3"><a href="#mc:0,bo:5,bo:5,bo:0"> 6.6.1.  Arrays are objects!</a></br>
</div><div class="vym-toc-branch-3"><a href="#mc:0,bo:5,bo:5,bo:1"> 6.6.2.  Code</a></br>
</div><div class="vym-toc-branch-3"><a href="#mc:0,bo:5,bo:5,bo:2"> 6.6.3.  If someone extends the Array.prototype with additional features, and we attempt
to use for..in then we will see the Array.protype since it goes down the
prototype chain</a></br>
</div><div class="vym-toc-branch-2"><a href="#mc:0,bo:5,bo:6"> 6.7.  Object.create and Pure Prototypal Inheritence</a></br>
</div><div class="vym-toc-branch-3"><a href="#mc:0,bo:5,bo:6,bo:0"> 6.7.1.  Example Code</a></br>
</div><div class="vym-toc-branch-3"><a href="#mc:0,bo:5,bo:6,bo:1"> 6.7.2.  This structure of code is known as pure prototypal inhertience</a></br>
</div><div class="vym-toc-branch-3"><a href="#mc:0,bo:5,bo:6,bo:2"> 6.7.3.  This way we can keep methods on the base object and override the properties</a></br>
</div><div class="vym-toc-branch-3"><a href="#mc:0,bo:5,bo:6,bo:3"> 6.7.4.  BWA: Polyfil</a></br>
</div><div class="vym-toc-branch-4"><a href="#mc:0,bo:5,bo:6,bo:3,bo:0"> 6.7.4.1.  Code that will add a feature which theengine MAY lack</a></br>
</div><div class="vym-toc-branch-4"><a href="#mc:0,bo:5,bo:6,bo:3,bo:1"> 6.7.4.2.  Adding Object.create</a></br>
</div><div class="vym-toc-branch-3"><a href="#mc:0,bo:5,bo:6,bo:4"> 6.7.5.  We can add feautre, properties and methods, on the fly</a></br>
</div><div class="vym-toc-branch-3"><a href="#mc:0,bo:5,bo:6,bo:5"> 6.7.6.  freer approach to constructing objects</a></br>
</div><div class="vym-toc-branch-2"><a href="#mc:0,bo:5,bo:7"> 6.8.  ES6 and Classes</a></br>
</div><div class="vym-toc-branch-3"><a href="#mc:0,bo:5,bo:7,bo:0"> 6.8.1.  ES6 introduces classes in another way</a></br>
</div><div class="vym-toc-branch-3"><a href="#mc:0,bo:5,bo:7,bo:1"> 6.8.2.  Example Code</a></br>
</div><div class="vym-toc-branch-3"><a href="#mc:0,bo:5,bo:7,bo:2"> 6.8.3.  JavaScript defers, because THIS IS AN OBJECT</a></br>
</div><div class="vym-toc-branch-3"><a href="#mc:0,bo:5,bo:7,bo:3"> 6.8.4.  This isn't a class, like a template in other langauges</a></br>
</div><div class="vym-toc-branch-3"><a href="#mc:0,bo:5,bo:7,bo:4"> 6.8.5.  In addition, we use the &quot;new&quot; keyword</a></br>
</div><div class="vym-toc-branch-3"><a href="#mc:0,bo:5,bo:7,bo:5"> 6.8.6.  Appreciate prototypal inhertience! stop mimicking other langaues? &lt;/opinion&gt;</a></br>
</div><div class="vym-toc-branch-3"><a href="#mc:0,bo:5,bo:7,bo:6"> 6.8.7.  extends: a keyword that sets the __proto__ to a certain Object</a></br>
</div><div class="vym-toc-branch-4"><a href="#mc:0,bo:5,bo:7,bo:6,bo:0"> 6.8.7.1.  Then we can call the super keyword to call the parent constructor</a></br>
</div><div class="vym-toc-branch-3"><a href="#mc:0,bo:5,bo:7,bo:7"> 6.8.8.  Another syntically way; yet all of them work the same way</a></br>
</div><div class="vym-toc-branch-3"><a href="#mc:0,bo:5,bo:7,bo:8"> 6.8.9.  syntactic sugar: another way to type the code, that doesn't change the way the
JavaScript engine works, yet it is written differnetly</a></br>
</div><div class="vym-toc-branch-1"><a href="#mc:0,bo:6"> 7.  Odds and Ends</a></br>
</div><div class="vym-toc-branch-2"><a href="#mc:0,bo:6,bo:0"> 7.1.  Initialization</a></br>
</div><div class="vym-toc-branch-3"><a href="#mc:0,bo:6,bo:0,bo:0"> 7.1.1.  When we have a large amount of data, it may look scary</a></br>
</div><div class="vym-toc-branch-4"><a href="#mc:0,bo:6,bo:0,bo:0,bo:0"> 7.1.1.1.  Don't be intimdated</a></br>
</div><div class="vym-toc-branch-3"><a href="#mc:0,bo:6,bo:0,bo:1"> 7.1.2.  Prepare data for API before going done software</a></br>
</div><div class="vym-toc-branch-3"><a href="#mc:0,bo:6,bo:0,bo:2"> 7.1.3.  Syntax highlighters are great!</a></br>
</div><div class="vym-toc-branch-3"><a href="#mc:0,bo:6,bo:0,bo:3"> 7.1.4.  Example</a></br>
</div><div class="vym-toc-branch-2"><a href="#mc:0,bo:6,bo:1"> 7.2.  'typeof', 'instanceof' and figuring out what somethig is</a></br>
</div><div class="vym-toc-branch-3"><a href="#mc:0,bo:6,bo:1,bo:0"> 7.2.1.  Example</a></br>
</div><div class="vym-toc-branch-3"><a href="#mc:0,bo:6,bo:1,bo:1"> 7.2.2.  typeof has six different outputs</a></br>
</div><div class="vym-toc-branch-4"><a href="#mc:0,bo:6,bo:1,bo:1,bo:0"> 7.2.2.1.  function</a></br>
</div><div class="vym-toc-branch-4"><a href="#mc:0,bo:6,bo:1,bo:1,bo:1"> 7.2.2.2.  string</a></br>
</div><div class="vym-toc-branch-4"><a href="#mc:0,bo:6,bo:1,bo:1,bo:2"> 7.2.2.3.  number</a></br>
</div><div class="vym-toc-branch-4"><a href="#mc:0,bo:6,bo:1,bo:1,bo:3"> 7.2.2.4.  undefined</a></br>
</div><div class="vym-toc-branch-4"><a href="#mc:0,bo:6,bo:1,bo:1,bo:4"> 7.2.2.5.  object</a></br>
</div><div class="vym-toc-branch-4"><a href="#mc:0,bo:6,bo:1,bo:1,bo:5"> 7.2.2.6.  boolean</a></br>
</div><div class="vym-toc-branch-4"><a href="#mc:0,bo:6,bo:1,bo:1,bo:6"> 7.2.2.7.  WHAT ABOUT ARRAYS</a></br>
</div><div class="vym-toc-branch-5"><a href="#mc:0,bo:6,bo:1,bo:1,bo:6,bo:0"> 7.2.2.7.1.  We need to get around them by going down the Object prototype chain</a></br>
</div><div class="vym-toc-branch-2"><a href="#mc:0,bo:6,bo:2"> 7.3.  Strict Mode</a></br>
</div><div class="vym-toc-branch-3"><a href="#mc:0,bo:6,bo:2,bo:0"> 7.3.1.  Docs</a></br>
</div><div class="vym-toc-branch-3"><a href="#mc:0,bo:6,bo:2,bo:1"> 7.3.2.  Opt in to having a picky regemant</a></br>
</div><div class="vym-toc-branch-3"><a href="#mc:0,bo:6,bo:2,bo:2"> 7.3.3.  Doesn't solve all of it's liberal features</a></br>
</div><div class="vym-toc-branch-3"><a href="#mc:0,bo:6,bo:2,bo:3"> 7.3.4.  Example</a></br>
</div><div class="vym-toc-branch-3"><a href="#mc:0,bo:6,bo:2,bo:4"> 7.3.5.  Put &quot;use strict&quot; on the type of the file (global execution) or function</a></br>
</div><div class="vym-toc-branch-4"><a href="#mc:0,bo:6,bo:2,bo:4,bo:0"> 7.3.5.1.  Using it on the function, we can have the function have strict mode</a></br>
</div><div class="vym-toc-branch-3"><a href="#mc:0,bo:6,bo:2,bo:5"> 7.3.6.  It has to be the first line of the function or the file</a></br>
</div><div class="vym-toc-branch-3"><a href="#mc:0,bo:6,bo:2,bo:6"> 7.3.7.  Not ever JavaScript engine works with &quot;use strict&quot; in the same way</a></br>
</div><div class="vym-toc-branch-3"><a href="#mc:0,bo:6,bo:2,bo:7"> 7.3.8.  Careful of minification when we have mutiple files. Stay safe of this</a></br>
</div><div class="vym-toc-branch-1"><a href="#mc:0,bo:7"> 8.  Examing Famous Frameworks and Libraries</a></br>
</div><div class="vym-toc-branch-2"><a href="#mc:0,bo:7,bo:0"> 8.1.  Look into other's code</a></br>
</div><div class="vym-toc-branch-3"><a href="#mc:0,bo:7,bo:0,bo:0"> 8.1.1.  Go ahead and read them</a></br>
</div><div class="vym-toc-branch-3"><a href="#mc:0,bo:7,bo:0,bo:1"> 8.1.2.  Millions of people use it every day!</a></br>
</div><div class="vym-toc-branch-3"><a href="#mc:0,bo:7,bo:0,bo:2"> 8.1.3.  An Open Source Education!</a></br>
</div><div class="vym-toc-branch-3"><a href="#mc:0,bo:7,bo:0,bo:3"> 8.1.4.  Don't be afraid! You can learn from them!</a></br>
</div><div class="vym-toc-branch-3"><a href="#mc:0,bo:7,bo:0,bo:4"> 8.1.5.  Explore other's code in github!</a></br>
</div><div class="vym-toc-branch-4"><a href="#mc:0,bo:7,bo:0,bo:4,bo:0"> 8.1.5.1.  Explore &gt; JavaScript Frameworks</a></br>
</div><div class="vym-toc-branch-3"><a href="#mc:0,bo:7,bo:0,bo:5"> 8.1.6.  jQuery</a></br>
</div><div class="vym-toc-branch-3"><a href="#mc:0,bo:7,bo:0,bo:6"> 8.1.7.  Find something that you find interest, and see what we can learn and soak in</a></br>
</div><div class="vym-toc-branch-4"><a href="#mc:0,bo:7,bo:0,bo:6,bo:0"> 8.1.7.1.  Occassionally take a look into it</a></br>
</div><div class="vym-toc-branch-2"><a href="#mc:0,bo:7,bo:1"> 8.2.  Deep Dive into Source Code: jQuery part 1</a></br>
</div><div class="vym-toc-branch-3"><a href="#mc:0,bo:7,bo:1,bo:0"> 8.2.1.  Go into the code and see if there's anything that we can use (we don't need to
understand every little thing)</a></br>
</div><div class="vym-toc-branch-3"><a href="#mc:0,bo:7,bo:1,bo:1"> 8.2.2.  What is jQuery</a></br>
</div><div class="vym-toc-branch-4"><a href="#mc:0,bo:7,bo:1,bo:1,bo:0"> 8.2.2.1.  fixes cross browser issues</a></br>
</div><div class="vym-toc-branch-4"><a href="#mc:0,bo:7,bo:1,bo:1,bo:1"> 8.2.2.2.  syntacical pretty code</a></br>
</div><div class="vym-toc-branch-4"><a href="#mc:0,bo:7,bo:1,bo:1,bo:2"> 8.2.2.3.  Let's you manipulate the DOM</a></br>
</div><div class="vym-toc-branch-5"><a href="#mc:0,bo:7,bo:1,bo:1,bo:2,bo:0"> 8.2.2.3.1.  DOM is the model that shows the HTML page</a></br>
</div><div class="vym-toc-branch-5"><a href="#mc:0,bo:7,bo:1,bo:1,bo:2,bo:1"> 8.2.2.3.2.  Makes it easier to looking to DOM to make changes to them</a></br>
</div><div class="vym-toc-branch-3"><a href="#mc:0,bo:7,bo:1,bo:2"> 8.2.3.  Example Code</a></br>
</div><div class="vym-toc-branch-4"><a href="#mc:0,bo:7,bo:1,bo:2,bo:0"> 8.2.3.1.  HTML</a></br>
</div><div class="vym-toc-branch-4"><a href="#mc:0,bo:7,bo:1,bo:2,bo:1"> 8.2.3.2.  $ or jQuery</a></br>
</div><div class="vym-toc-branch-4"><a href="#mc:0,bo:7,bo:1,bo:2,bo:2"> 8.2.3.3.  jquery.js</a></br>
</div><div class="vym-toc-branch-5"><a href="#mc:0,bo:7,bo:1,bo:2,bo:2,bo:0"> 8.2.3.3.1.  version 1.11.2</a></br>
</div><div class="vym-toc-branch-4"><a href="#mc:0,bo:7,bo:1,bo:2,bo:3"> 8.2.3.4.  app.js</a></br>
</div><div class="vym-toc-branch-5"><a href="#mc:0,bo:7,bo:1,bo:2,bo:3,bo:0"> 8.2.3.4.1.  // I want the all of the li elements of the ul elements with the class of people</a></br>
</div><div class="vym-toc-branch-5"><a href="#mc:0,bo:7,bo:1,bo:2,bo:3,bo:1"> 8.2.3.4.2.  // Each li is a DOM element. It has things like innerHTML, and other things</a></br>
</div><div class="vym-toc-branch-5"><a href="#mc:0,bo:7,bo:1,bo:2,bo:3,bo:2"> 8.2.3.4.3.  // __proto__ has a jQuery object; which has many methods</a></br>
</div><div class="vym-toc-branch-6"><a href="#mc:0,bo:7,bo:1,bo:2,bo:3,bo:2,bo:0"> 8.2.3.4.3.1.  It's better to have methods on the prototype to save memory space. Each of the
declared properties don't have to have the same methods written over and over
again</a></br>
</div><div class="vym-toc-branch-5"><a href="#mc:0,bo:7,bo:1,bo:2,bo:3,bo:3"> 8.2.3.4.4.  What is jQuery.fn.init(3)?</a></br>
</div><div class="vym-toc-branch-4"><a href="#mc:0,bo:7,bo:1,bo:2,bo:4"> 8.2.3.5.  A function that calls a function constructor</a></br>
</div><div class="vym-toc-branch-4"><a href="#mc:0,bo:7,bo:1,bo:2,bo:5"> 8.2.3.6.  What does the beginning of the code do?</a></br>
</div><div class="vym-toc-branch-4"><a href="#mc:0,bo:7,bo:1,bo:2,bo:6"> 8.2.3.7.  All funcitons get a prototype property</a></br>
</div><div class="vym-toc-branch-5"><a href="#mc:0,bo:7,bo:1,bo:2,bo:6,bo:0"> 8.2.3.7.1.  jQuery.fn is an aliasn for jQuery.prototype, so we don't have to type it again</a></br>
</div><div class="vym-toc-branch-4"><a href="#mc:0,bo:7,bo:1,bo:2,bo:7"> 8.2.3.8.  jQuery.extend</a></br>
</div><div class="vym-toc-branch-5"><a href="#mc:0,bo:7,bo:1,bo:2,bo:7,bo:0"> 8.2.3.8.1.  Perhaps the same concept as the one in Underscore.js</a></br>
</div><div class="vym-toc-branch-5"><a href="#mc:0,bo:7,bo:1,bo:2,bo:7,bo:1"> 8.2.3.8.2.  Aliasses to a function expression</a></br>
</div><div class="vym-toc-branch-5"><a href="#mc:0,bo:7,bo:1,bo:2,bo:7,bo:2"> 8.2.3.8.3.  Deep copy</a></br>
</div><div class="vym-toc-branch-5"><a href="#mc:0,bo:7,bo:1,bo:2,bo:7,bo:3"> 8.2.3.8.4.  Taking the properties and methods of an object and passing it into another
object</a></br>
</div><div class="vym-toc-branch-5"><a href="#mc:0,bo:7,bo:1,bo:2,bo:7,bo:4"> 8.2.3.8.5.  Pass as many objects as you'd like</a></br>
</div><div class="vym-toc-branch-5"><a href="#mc:0,bo:7,bo:1,bo:2,bo:7,bo:5"> 8.2.3.8.6.  It goes down and calls it again as well.</a></br>
</div><div class="vym-toc-branch-5"><a href="#mc:0,bo:7,bo:1,bo:2,bo:7,bo:6"> 8.2.3.8.7.  A really good method to extend objects and the objects objects ...etc.</a></br>
</div><div class="vym-toc-branch-5"><a href="#mc:0,bo:7,bo:1,bo:2,bo:7,bo:7"> 8.2.3.8.8.  After making this, it calls uses it immediately</a></br>
</div><div class="vym-toc-branch-6"><a href="#mc:0,bo:7,bo:1,bo:2,bo:7,bo:7,bo:0"> 8.2.3.8.8.1.  If you pass one argument into the extend method, then it refers to this, or
jQuery itself.</a></br>
</div><div class="vym-toc-branch-7"><a href="#mc:0,bo:7,bo:1,bo:2,bo:7,bo:7,bo:0,bo:0"> 8.2.3.8.8.1.1.  isArray</a></br>
</div><div class="vym-toc-branch-4"><a href="#mc:0,bo:7,bo:1,bo:2,bo:8"> 8.2.3.9.  SizzleJs</a></br>
</div><div class="vym-toc-branch-5"><a href="#mc:0,bo:7,bo:1,bo:2,bo:8,bo:0"> 8.2.3.9.1.  jQuery uses another engine to help it with selecting elements</a></br>
</div><div class="vym-toc-branch-5"><a href="#mc:0,bo:7,bo:1,bo:2,bo:8,bo:1"> 8.2.3.9.2.  IFFE's in IFFE's; to extend levels</a></br>
</div><div class="vym-toc-branch-4"><a href="#mc:0,bo:7,bo:1,bo:2,bo:9"> 8.2.3.10.  the init constructor, where it is called with new, then returns an array</a></br>
</div><div class="vym-toc-branch-5"><a href="#mc:0,bo:7,bo:1,bo:2,bo:9,bo:0"> 8.2.3.10.1.  makeArray</a></br>
</div><div class="vym-toc-branch-5"><a href="#mc:0,bo:7,bo:1,bo:2,bo:9,bo:1"> 8.2.3.10.2.  The this variable will be manipulated anyway, yet beefore doing so let's make it
into anarray</a></br>
</div><div class="vym-toc-branch-5"><a href="#mc:0,bo:7,bo:1,bo:2,bo:9,bo:2"> 8.2.3.10.3.  The strcutre teaches us that we can return something in  a function construct
only if it's the this vairable</a></br>
</div><div class="vym-toc-branch-4"><a href="#mc:0,bo:7,bo:1,bo:2,bo:10"> 8.2.3.11.  Look at Strcuture! Not code!</a></br>
</div><div class="vym-toc-branch-4"><a href="#mc:0,bo:7,bo:1,bo:2,bo:11"> 8.2.3.12.  init.prototype</a></br>
</div><div class="vym-toc-branch-5"><a href="#mc:0,bo:7,bo:1,bo:2,bo:11,bo:0"> 8.2.3.12.1.  var q = $(&quot;ul.people li&quot;)</a></br>
</div><div class="vym-toc-branch-6"><a href="#mc:0,bo:7,bo:1,bo:2,bo:11,bo:0,bo:0"> 8.2.3.12.1.1.  This calls the function constructor</a></br>
</div><div class="vym-toc-branch-5"><a href="#mc:0,bo:7,bo:1,bo:2,bo:11,bo:1"> 8.2.3.12.2.  The function constructor all new jQuery.fn.init</a></br>
</div><div class="vym-toc-branch-5"><a href="#mc:0,bo:7,bo:1,bo:2,bo:11,bo:2"> 8.2.3.12.3.  Has the same prototype in jQuery.prototype</a></br>
</div><div class="vym-toc-branch-5"><a href="#mc:0,bo:7,bo:1,bo:2,bo:11,bo:3"> 8.2.3.12.4.  $() calls the a funcition, which calls a funcition constructor, that returns an
object that has all of the same methods and properties as ther jQuery prototype</a></br>
</div><div class="vym-toc-branch-5"><a href="#mc:0,bo:7,bo:1,bo:2,bo:11,bo:4"> 8.2.3.12.5.  This processes prevents the need for the new keyword outside of the library</a></br>
</div><div class="vym-toc-branch-4"><a href="#mc:0,bo:7,bo:1,bo:2,bo:12"> 8.2.3.13.  What do we want to lear nfrom</a></br>
</div><div class="vym-toc-branch-3"><a href="#mc:0,bo:7,bo:1,bo:3"> 8.2.4.  jQuery's higher version may not support older browsers (let them DIE!!!)</a></br>
</div><div class="vym-toc-branch-3"><a href="#mc:0,bo:7,bo:1,bo:4"> 8.2.5.  Challenege: Look around</a></br>
</div><div class="vym-toc-branch-4"><a href="#mc:0,bo:7,bo:1,bo:4,bo:0"> 8.2.5.1.  Can you find the IFFE</a></br>
</div><div class="vym-toc-branch-4"><a href="#mc:0,bo:7,bo:1,bo:4,bo:1"> 8.2.5.2.  Object literal</a></br>
</div><div class="vym-toc-branch-4"><a href="#mc:0,bo:7,bo:1,bo:4,bo:2"> 8.2.5.3.  How is it exposed to the global object?</a></br>
</div><div class="vym-toc-branch-4"><a href="#mc:0,bo:7,bo:1,bo:4,bo:3"> 8.2.5.4.  what does jquery.fn.init?</a></br>
</div><div class="vym-toc-branch-4"><a href="#mc:0,bo:7,bo:1,bo:4,bo:4"> 8.2.5.5.  Look for yourself</a></br>
</div><div class="vym-toc-branch-3"><a href="#mc:0,bo:7,bo:1,bo:5"> 8.2.6.  Is there anything in this code that is impossible for us to understand? If so
why?</a></br>
</div><div class="vym-toc-branch-4"><a href="#mc:0,bo:7,bo:1,bo:5,bo:0"> 8.2.6.1.  the conepts themeslves we can understand, then grasp the clever ideas the
frameworks they use</a></br>
</div><div class="vym-toc-branch-3"><a href="#mc:0,bo:7,bo:1,bo:6"> 8.2.7.  Method Chaining</a></br>
</div><div class="vym-toc-branch-4"><a href="#mc:0,bo:7,bo:1,bo:6,bo:0"> 8.2.7.1.  var q = $(ul.people).addClass(&quot;new&quot;).removeClass(&quot;people&quot;)</a></br>
</div><div class="vym-toc-branch-4"><a href="#mc:0,bo:7,bo:1,bo:6,bo:1"> 8.2.7.2.  How is it able to work on the same $(ul.people) object?</a></br>
</div><div class="vym-toc-branch-4"><a href="#mc:0,bo:7,bo:1,bo:6,bo:2"> 8.2.7.3.  BWA: Calling mutiple methods on one object at the same time</a></br>
</div><div class="vym-toc-branch-4"><a href="#mc:0,bo:7,bo:1,bo:6,bo:3"> 8.2.7.4.  How is it that it chains?</a></br>
</div><div class="vym-toc-branch-4"><a href="#mc:0,bo:7,bo:1,bo:6,bo:4"> 8.2.7.5.  The addClass function does work THEN returns the THIS keyword :D</a></br>
</div><div class="vym-toc-branch-4"><a href="#mc:0,bo:7,bo:1,bo:6,bo:5"> 8.2.7.6.  Finish the method with returning this</a></br>
</div><div class="vym-toc-branch-4"><a href="#mc:0,bo:7,bo:1,bo:6,bo:6"> 8.2.7.7.  Then we have method chaining</a></br>
</div><div class="vym-toc-branch-3"><a href="#mc:0,bo:7,bo:1,bo:7"> 8.2.8.  How is it exposed to the global object?</a></br>
</div><div class="vym-toc-branch-1"><a href="#mc:0,bo:8"> 9.  Building your own Framework/Library</a></br>
</div><div class="vym-toc-branch-2"><a href="#mc:0,bo:8,bo:0"> 9.1.  Interested on strcutre rather than what it does</a></br>
</div><div class="vym-toc-branch-2"><a href="#mc:0,bo:8,bo:1"> 9.2.  Grettr</a></br>
</div><div class="vym-toc-branch-3"><a href="#mc:0,bo:8,bo:1,bo:0"> 9.2.1.  Requirements</a></br>
</div><div class="vym-toc-branch-4"><a href="#mc:0,bo:8,bo:1,bo:0,bo:0"> 9.2.1.1.  When given a name, give me formal and informal grettings that I can use
througout my app</a></br>
</div><div class="vym-toc-branch-4"><a href="#mc:0,bo:8,bo:1,bo:0,bo:1"> 9.2.1.2.  Support English and Spanish</a></br>
</div><div class="vym-toc-branch-4"><a href="#mc:0,bo:8,bo:1,bo:0,bo:2"> 9.2.1.3.  Reusable, doesn't interfere with others code</a></br>
</div><div class="vym-toc-branch-4"><a href="#mc:0,bo:8,bo:1,bo:0,bo:3"> 9.2.1.4.  Easy to type strcture</a></br>
</div><div class="vym-toc-branch-5"><a href="#mc:0,bo:8,bo:1,bo:0,bo:3,bo:0"> 9.2.1.4.1.  G$</a></br>
</div><div class="vym-toc-branch-4"><a href="#mc:0,bo:8,bo:1,bo:0,bo:4"> 9.2.1.5.  Supports jQuery</a></br>
</div><div class="vym-toc-branch-5"><a href="#mc:0,bo:8,bo:1,bo:0,bo:4,bo:0"> 9.2.1.5.1.  Works with jQuery objects</a></br>
</div><div class="vym-toc-branch-5"><a href="#mc:0,bo:8,bo:1,bo:0,bo:4,bo:1"> 9.2.1.5.2.  Passes an elements</a></br>
</div><div class="vym-toc-branch-2"><a href="#mc:0,bo:8,bo:2"> 9.3.  Structuring Safe Code</a></br>
</div><div class="vym-toc-branch-3"><a href="#mc:0,bo:8,bo:2,bo:0"> 9.3.1.  Use an IFFE to prevent variable colition</a></br>
</div><div class="vym-toc-branch-3"><a href="#mc:0,bo:8,bo:2,bo:1"> 9.3.2.  Example</a></br>
</div><div class="vym-toc-branch-2"><a href="#mc:0,bo:8,bo:3"> 9.4.  Our object and it's prototype</a></br>
</div><div class="vym-toc-branch-3"><a href="#mc:0,bo:8,bo:3,bo:0"> 9.4.1.  We want to have jQuery support</a></br>
</div><div class="vym-toc-branch-3"><a href="#mc:0,bo:8,bo:3,bo:1"> 9.4.2.  Imitate the jQuery object</a></br>
</div><div class="vym-toc-branch-3"><a href="#mc:0,bo:8,bo:3,bo:2"> 9.4.3.  We want a function that returns an object without using the word new</a></br>
</div><div class="vym-toc-branch-3"><a href="#mc:0,bo:8,bo:3,bo:3"> 9.4.4.  expose it to the global object (window) by saying window.ALIAS = OurThingy</a></br>
</div><div class="vym-toc-branch-2"><a href="#mc:0,bo:8,bo:4"> 9.5.  Properties and Chainable Methods</a></br>
</div><div class="vym-toc-branch-3"><a href="#mc:0,bo:8,bo:4,bo:0"> 9.5.1.  How can we have features in our framework that isn't displayed to the world?</a></br>
</div><div class="vym-toc-branch-4"><a href="#mc:0,bo:8,bo:4,bo:0,bo:0"> 9.5.1.1.  var supportedLanguages = [&quot;en&quot;, &quot;es&quot;] // doesn't get exposed</a></br>
</div><div class="vym-toc-branch-3"><a href="#mc:0,bo:8,bo:4,bo:1"> 9.5.2.  Put methods on the Grettr.prototype to save memory space.</a></br>
</div><div class="vym-toc-branch-4"><a href="#mc:0,bo:8,bo:4,bo:1,bo:0"> 9.5.2.1.  Each of the object created will point to the same location in memory</a></br>
</div><div class="vym-toc-branch-2"><a href="#mc:0,bo:8,bo:5"> 9.6.  Adding jQuery support</a></br>
</div><div class="vym-toc-branch-3"><a href="#mc:0,bo:8,bo:5,bo:0"> 9.6.1.  How can we add a method that accepts a jQuery selector</a></br>
</div><div class="vym-toc-branch-3"><a href="#mc:0,bo:8,bo:5,bo:1"> 9.6.2.  pass the selectory paramater and use jQuery since our framework imports it</a></br>
</div><div class="vym-toc-branch-4"><a href="#mc:0,bo:8,bo:5,bo:1,bo:0"> 9.6.2.1.  </a></br>
</div><div class="vym-toc-branch-3"><a href="#mc:0,bo:8,bo:5,bo:2"> 9.6.3.  Example</a></br>
</div><div class="vym-toc-branch-2"><a href="#mc:0,bo:8,bo:6"> 9.7.  Good Commenting</a></br>
</div><div class="vym-toc-branch-3"><a href="#mc:0,bo:8,bo:6,bo:0"> 9.7.1.  JavaScript is a very TERSE language.</a></br>
</div><div class="vym-toc-branch-3"><a href="#mc:0,bo:8,bo:6,bo:1"> 9.7.2.  Good comments are very veyr important in JavaScript</a></br>
</div><div class="vym-toc-branch-3"><a href="#mc:0,bo:8,bo:6,bo:2"> 9.7.3.  It will help what your intent is for your future self and future programmers</a></br>
</div><div class="vym-toc-branch-3"><a href="#mc:0,bo:8,bo:6,bo:3"> 9.7.4.  You may have to figure out on what you did</a></br>
</div><div class="vym-toc-branch-3"><a href="#mc:0,bo:8,bo:6,bo:4"> 9.7.5.  Helps you make sure AT THE TIME that you are't doing something by accident.</a></br>
</div><div class="vym-toc-branch-3"><a href="#mc:0,bo:8,bo:6,bo:5"> 9.7.6.  Proof read and comment at the same time!</a></br>
</div><div class="vym-toc-branch-1"><a href="#mc:0,bo:9"> 10.  Extras</a></br>
</div><div class="vym-toc-branch-2"><a href="#mc:0,bo:9,bo:0"> 10.1.  Transpile</a></br>
</div><div class="vym-toc-branch-3"><a href="#mc:0,bo:9,bo:0,bo:0"> 10.1.1.  take one language and change the syntaxs into another lanuage</a></br>
</div><div class="vym-toc-branch-3"><a href="#mc:0,bo:9,bo:0,bo:1"> 10.1.2.  Typescript</a></br>
</div><div class="vym-toc-branch-3"><a href="#mc:0,bo:9,bo:0,bo:2"> 10.1.3.  Adds additional features to JavaScript, yet JavaScript is additional informatin</a></br>
</div><div class="vym-toc-branch-3"><a href="#mc:0,bo:9,bo:0,bo:3"> 10.1.4.  Traceur</a></br>
</div><div class="vym-toc-branch-2"><a href="#mc:0,bo:9,bo:1"> 10.2.  ES6</a></br>
</div></td></tr>
</table>


<h1><span class='vym-branch-0' style='color:#000000' id='mc:0'>JavaScript the Weird Parts</span></h1>
  
  <h2><span class='vym-branch-1' style='color:#000000' id='mc:0,bo:0'>Introduction</span></h2>
    <ul class="vym-list-ul-2">
      <li><span class='vym-branch-2' style='color:#000000' id='mc:0,bo:0,bo:0'>Understand, don't imediate</span>
      <ul class="vym-list-ul-3">
        <li><span class='vym-branch-3' style='color:#000000' id='mc:0,bo:0,bo:0,bo:0'>Type it out</span>  </li>
      </ul>  </li>
      <li><span class='vym-branch-2' style='color:#000000' id='mc:0,bo:0,bo:1'>Frameworks</span>
      <ul class="vym-list-ul-3">
        <li><span class='vym-branch-3' style='color:#000000' id='mc:0,bo:0,bo:1,bo:0'>People who make the frameworks understand the weird parts</span>  </li>
        <li><span class='vym-branch-3' style='color:#000000' id='mc:0,bo:0,bo:1,bo:1'>Angular</span>  </li>
        <li><span class='vym-branch-3' style='color:#000000' id='mc:0,bo:0,bo:1,bo:2'>jQuery</span>  </li>
      </ul>  </li>
      <li><span class='vym-branch-2' style='color:#000000' id='mc:0,bo:0,bo:2'>Weird Parts</span>
      <ul class="vym-list-ul-3">
        <li><span class='vym-branch-3' style='color:#000000' id='mc:0,bo:0,bo:2,bo:0'>Understanding the how JavaScript works will give you the bases of how to create
the frameworks</span>  </li>
      </ul>  </li>
    </ul>
  <h2><span class='vym-branch-1' style='color:#000000' id='mc:0,bo:1'>Execution Context and Lexical Enviroment</span></h2>
    <ul class="vym-list-ul-2">
      <li><span class='vym-branch-2' style='color:#000000' id='mc:0,bo:1,bo:0'>Definitions</span>
      <ul class="vym-list-ul-3">
        <li><span class='vym-branch-3' style='color:#000000' id='mc:0,bo:1,bo:0,bo:0'>Name - Value Pair</span>
        <ul class="vym-list-ul-4">
          <li><span class='vym-branch-4' style='color:#000000' id='mc:0,bo:1,bo:0,bo:0,bo:0'>address = &quot;100 Miller Ct&quot;</span>  </li>
          <li><span class='vym-branch-4' style='color:#000000' id='mc:0,bo:1,bo:0,bo:0,bo:1'>Object in JavaScript</span>
          <ul class="vym-list-ul-5">
            <li><span class='vym-branch-5' style='color:#000000' id='mc:0,bo:1,bo:0,bo:0,bo:1,bo:0'>Collection of name / value pairs</span>  </li>
            <li><span class='vym-branch-5' style='color:#000000' id='mc:0,bo:1,bo:0,bo:0,bo:1,bo:1'>Name Values within name values within name values</span>  </li>
          </ul>  </li>
          <li><span class='vym-branch-4' style='color:#000000' id='mc:0,bo:1,bo:0,bo:0,bo:2'>A name that maps to a unique value</span>  </li>
          <li><span class='vym-branch-4' style='color:#000000' id='mc:0,bo:1,bo:0,bo:0,bo:3'>Only one value per context</span>  </li>
        </ul>  </li>
        <li><span class='vym-branch-3' style='color:#000000' id='mc:0,bo:1,bo:0,bo:1'>Execution Context</span>
        <ul class="vym-list-ul-4">
          <li><span class='vym-branch-4' style='color:#000000' id='mc:0,bo:1,bo:0,bo:1,bo:0'>A wrapper that helps manage code that's running</span>  </li>
          <li><span class='vym-branch-4' style='color:#000000' id='mc:0,bo:1,bo:0,bo:1,bo:1'>which lexical enviroment depends on execution context</span>  </li>
          <li><span class='vym-branch-4' style='color:#000000' id='mc:0,bo:1,bo:0,bo:1,bo:2'>contains things beyond your code</span>  </li>
        </ul>  </li>
        <li><span class='vym-branch-3' style='color:#000000' id='mc:0,bo:1,bo:0,bo:2'>Lexical Enviroment</span>
        <ul class="vym-list-ul-4">
          <li><span class='vym-branch-4' style='color:#000000' id='mc:0,bo:1,bo:0,bo:2,bo:0'>Lexical means having to do with language or grammar</span>  </li>
          <li><span class='vym-branch-4' style='color:#000000' id='mc:0,bo:1,bo:0,bo:2,bo:1'>Where written code physically positioned</span>  </li>
          <li><span class='vym-branch-4' style='color:#000000' id='mc:0,bo:1,bo:0,bo:2,bo:2'>Syntax parser cares on where things are placed</span>  </li>
        </ul>  </li>
        <li><span class='vym-branch-3' style='color:#000000' id='mc:0,bo:1,bo:0,bo:3'>Syntax Parser</span>
        <ul class="vym-list-ul-4">
          <li><span class='vym-branch-4' style='color:#000000' id='mc:0,bo:1,bo:0,bo:3,bo:0'>A program that reads code and determines what to do with and if the grammar is
valid</span>  </li>
          <li><span class='vym-branch-4' style='color:#000000' id='mc:0,bo:1,bo:0,bo:3,bo:1'>Translates it for a computer</span>  </li>
        </ul>  </li>
      </ul>  </li>
      <li><span class='vym-branch-2' style='color:#000000' id='mc:0,bo:1,bo:1'>Global Enviroment and Global Object</span>
      <ul class="vym-list-ul-3">
        <li><span class='vym-branch-3' style='color:#000000' id='mc:0,bo:1,bo:1,bo:0'>Global Execution Context engine create 2 things</span>
        <ul class="vym-list-ul-4">
          <li><span class='vym-branch-4' style='color:#000000' id='mc:0,bo:1,bo:1,bo:0,bo:0'>this</span>  </li>
          <li><span class='vym-branch-4' style='color:#000000' id='mc:0,bo:1,bo:1,bo:0,bo:1'>Global object</span>  </li>
        </ul>  </li>
        <li><span class='vym-branch-3' style='color:#000000' id='mc:0,bo:1,bo:1,bo:1'>Nothing in JavaScript</span>
        <ul class="vym-list-ul-4">
          <li><span class='vym-branch-4' style='color:#000000' id='mc:0,bo:1,bo:1,bo:1,bo:0'>this</span>  </li>
          <li><span class='vym-branch-4' style='color:#000000' id='mc:0,bo:1,bo:1,bo:1,bo:1'>window</span>  </li>
          <li><span class='vym-branch-4' style='color:#000000' id='mc:0,bo:1,bo:1,bo:1,bo:2'>Both of these are the global object (while on a Browser)</span>
          <ul class="vym-list-ul-5">
            <li><span class='vym-branch-5' style='color:#000000' id='mc:0,bo:1,bo:1,bo:1,bo:2,bo:0'>At the global level, this = window</span>  </li>
          </ul>  </li>
          <li><span class='vym-branch-4' style='color:#000000' id='mc:0,bo:1,bo:1,bo:1,bo:3'>JS still  creates variables</span>  </li>
          <li><span class='vym-branch-4' style='color:#000000' id='mc:0,bo:1,bo:1,bo:1,bo:4'>YOU DIDN'T WRITE THIS STUFF</span>  </li>
        </ul>  </li>
        <li><span class='vym-branch-3' style='color:#000000' id='mc:0,bo:1,bo:1,bo:2'>Global: Not inside a function</span>
        <ul class="vym-list-ul-4">
          <li><span class='vym-branch-4' style='color:#000000' id='mc:0,bo:1,bo:1,bo:2,bo:0'>When not in a function, the variables sit in the lexical enviroment.</span>  </li>
          <li><span class='vym-branch-4' style='color:#000000' id='mc:0,bo:1,bo:1,bo:2,bo:1'>a = window.a</span>  </li>
        </ul>  </li>
        <li><span class='vym-branch-3' style='color:#000000' id='mc:0,bo:1,bo:1,bo:3'>Review</span>
        <ul class="vym-list-ul-4">
          <li><span class='vym-branch-4' style='color:#000000' id='mc:0,bo:1,bo:1,bo:3,bo:0'>Execution Contxt</span>
          <ul class="vym-list-ul-5">
            <li><span class='vym-branch-5' style='color:#000000' id='mc:0,bo:1,bo:1,bo:3,bo:0,bo:0'>Global Object</span>  </li>
            <li><span class='vym-branch-5' style='color:#000000' id='mc:0,bo:1,bo:1,bo:3,bo:0,bo:1'>this</span>  </li>
            <li><span class='vym-branch-5' style='color:#000000' id='mc:0,bo:1,bo:1,bo:3,bo:0,bo:2'>window</span>  </li>
            <li><span class='vym-branch-5' style='color:#000000' id='mc:0,bo:1,bo:1,bo:3,bo:0,bo:3'>Your code</span>  </li>
          </ul>  </li>
        </ul>  </li>
      </ul>  </li>
      <li><span class='vym-branch-2' style='color:#000000' id='mc:0,bo:1,bo:2'>Execution Contenxt: Creation and Hoisting</span>
      <ul class="vym-list-ul-3">
        <li><span class='vym-branch-3' style='color:#000000' id='mc:0,bo:1,bo:2,bo:0'>Hoisting</span>  </li>
        <li><span class='vym-branch-3' style='color:#000000' id='mc:0,bo:1,bo:2,bo:1'>WHAT EXECUTES ISN'T WHAT YOU'VE WRITTEN</span>
        <ul class="vym-list-ul-4">
          <li><span class='vym-branch-4' style='color:#000000' id='mc:0,bo:1,bo:2,bo:1,bo:0'>JavaScript Engine makes descisions</span>  </li>
        </ul>  </li>
        <li><span class='vym-branch-3' style='color:#000000' id='mc:0,bo:1,bo:2,bo:2'>(1) Creation Phase</span>
        <ul class="vym-list-ul-4">
          <li><span class='vym-branch-4' style='color:#000000' id='mc:0,bo:1,bo:2,bo:2,bo:0'>Global Object</span>  </li>
          <li><span class='vym-branch-4' style='color:#000000' id='mc:0,bo:1,bo:2,bo:2,bo:1'>this</span>  </li>
          <li><span class='vym-branch-4' style='color:#000000' id='mc:0,bo:1,bo:2,bo:2,bo:2'>out enviroment</span>  </li>
          <li><span class='vym-branch-4' style='color:#000000' id='mc:0,bo:1,bo:2,bo:2,bo:3'>Syntax parser recognizes where you've created variables and functions</span>
          <ul class="vym-list-ul-5">
            <li><span class='vym-branch-5' style='color:#000000' id='mc:0,bo:1,bo:2,bo:2,bo:3,bo:0'>Set ups memory space for functions and vvariables: &quot;Hoisting&quot;</span>  </li>
          </ul>  </li>
        </ul>  </li>
        <li><span class='vym-branch-3' style='color:#000000' id='mc:0,bo:1,bo:2,bo:3'>Example Code</span>
<table class="vym-note"><tr><td class="vym-note-flag">
<td>
b();<br/>console.log(a);<br/><br/>var a = "a";<br/><br/>function b() {<br/>  console.log("Called b");<br/>}<br/><br/>Here the function b call is logged, yet a gets logs "undefinied".
</td></tr></table>

        <ul class="vym-list-ul-4">
          <li><span class='vym-branch-4' style='color:#000000' id='mc:0,bo:1,bo:2,bo:3,bo:0'>Function in hosted in entirered</span>  </li>
          <li><span class='vym-branch-4' style='color:#000000' id='mc:0,bo:1,bo:2,bo:3,bo:1'>variables doesn't until execution phase</span>  </li>
          <li><span class='vym-branch-4' style='color:#000000' id='mc:0,bo:1,bo:2,bo:3,bo:2'>undefined is a placeholder</span>  </li>
          <li><span class='vym-branch-4' style='color:#000000' id='mc:0,bo:1,bo:2,bo:3,bo:3'>Never rely on hoisting</span>  </li>
        </ul>  </li>
        <li><span class='vym-branch-3' style='color:#000000' id='mc:0,bo:1,bo:2,bo:4'>Declare functions at the top of your code</span>  </li>
      </ul>  </li>
      <li><span class='vym-branch-2' style='color:#000000' id='mc:0,bo:1,bo:3'>Exeution Content: Execution</span>
      <ul class="vym-list-ul-3">
        <li><span class='vym-branch-3' style='color:#000000' id='mc:0,bo:1,bo:3,bo:0'>Runs your code line by line</span>  </li>
        <li><span class='vym-branch-3' style='color:#000000' id='mc:0,bo:1,bo:3,bo:1'>After hoisting, things are execution</span>  </li>
      </ul>  </li>
      <li><span class='vym-branch-2' style='color:#000000' id='mc:0,bo:1,bo:4'>Conceptual Aside: JavaScript and Undeifined</span>
      <ul class="vym-list-ul-3">
        <li><span class='vym-branch-3' style='color:#000000' id='mc:0,bo:1,bo:4,bo:0'>not defined IS NOT undefined</span>  </li>
        <li><span class='vym-branch-3' style='color:#000000' id='mc:0,bo:1,bo:4,bo:1'>Example Code</span>
<table class="vym-note"><tr><td class="vym-note-flag">
<td>
<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.0//EN" "http://www.w3.org/TR/REC-html40/strict.dtd">

<p class="vym-note-paragraph"><span style=" color:#29003e;">var a; // var a = &quot;hello&quot;; or nothing -&gt; What's the out put?</span></p>
<p class="vym-note-paragraph"><span style=" color:#29003e;">console.log(a);</span></p>
<p class="vym-note-paragraph"><br /></p>
<p class="vym-note-paragraph"><span style=" color:#29003e;">if (a === undefined) {</span></p>
<p class="vym-note-paragraph"><span style=" color:#29003e;">   console.log(&quot;a is undefined&quot;);</span></p>
<p class="vym-note-paragraph"><span style=" color:#29003e;">}</span></p>
<p class="vym-note-paragraph"><span style=" color:#29003e;">else {</span></p>
<p class="vym-note-paragraph"><span style=" color:#29003e;">  console.log(&quot;a is defined&quot;);</span></p>
<p class="vym-note-paragraph"><span style=" color:#29003e;">}</span></p>
<p class="vym-note-paragraph"><br /></p>
<p class="vym-note-paragraph"><span style=" color:#29003e;">// Output</span></p>
<p class="vym-note-paragraph"><span style=" color:#29003e;">// undefined</span></p>
<p class="vym-note-paragraph"><span style=" color:#29003e;">// a is undefined</span></p>
<p class="vym-note-paragraph"><br /></p>
</td></tr></table>

        <ul class="vym-list-ul-4">
          <li><span class='vym-branch-4' style='color:#000000' id='mc:0,bo:1,bo:4,bo:1,bo:0'>When a variable isn't declared than the browser will say &quot;it's not in memory my
dude&quot;</span>  </li>
          <li><span class='vym-branch-4' style='color:#000000' id='mc:0,bo:1,bo:4,bo:1,bo:1'>undefined takes up memory space</span>  </li>
        </ul>  </li>
        <li><span class='vym-branch-3' style='color:#000000' id='mc:0,bo:1,bo:4,bo:2'>undefineid means it's  a value that JavaScript is creating</span>  </li>
        <li><span class='vym-branch-3' style='color:#000000' id='mc:0,bo:1,bo:4,bo:3'>NEVER: a = undefined;</span>
        <ul class="vym-list-ul-4">
          <li><span class='vym-branch-4' style='color:#000000' id='mc:0,bo:1,bo:4,bo:3,bo:0'>Valid, yet dangerous</span>  </li>
          <li><span class='vym-branch-4' style='color:#000000' id='mc:0,bo:1,bo:4,bo:3,bo:1'>Let JavaScript always set undefined</span>  </li>
        </ul>  </li>
      </ul>  </li>
      <li><span class='vym-branch-2' style='color:#000000' id='mc:0,bo:1,bo:5'>Conceptual Aside: Single Threaded, Synchronous Execution</span>
      <ul class="vym-list-ul-3">
        <li><span class='vym-branch-3' style='color:#000000' id='mc:0,bo:1,bo:5,bo:0'>Single Threaded: Only one command at a time</span>
        <ul class="vym-list-ul-4">
          <li><span class='vym-branch-4' style='color:#000000' id='mc:0,bo:1,bo:5,bo:0,bo:0'>The browerser also runs</span>  </li>
          <li><span class='vym-branch-4' style='color:#000000' id='mc:0,bo:1,bo:5,bo:0,bo:1'>JavaScript behaves as a single threaded message</span>  </li>
        </ul>  </li>
        <li><span class='vym-branch-3' style='color:#000000' id='mc:0,bo:1,bo:5,bo:1'>Synchronous (in programming)</span>
        <ul class="vym-list-ul-4">
          <li><span class='vym-branch-4' style='color:#000000' id='mc:0,bo:1,bo:5,bo:1,bo:0'>One at a time</span>  </li>
          <li><span class='vym-branch-4' style='color:#000000' id='mc:0,bo:1,bo:5,bo:1,bo:1'>One line of code at a time in order that it appears</span>  </li>
        </ul>  </li>
      </ul>  </li>
      <li><span class='vym-branch-2' style='color:#000000' id='mc:0,bo:1,bo:6'>Function Invocation and Execution Stack</span>
      <ul class="vym-list-ul-3">
        <li><span class='vym-branch-3' style='color:#000000' id='mc:0,bo:1,bo:6,bo:0'>Innvocatoin: Calling a function or ()</span>  </li>
        <li><span class='vym-branch-3' style='color:#000000' id='mc:0,bo:1,bo:6,bo:1'>Example Code</span>
<table class="vym-note"><tr><td class="vym-note-flag">
<td>
function a() {<br/>  b();<br/>  var c;<br/>}<br/><br/>function b() {<br/>  var d;<br/>}<br/><br/>a();<br/>var d; // this isn't complete until a() is done with execution = synchrous
</td></tr></table>
  </li>
        <li><span class='vym-branch-3' style='color:#000000' id='mc:0,bo:1,bo:6,bo:2'><a href="file:///home/juxley/Pictures/executionstack.png"><img src="flags/flag-url-16x16.png">Execution Stack</a></span>
        <ul class="vym-list-ul-4">
          <li><span class='vym-branch-4' style='color:#000000' id='mc:0,bo:1,bo:6,bo:2,bo:0'>2) function a Execution Context</span>
          <ul class="vym-list-ul-5">
            <li><span class='vym-branch-5' style='color:#000000' id='mc:0,bo:1,bo:6,bo:2,bo:0,bo:0'>create</span>  </li>
            <li><span class='vym-branch-5' style='color:#000000' id='mc:0,bo:1,bo:6,bo:2,bo:0,bo:1'>exeuction</span>  </li>
          </ul>  </li>
          <li><span class='vym-branch-4' style='color:#000000' id='mc:0,bo:1,bo:6,bo:2,bo:1'>1) Global Execution Context</span>
          <ul class="vym-list-ul-5">
            <li><span class='vym-branch-5' style='color:#000000' id='mc:0,bo:1,bo:6,bo:2,bo:1,bo:0'>creates:</span>
            <ul class="vym-list-ul-6">
              <li><span class='vym-branch-6' style='color:#000000' id='mc:0,bo:1,bo:6,bo:2,bo:1,bo:0,bo:0'>Global object, this, window</span>  </li>
              <li><span class='vym-branch-6' style='color:#000000' id='mc:0,bo:1,bo:6,bo:2,bo:1,bo:0,bo:1'>hoisting functions and setting variables to undefined</span>  </li>
            </ul>  </li>
            <li><span class='vym-branch-5' style='color:#000000' id='mc:0,bo:1,bo:6,bo:2,bo:1,bo:1'>Executes</span>  </li>
          </ul>  </li>
          <li><span class='vym-branch-4' style='color:#000000' id='mc:0,bo:1,bo:6,bo:2,bo:2'>3) When a Execution Context / Function is finshed executing, it's pop off the
stack</span>  </li>
        </ul>  </li>
        <li><span class='vym-branch-3' style='color:#000000' id='mc:0,bo:1,bo:6,bo:3'>Even if a function invokes itself, a execution context is created</span>
        <ul class="vym-list-ul-4">
          <li><span class='vym-branch-4' style='color:#000000' id='mc:0,bo:1,bo:6,bo:3,bo:0'>Creation of this / global object  is creating within that funciton</span>  </li>
        </ul>  </li>
      </ul>  </li>
      <li><span class='vym-branch-2' style='color:#000000' id='mc:0,bo:1,bo:7'>Functions, Context, Variable Enviroments</span>
      <ul class="vym-list-ul-3">
        <li><span class='vym-branch-3' style='color:#000000' id='mc:0,bo:1,bo:7,bo:0'>Variable Enviorment</span>
        <ul class="vym-list-ul-4">
          <li><span class='vym-branch-4' style='color:#000000' id='mc:0,bo:1,bo:7,bo:0,bo:0'>Where the varibales lives in the memory</span>  </li>
          <li><span class='vym-branch-4' style='color:#000000' id='mc:0,bo:1,bo:7,bo:0,bo:1'>Where is the variable?</span>  </li>
          <li><span class='vym-branch-4' style='color:#000000' id='mc:0,bo:1,bo:7,bo:0,bo:2'>Each execution context has a variable enviroment (it's own memory space)</span>  </li>
          <li><span class='vym-branch-4' style='color:#000000' id='mc:0,bo:1,bo:7,bo:0,bo:3'>Code Example</span>
<table class="vym-note"><tr><td class="vym-note-flag">
<td>
function b() {<br/>        var myVar;<br/>    console.log(myVar); //<br/>}<br/><br/>function a() {<br/>        var myVar = 2;<br/>    console.log(myVar);<br/>        b();<br/>}<br/><br/>var myVar = 1;<br/>console.log(myVar); //<br/>a();<br/>console.log(myVar);<br/><br/>Output//<br/>1<br/>2<br/>undefined<br/>1
</td></tr></table>

          <ul class="vym-list-ul-5">
            <li><span class='vym-branch-5' style='color:#000000' id='mc:0,bo:1,bo:7,bo:0,bo:3,bo:0'>Each varibales are in there own scope</span>  </li>
          </ul>  </li>
        </ul>  </li>
      </ul>  </li>
      <li><span class='vym-branch-2' style='color:#000000' id='mc:0,bo:1,bo:8'>The Scope Chain</span>
      <ul class="vym-list-ul-3">
        <li><span class='vym-branch-3' style='color:#000000' id='mc:0,bo:1,bo:8,bo:0'>Example Code 1</span>
<table class="vym-note"><tr><td class="vym-note-flag">
<td>
function b() {<br/>console.log(myVar);<br/>}<br/><br/>function a() {<br/>var myVar = 2;<br/>b();<br/>}<br/><br/>var myVar = 1;<br/>a();<br/><br/>//output<br/>//1
</td></tr></table>
  </li>
        <li><span class='vym-branch-3' style='color:#000000' id='mc:0,bo:1,bo:8,bo:1'><a href="file:///home/juxley/Pictures/scopechain1.png"><img src="flags/flag-url-16x16.png">JavaScript does more than look in the variable enviroment of the current
execution context</a></span>
        <ul class="vym-list-ul-4">
          <li><span class='vym-branch-4' style='color:#000000' id='mc:0,bo:1,bo:8,bo:1,bo:0'>variable this</span>  </li>
          <li><span class='vym-branch-4' style='color:#000000' id='mc:0,bo:1,bo:8,bo:1,bo:1'>Each execution has a reference  to the outer enviroment</span>  </li>
          <li><span class='vym-branch-4' style='color:#000000' id='mc:0,bo:1,bo:8,bo:1,bo:2'>Outer enviroment ~ Lexical Enviroment</span>
          <ul class="vym-list-ul-5">
            <li><span class='vym-branch-5' style='color:#000000' id='mc:0,bo:1,bo:8,bo:1,bo:2,bo:0'>Lexical Enviroment</span>
            <ul class="vym-list-ul-6">
              <li><span class='vym-branch-6' style='color:#000000' id='mc:0,bo:1,bo:8,bo:1,bo:2,bo:0,bo:0'>The physical location of where code is written</span>  </li>
            </ul>  </li>
          </ul>  </li>
        </ul>  </li>
        <li><span class='vym-branch-3' style='color:#000000' id='mc:0,bo:1,bo:8,bo:2'>Execution stack is create by invocation, not locatoin</span>  </li>
        <li><span class='vym-branch-3' style='color:#000000' id='mc:0,bo:1,bo:8,bo:3'>Finding the variable reference, it goes down the Scope Chain to find</span>  </li>
        <li><span class='vym-branch-3' style='color:#000000' id='mc:0,bo:1,bo:8,bo:4'>&quot;Who created me?&quot;</span>
        <ul class="vym-list-ul-4">
          <li><span class='vym-branch-4' style='color:#000000' id='mc:0,bo:1,bo:8,bo:4,bo:0'>Example Code 2</span>
<table class="vym-note"><tr><td class="vym-note-flag">
<td>
function a() {<br/><br/>	function b() {<br/>		console.log(myVar);<br/>	}<br/><br/>var myVar = 2;<br/>b();<br/>}<br/><br/>var myVar = 1;<br/>a();<br/>//cannot call b() as it's in the global execution context<br/><br/>//output<br/>//1
</td></tr></table>
  </li>
        </ul>  </li>
        <li><span class='vym-branch-3' style='color:#000000' id='mc:0,bo:1,bo:8,bo:5'>Where a function sits lexically determines it's out reference</span>  </li>
      </ul>  </li>
      <li><span class='vym-branch-2' style='color:#000000' id='mc:0,bo:1,bo:9'>Scope, ES6, let</span>
      <ul class="vym-list-ul-3">
        <li><span class='vym-branch-3' style='color:#000000' id='mc:0,bo:1,bo:9,bo:0'>Scope: Where code is avaiable in code</span>
        <ul class="vym-list-ul-4">
          <li><span class='vym-branch-4' style='color:#000000' id='mc:0,bo:1,bo:9,bo:0,bo:0'>And if it's the same variable or a copy (another innovcation / object)</span>
          <ul class="vym-list-ul-5">
            <li><span class='vym-branch-5' style='color:#000000' id='mc:0,bo:1,bo:9,bo:0,bo:0,bo:0'></span>  </li>
          </ul>  </li>
        </ul>  </li>
        <li><span class='vym-branch-3' style='color:#000000' id='mc:0,bo:1,bo:9,bo:1'>ECMAScript 6 / 2015</span>
        <ul class="vym-list-ul-4">
          <li><span class='vym-branch-4' style='color:#000000' id='mc:0,bo:1,bo:9,bo:1,bo:0'>let: a new way to declare variables</span>
          <ul class="vym-list-ul-5">
            <li><span class='vym-branch-5' style='color:#000000' id='mc:0,bo:1,bo:9,bo:1,bo:0,bo:0'>Block scoping</span>  </li>
            <li><span class='vym-branch-5' style='color:#000000' id='mc:0,bo:1,bo:9,bo:1,bo:0,bo:1'>Only available within the block it's declared in</span>  </li>
            <li><span class='vym-branch-5' style='color:#000000' id='mc:0,bo:1,bo:9,bo:1,bo:0,bo:2'>Cannot use the let variable until the code is ran</span>  </li>
          </ul>  </li>
        </ul>  </li>
      </ul>  </li>
      <li><span class='vym-branch-2' style='color:#000000' id='mc:0,bo:1,bo:10'>Asynchronous Callbacks</span>
      <ul class="vym-list-ul-3">
        <li><span class='vym-branch-3' style='color:#000000' id='mc:0,bo:1,bo:10,bo:0'>More than one at a time</span>  </li>
        <li><span class='vym-branch-3' style='color:#000000' id='mc:0,bo:1,bo:10,bo:1'>Event Queue</span>
        <ul class="vym-list-ul-4">
          <li><span class='vym-branch-4' style='color:#000000' id='mc:0,bo:1,bo:10,bo:1,bo:0'>Queues is looked at when execution stack is empty</span>  </li>
          <li><span class='vym-branch-4' style='color:#000000' id='mc:0,bo:1,bo:10,bo:1,bo:1'>JavaScript looks at th queue perodically</span>
          <ul class="vym-list-ul-5">
            <li><span class='vym-branch-5' style='color:#000000' id='mc:0,bo:1,bo:10,bo:1,bo:1,bo:0'>Event Loop</span>  </li>
          </ul>  </li>
          <li><span class='vym-branch-4' style='color:#000000' id='mc:0,bo:1,bo:10,bo:1,bo:2'>click event</span>
          <ul class="vym-list-ul-5">
            <li><span class='vym-branch-5' style='color:#000000' id='mc:0,bo:1,bo:10,bo:1,bo:2,bo:0'>exeuction context for the function happens,</span>  </li>
            <li><span class='vym-branch-5' style='color:#000000' id='mc:0,bo:1,bo:10,bo:1,bo:2,bo:1'>The code is still line by line</span>  </li>
            <li><span class='vym-branch-5' style='color:#000000' id='mc:0,bo:1,bo:10,bo:1,bo:2,bo:2'>*The stack has to be empty*</span>  </li>
          </ul>  </li>
        </ul>  </li>
        <li><span class='vym-branch-3' style='color:#000000' id='mc:0,bo:1,bo:10,bo:2'>Exeuction Stack</span>  </li>
        <li><span class='vym-branch-3' style='color:#000000' id='mc:0,bo:1,bo:10,bo:3'>Code Example</span>
<table class="vym-note"><tr><td class="vym-note-flag">
<td>
function waitThreeSeconds() {<br/> var ms = 3000 + new Date().getTime();<br/> while(new Date() &lt; ms){}<br/> console.log('finshed function'); <br/>}<br/><br/>function clickHandler() {<br/> console.log('click event');<br/>}<br/><br/>document.addEventListener('',  clickHandler();<br/><br/>waitThreeSeconds();<br/>console.log('finshes execution');<br/><br/>//log<br/>finshed function<br/>finshes exeuction<br/>click event
</td></tr></table>

        <ul class="vym-list-ul-4">
          <li><span class='vym-branch-4' style='color:#000000' id='mc:0,bo:1,bo:10,bo:3,bo:0'>The click event is consoled lasted</span>  </li>
          <li><span class='vym-branch-4' style='color:#000000' id='mc:0,bo:1,bo:10,bo:3,bo:1'>How does JavaScript, a synchronoistic langauge, deal with asynchronistic events?</span>
          <ul class="vym-list-ul-5">
            <li><span class='vym-branch-5' style='color:#000000' id='mc:0,bo:1,bo:10,bo:3,bo:1,bo:0'>It will run it's code and place it into the event queue</span>  </li>
          </ul>  </li>
        </ul>  </li>
        <li><span class='vym-branch-3' style='color:#000000' id='mc:0,bo:1,bo:10,bo:4'>The asynchrnous part is outside of the JavaScript engine</span>
        <ul class="vym-list-ul-4">
          <li><span class='vym-branch-4' style='color:#000000' id='mc:0,bo:1,bo:10,bo:4,bo:0'>These async events will then be process in order that they happen</span>  </li>
        </ul>  </li>
      </ul>  </li>
    </ul>
  <h2><span class='vym-branch-1' style='color:#000000' id='mc:0,bo:2'>Types and Operators</span></h2>
    <ul class="vym-list-ul-2">
      <li><span class='vym-branch-2' style='color:#000000' id='mc:0,bo:2,bo:0'>Coneptual Aside: Types</span>
      <ul class="vym-list-ul-3">
        <li><span class='vym-branch-3' style='color:#000000' id='mc:0,bo:2,bo:0,bo:0'>Dynamic Typing</span>
        <ul class="vym-list-ul-4">
          <li><span class='vym-branch-4' style='color:#000000' id='mc:0,bo:2,bo:0,bo:0,bo:0'>You don't tell JavaScript engine what type, it'll figure it out while the code
is running</span>  </li>
        </ul>  </li>
        <li><span class='vym-branch-3' style='color:#000000' id='mc:0,bo:2,bo:0,bo:1'>Static Typing</span>
        <ul class="vym-list-ul-4">
          <li><span class='vym-branch-4' style='color:#000000' id='mc:0,bo:2,bo:0,bo:1,bo:0'>Java, C++, you need to have a certain type into it</span>  </li>
          <li><span class='vym-branch-4' style='color:#000000' id='mc:0,bo:2,bo:0,bo:1,bo:1'>You get an error otherwise</span>  </li>
        </ul>  </li>
      </ul>  </li>
      <li><span class='vym-branch-2' style='color:#000000' id='mc:0,bo:2,bo:1'>Primiative Type</span>
      <ul class="vym-list-ul-3">
        <li><span class='vym-branch-3' style='color:#000000' id='mc:0,bo:2,bo:1,bo:0'>A single value</span>  </li>
        <li><span class='vym-branch-3' style='color:#000000' id='mc:0,bo:2,bo:1,bo:1'>Not an object</span>  </li>
        <li><span class='vym-branch-3' style='color:#000000' id='mc:0,bo:2,bo:1,bo:2'>Six Types in JavaScript</span>
        <ul class="vym-list-ul-4">
          <li><span class='vym-branch-4' style='color:#000000' id='mc:0,bo:2,bo:1,bo:2,bo:0'>Undefined</span>
          <ul class="vym-list-ul-5">
            <li><span class='vym-branch-5' style='color:#000000' id='mc:0,bo:2,bo:1,bo:2,bo:0,bo:0'>Let JavaScript say when this doesn't exists</span>  </li>
          </ul>  </li>
          <li><span class='vym-branch-4' style='color:#000000' id='mc:0,bo:2,bo:1,bo:2,bo:1'>Null</span>
          <ul class="vym-list-ul-5">
            <li><span class='vym-branch-5' style='color:#000000' id='mc:0,bo:2,bo:1,bo:2,bo:1,bo:0'>Use this if you want sometihng to mean &quot;not in existence&quot;</span>  </li>
          </ul>  </li>
          <li><span class='vym-branch-4' style='color:#000000' id='mc:0,bo:2,bo:1,bo:2,bo:2'>Boolean</span>
          <ul class="vym-list-ul-5">
            <li><span class='vym-branch-5' style='color:#000000' id='mc:0,bo:2,bo:1,bo:2,bo:2,bo:0'>true</span>  </li>
            <li><span class='vym-branch-5' style='color:#000000' id='mc:0,bo:2,bo:1,bo:2,bo:2,bo:1'>false</span>  </li>
          </ul>  </li>
          <li><span class='vym-branch-4' style='color:#000000' id='mc:0,bo:2,bo:1,bo:2,bo:3'>Number</span>
          <ul class="vym-list-ul-5">
            <li><span class='vym-branch-5' style='color:#000000' id='mc:0,bo:2,bo:1,bo:2,bo:3,bo:0'>floating point number</span>  </li>
            <li><span class='vym-branch-5' style='color:#000000' id='mc:0,bo:2,bo:1,bo:2,bo:3,bo:1'>Always some decimal at the end of it</span>  </li>
          </ul>  </li>
          <li><span class='vym-branch-4' style='color:#000000' id='mc:0,bo:2,bo:1,bo:2,bo:4'>String</span>
          <ul class="vym-list-ul-5">
            <li><span class='vym-branch-5' style='color:#000000' id='mc:0,bo:2,bo:1,bo:2,bo:4,bo:0'>list of chatacters</span>  </li>
          </ul>  </li>
          <li><span class='vym-branch-4' style='color:#000000' id='mc:0,bo:2,bo:1,bo:2,bo:5'>Symbol</span>
          <ul class="vym-list-ul-5">
            <li><span class='vym-branch-5' style='color:#000000' id='mc:0,bo:2,bo:1,bo:2,bo:5,bo:0'>es6</span>  </li>
          </ul>  </li>
        </ul>  </li>
      </ul>  </li>
      <li><span class='vym-branch-2' style='color:#000000' id='mc:0,bo:2,bo:2'>Conceptual Asdie: Operators</span>
      <ul class="vym-list-ul-3">
        <li><span class='vym-branch-3' style='color:#000000' id='mc:0,bo:2,bo:2,bo:0'>A function that is syntaxtcally different</span>  </li>
        <li><span class='vym-branch-3' style='color:#000000' id='mc:0,bo:2,bo:2,bo:1'>Usually takes 2 inputs and results in 1 output</span>  </li>
        <li><span class='vym-branch-3' style='color:#000000' id='mc:0,bo:2,bo:2,bo:2'>notations</span>
        <ul class="vym-list-ul-4">
          <li><span class='vym-branch-4' style='color:#000000' id='mc:0,bo:2,bo:2,bo:2,bo:0'>+(3, 4) Prefix notation</span>  </li>
          <li><span class='vym-branch-4' style='color:#000000' id='mc:0,bo:2,bo:2,bo:2,bo:1'>3+4 infix</span>  </li>
          <li><span class='vym-branch-4' style='color:#000000' id='mc:0,bo:2,bo:2,bo:2,bo:2'>(3,4)+ post fix</span>  </li>
        </ul>  </li>
        <li><span class='vym-branch-3' style='color:#000000' id='mc:0,bo:2,bo:2,bo:3'>The operators are functions in infix notation</span>  </li>
        <li><span class='vym-branch-3' style='color:#000000' id='mc:0,bo:2,bo:2,bo:4'>Operators are functions that return values</span>  </li>
      </ul>  </li>
      <li><span class='vym-branch-2' style='color:#000000' id='mc:0,bo:2,bo:3'>Operator Precedence and Associativity</span>
      <ul class="vym-list-ul-3">
        <li><span class='vym-branch-3' style='color:#000000' id='mc:0,bo:2,bo:3,bo:0'>Operator Precedence</span>
        <ul class="vym-list-ul-4">
          <li><span class='vym-branch-4' style='color:#000000' id='mc:0,bo:2,bo:3,bo:0,bo:0'>Which operators gets called first</span>  </li>
          <li><span class='vym-branch-4' style='color:#000000' id='mc:0,bo:2,bo:3,bo:0,bo:1'>Higher precendene wins</span>  </li>
          <li><span class='vym-branch-4' style='color:#000000' id='mc:0,bo:2,bo:3,bo:0,bo:2'>JS engine picks the highest precendence</span>  </li>
        </ul>  </li>
        <li><span class='vym-branch-3' style='color:#000000' id='mc:0,bo:2,bo:3,bo:1'>Operator Associativity</span>
        <ul class="vym-list-ul-4">
          <li><span class='vym-branch-4' style='color:#000000' id='mc:0,bo:2,bo:3,bo:1,bo:0'>What order a function/operator gets called in (right to left, left to right)</span>  </li>
          <li><span class='vym-branch-4' style='color:#000000' id='mc:0,bo:2,bo:3,bo:1,bo:1'>When they have the same precendence, associativity determines what gets ccalled
first</span>  </li>
        </ul>  </li>
        <li><span class='vym-branch-3' style='color:#000000' id='mc:0,bo:2,bo:3,bo:2'><a href="file:///home/juxley/Documents/Websites/Operator-Precedence-In-Javascript.pdf"><img src="flags/flag-url-16x16.png">file:///home/juxley/Documents/Websites/Operator-Precedence-In-Javascript.pdf</a></span>  </li>
        <li><span class='vym-branch-3' style='color:#000000' id='mc:0,bo:2,bo:3,bo:3'>Helps us to tell what the order that a operator (function) is called</span>  </li>
        <li><span class='vym-branch-3' style='color:#000000' id='mc:0,bo:2,bo:3,bo:4'>Why is this important? JavaScript is dynamically typed</span>  </li>
      </ul>  </li>
      <li><span class='vym-branch-2' style='color:#000000' id='mc:0,bo:2,bo:4'>Conceptual Aside: Coercion</span>
      <ul class="vym-list-ul-3">
        <li><span class='vym-branch-3' style='color:#000000' id='mc:0,bo:2,bo:4,bo:0'>Converting a value from one type to another</span>  </li>
        <li><span class='vym-branch-3' style='color:#000000' id='mc:0,bo:2,bo:4,bo:1'>&quot;helllo &quot; + &quot;world&quot;</span>  </li>
        <li><span class='vym-branch-3' style='color:#000000' id='mc:0,bo:2,bo:4,bo:2'>1 + 2</span>
        <ul class="vym-list-ul-4">
          <li><span class='vym-branch-4' style='color:#000000' id='mc:0,bo:2,bo:4,bo:2,bo:0'>3</span>  </li>
        </ul>  </li>
        <li><span class='vym-branch-3' style='color:#000000' id='mc:0,bo:2,bo:4,bo:3'>1 + &quot;2&quot;</span>
        <ul class="vym-list-ul-4">
          <li><span class='vym-branch-4' style='color:#000000' id='mc:0,bo:2,bo:4,bo:3,bo:0'>12</span>  </li>
          <li><span class='vym-branch-4' style='color:#000000' id='mc:0,bo:2,bo:4,bo:3,bo:1'>The value is coercied as a string</span>  </li>
          <li><span class='vym-branch-4' style='color:#000000' id='mc:0,bo:2,bo:4,bo:3,bo:2'>In the memory, string and number 1 look very different</span>  </li>
          <li><span class='vym-branch-4' style='color:#000000' id='mc:0,bo:2,bo:4,bo:3,bo:3'>JS engine makes a best guess</span>
          <ul class="vym-list-ul-5">
            <li><span class='vym-branch-5' style='color:#000000' id='mc:0,bo:2,bo:4,bo:3,bo:3,bo:0'>THIS choice!</span>  </li>
          </ul>  </li>
        </ul>  </li>
        <li><span class='vym-branch-3' style='color:#000000' id='mc:0,bo:2,bo:4,bo:4'>This happens since JS is dynmaically typed</span>
        <ul class="vym-list-ul-4">
          <li><span class='vym-branch-4' style='color:#000000' id='mc:0,bo:2,bo:4,bo:4,bo:0'>Happen in the JS engine</span>  </li>
        </ul>  </li>
        <li><span class='vym-branch-3' style='color:#000000' id='mc:0,bo:2,bo:4,bo:5'>operators are function, they run code as well</span>  </li>
        <li><span class='vym-branch-3' style='color:#000000' id='mc:0,bo:2,bo:4,bo:6'>Coercion is a fundalmental part of the language, don't forget it!</span>  </li>
      </ul>  </li>
      <li><span class='vym-branch-2' style='color:#000000' id='mc:0,bo:2,bo:5'>Comparison Operators</span>
      <ul class="vym-list-ul-3">
        <li><span class='vym-branch-3' style='color:#000000' id='mc:0,bo:2,bo:5,bo:0'>3 &lt; 2  &lt;  1</span>
        <ul class="vym-list-ul-4">
          <li><span class='vym-branch-4' style='color:#000000' id='mc:0,bo:2,bo:5,bo:0,bo:0'>true</span>  </li>
        </ul>  </li>
        <li><span class='vym-branch-3' style='color:#000000' id='mc:0,bo:2,bo:5,bo:1'>1 &lt; 2 &lt; 3</span>
        <ul class="vym-list-ul-4">
          <li><span class='vym-branch-4' style='color:#000000' id='mc:0,bo:2,bo:5,bo:1,bo:0'>true</span>  </li>
        </ul>  </li>
        <li><span class='vym-branch-3' style='color:#000000' id='mc:0,bo:2,bo:5,bo:2'>Boolen left &amp; right associativity</span>  </li>
        <li><span class='vym-branch-3' style='color:#000000' id='mc:0,bo:2,bo:5,bo:3'>null</span>
        <ul class="vym-list-ul-4">
          <li><span class='vym-branch-4' style='color:#000000' id='mc:0,bo:2,bo:5,bo:3,bo:0'>Coerced to a number results into 0</span>  </li>
        </ul>  </li>
        <li><span class='vym-branch-3' style='color:#000000' id='mc:0,bo:2,bo:5,bo:4'>NaN</span>
        <ul class="vym-list-ul-4">
          <li><span class='vym-branch-4' style='color:#000000' id='mc:0,bo:2,bo:5,bo:4,bo:0'>Coericing undeified</span>  </li>
        </ul>  </li>
        <li><span class='vym-branch-3' style='color:#000000' id='mc:0,bo:2,bo:5,bo:5'>null == 0</span>  </li>
        <li><span class='vym-branch-3' style='color:#000000' id='mc:0,bo:2,bo:5,bo:6'>Strict equals solves these weird coercives issues</span>
        <ul class="vym-list-ul-4">
          <li><span class='vym-branch-4' style='color:#000000' id='mc:0,bo:2,bo:5,bo:6,bo:0'>use strict equals when comparing quanities</span>  </li>
          <li><span class='vym-branch-4' style='color:#000000' id='mc:0,bo:2,bo:5,bo:6,bo:1'>function ==(a, b)</span>  </li>
          <li><span class='vym-branch-4' style='color:#000000' id='mc:0,bo:2,bo:5,bo:6,bo:2'>function ===(a, b)</span>  </li>
          <li><span class='vym-branch-4' style='color:#000000' id='mc:0,bo:2,bo:5,bo:6,bo:3'>These are only function with different outcomes</span>  </li>
        </ul>  </li>
        <li><span class='vym-branch-3' style='color:#000000' id='mc:0,bo:2,bo:5,bo:7'><a href="/home/juxley/Documents/Mind Maps/Equalty-Comparison-And-Sameness.pdf"><img src="flags/flag-url-16x16.png">Equality Sheet</a></span>  </li>
      </ul>  </li>
      <li><span class='vym-branch-2' style='color:#000000' id='mc:0,bo:2,bo:6'>Existence &amp; Boolean</span>
      <ul class="vym-list-ul-3">
        <li><span class='vym-branch-3' style='color:#000000' id='mc:0,bo:2,bo:6,bo:0'>Things that imply a lack of existence = false</span>
        <ul class="vym-list-ul-4">
          <li><span class='vym-branch-4' style='color:#000000' id='mc:0,bo:2,bo:6,bo:0,bo:0'>We can use this to our advantage with if statements</span>  </li>
          <li><span class='vym-branch-4' style='color:#000000' id='mc:0,bo:2,bo:6,bo:0,bo:1'>if (a || a === 0) // if a has something</span>  </li>
        </ul>  </li>
        <li><span class='vym-branch-3' style='color:#000000' id='mc:0,bo:2,bo:6,bo:1'>Code Example</span>
<table class="vym-note"><tr><td class="vym-note-flag">
<td>
let a;<br/><br/>// a gets data from remote<br/><br/>if (a) {<br/>  <br/>}<br/><br/>//if a is nothing, it will be undefined, which will get coercied  to false.
</td></tr></table>
  </li>
      </ul>  </li>
      <li><span class='vym-branch-2' style='color:#000000' id='mc:0,bo:2,bo:7'>Default Values</span>
      <ul class="vym-list-ul-3">
        <li><span class='vym-branch-3' style='color:#000000' id='mc:0,bo:2,bo:7,bo:0'>Code Example</span>
<table class="vym-note"><tr><td class="vym-note-flag">
<td>
function greet(name) {<br/>  console.log("Hello " + name);<br/>}<br/><br/>greet("Jason");<br/>// Hello Jason<br/><br/>greet();<br/>// Hello undefined<br/><br/><br/>function greet2(name) {<br/>  name = name || &lt;Your name here&gt;;<br/>  console.log("Hello " + name);<br/>}
</td></tr></table>

        <ul class="vym-list-ul-4">
          <li><span class='vym-branch-4' style='color:#000000' id='mc:0,bo:2,bo:7,bo:0,bo:0'>JavaScript creates the memory for the name variable, which would be undeined</span>  </li>
          <li><span class='vym-branch-4' style='color:#000000' id='mc:0,bo:2,bo:7,bo:0,bo:1'>Then, undefined got coericed into a string</span>  </li>
        </ul>  </li>
        <li><span class='vym-branch-3' style='color:#000000' id='mc:0,bo:2,bo:7,bo:1'>JavaScript doesn't care if you don't pass in a paramater for a function</span>  </li>
        <li><span class='vym-branch-3' style='color:#000000' id='mc:0,bo:2,bo:7,bo:2'>What if we want a default value/</span>  </li>
        <li><span class='vym-branch-3' style='color:#000000' id='mc:0,bo:2,bo:7,bo:3'>|| doesn't always return true or false</span>
        <ul class="vym-list-ul-4">
          <li><span class='vym-branch-4' style='color:#000000' id='mc:0,bo:2,bo:7,bo:3,bo:0'>Gives the first one that coerces into true</span>  </li>
        </ul>  </li>
      </ul>  </li>
      <li><span class='vym-branch-2' style='color:#000000' id='mc:0,bo:2,bo:8'>Framework Aside</span>
      <ul class="vym-list-ul-3">
        <li><span class='vym-branch-3' style='color:#000000' id='mc:0,bo:2,bo:8,bo:0'>Framework / LIbaryary = same thing. Reusable code</span>  </li>
        <li><span class='vym-branch-3' style='color:#000000' id='mc:0,bo:2,bo:8,bo:1'>scritp tag</span>
        <ul class="vym-list-ul-4">
          <li><span class='vym-branch-4' style='color:#000000' id='mc:0,bo:2,bo:8,bo:1,bo:0'>They get stacked ontop of each other</span>  </li>
          <li><span class='vym-branch-4' style='color:#000000' id='mc:0,bo:2,bo:8,bo:1,bo:1'>JS is usually minfied anyway</span>  </li>
          <li><span class='vym-branch-4' style='color:#000000' id='mc:0,bo:2,bo:8,bo:1,bo:2'>The code is stacked onto itself, like it's on the file</span>  </li>
        </ul>  </li>
        <li><span class='vym-branch-3' style='color:#000000' id='mc:0,bo:2,bo:8,bo:2'>window.varName = window.varName || &quot;Another string&quot;;</span>
        <ul class="vym-list-ul-4">
          <li><span class='vym-branch-4' style='color:#000000' id='mc:0,bo:2,bo:8,bo:2,bo:0'>Oh, you already used that variable name, I'll excuse myself</span>  </li>
          <li><span class='vym-branch-4' style='color:#000000' id='mc:0,bo:2,bo:8,bo:2,bo:1'>The window object checks the Global Execution Context</span>  </li>
        </ul>  </li>
      </ul>  </li>
    </ul>
  <h2><span class='vym-branch-1' style='color:#000000' id='mc:0,bo:3'>Objects and Functions</span></h2>
    <ul class="vym-list-ul-2">
      <li><span class='vym-branch-2' style='color:#000000' id='mc:0,bo:3,bo:0'>objects and the Dot</span>
      <ul class="vym-list-ul-3">
        <li><span class='vym-branch-3' style='color:#000000' id='mc:0,bo:3,bo:0,bo:0'>Names and values</span>  </li>
        <li><span class='vym-branch-3' style='color:#000000' id='mc:0,bo:3,bo:0,bo:1'>Object 0-1</span>
        <ul class="vym-list-ul-4">
          <li><span class='vym-branch-4' style='color:#000000' id='mc:0,bo:3,bo:0,bo:1,bo:0'>Primitave &quot;property&quot; 0-11</span>
          <ul class="vym-list-ul-5">
            <li><span class='vym-branch-5' style='color:#000000' id='mc:0,bo:3,bo:0,bo:1,bo:0,bo:0'>booleans, strings, numbers, etc.</span>  </li>
          </ul>  </li>
          <li><span class='vym-branch-4' style='color:#000000' id='mc:0,bo:3,bo:0,bo:1,bo:1'>Another (child) Object &quot;property&quot; 0-12</span>  </li>
          <li><span class='vym-branch-4' style='color:#000000' id='mc:0,bo:3,bo:0,bo:1,bo:2'>function &quot;method&quot; 0-13</span>  </li>
          <li><span class='vym-branch-4' style='color:#000000' id='mc:0,bo:3,bo:0,bo:1,bo:3'>Numbers are related like addresses</span>  </li>
          <li><span class='vym-branch-4' style='color:#000000' id='mc:0,bo:3,bo:0,bo:1,bo:4'>it knows where the other object are</span>  </li>
        </ul>  </li>
        <li><span class='vym-branch-3' style='color:#000000' id='mc:0,bo:3,bo:0,bo:2'>Operator</span>
        <ul class="vym-list-ul-4">
          <li><span class='vym-branch-4' style='color:#000000' id='mc:0,bo:3,bo:0,bo:2,bo:0'>computed memeber access</span>
          <ul class="vym-list-ul-5">
            <li><span class='vym-branch-5' style='color:#000000' id='mc:0,bo:3,bo:0,bo:2,bo:0,bo:0'>person[&quot;firstname&quot;] = &quot;Jason&quot;;</span>  </li>
          </ul>  </li>
          <li><span class='vym-branch-4' style='color:#000000' id='mc:0,bo:3,bo:0,bo:2,bo:1'>Member access</span>
          <ul class="vym-list-ul-5">
            <li><span class='vym-branch-5' style='color:#000000' id='mc:0,bo:3,bo:0,bo:2,bo:1,bo:0'>The dot</span>  </li>
            <li><span class='vym-branch-5' style='color:#000000' id='mc:0,bo:3,bo:0,bo:2,bo:1,bo:1'>person.firstname</span>  </li>
          </ul>  </li>
          <li><span class='vym-branch-4' style='color:#000000' id='mc:0,bo:3,bo:0,bo:2,bo:2'>just functoin / operators to FIND these properties</span>  </li>
        </ul>  </li>
      </ul>  </li>
      <li><span class='vym-branch-2' style='color:#000000' id='mc:0,bo:3,bo:1'>Object Literals</span>
      <ul class="vym-list-ul-3">
        <li><span class='vym-branch-3' style='color:#000000' id='mc:0,bo:3,bo:1,bo:0'>var person = { name: &quot;Jason&quot;, sign: &quot;Leo&quot; };</span>  </li>
        <li><span class='vym-branch-3' style='color:#000000' id='mc:0,bo:3,bo:1,bo:1'>JavaScript is liberal with whitespaces</span>  </li>
        <li><span class='vym-branch-3' style='color:#000000' id='mc:0,bo:3,bo:1,bo:2'>Example code</span>
<table class="vym-note"><tr><td class="vym-note-flag">
<td>
var jason = {<br/>  firstname : "Jason",<br/>  lastname : "Ribbe",<br/>  address : {<br/>		street: "12 Fake St",<br/>		city: "Lalaland",<br/>		state: "Colorado"<br/>  }<br/>};<br/><br/>function greet(person) {<br/>	console.log("Hello " + person.firstname);<br/>}<br/><br/>greet(jason);<br/><br/>greet({<br/>  firstname: "Herbit",<br/>  lastname: "MagicJS"<br/>});<br/><br/>console.log(person);
</td></tr></table>
  </li>
        <li><span class='vym-branch-3' style='color:#000000' id='mc:0,bo:3,bo:1,bo:3'>Where ever I want, I can make an object!</span>  </li>
        <li><span class='vym-branch-3' style='color:#000000' id='mc:0,bo:3,bo:1,bo:4'>The code that you're written isn't what is happening under the hood<img src="flags/flag-flash.png"><img src="flags/flag-exclamationmark.png"></span>  </li>
      </ul>  </li>
      <li><span class='vym-branch-2' style='color:#000000' id='mc:0,bo:3,bo:2'>Framework Aside: Faking Namespaces</span>
      <ul class="vym-list-ul-3">
        <li><span class='vym-branch-3' style='color:#000000' id='mc:0,bo:3,bo:2,bo:0'>Namespaces</span>
        <ul class="vym-list-ul-4">
          <li><span class='vym-branch-4' style='color:#000000' id='mc:0,bo:3,bo:2,bo:0,bo:0'>A container for variables and functions</span>  </li>
        </ul>  </li>
        <li><span class='vym-branch-3' style='color:#000000' id='mc:0,bo:3,bo:2,bo:1'>JavaScript doesn't have namespaces, it doesn't need to; it can fake it.</span>  </li>
        <li><span class='vym-branch-3' style='color:#000000' id='mc:0,bo:3,bo:2,bo:2'>Problem: a case where a global variable needs 2 values</span>  </li>
        <li><span class='vym-branch-3' style='color:#000000' id='mc:0,bo:3,bo:2,bo:3'>Solution: use an object to make sure there is not namespace collations</span>
        <ul class="vym-list-ul-4">
          <li><span class='vym-branch-4' style='color:#000000' id='mc:0,bo:3,bo:2,bo:3,bo:0'>Example code</span>
          <ul class="vym-list-ul-5">
            <li><span class='vym-branch-5' style='color:#000000' id='mc:0,bo:3,bo:2,bo:3,bo:0,bo:0'></span>  </li>
          </ul>  </li>
        </ul>  </li>
        <li><span class='vym-branch-3' style='color:#000000' id='mc:0,bo:3,bo:2,bo:4'>Pitfall</span>
        <ul class="vym-list-ul-4">
          <li><span class='vym-branch-4' style='color:#000000' id='mc:0,bo:3,bo:2,bo:4,bo:0'>var english = {}; english.greetings.greet1 = &quot;Hello&quot;;</span>
          <ul class="vym-list-ul-5">
            <li><span class='vym-branch-5' style='color:#000000' id='mc:0,bo:3,bo:2,bo:4,bo:0,bo:0'>Output:Uncaught type error: greetings is undefined</span>  </li>
            <li><span class='vym-branch-5' style='color:#000000' id='mc:0,bo:3,bo:2,bo:4,bo:0,bo:1'>english.greeting will be undefined</span>  </li>
          </ul>  </li>
        </ul>  </li>
      </ul>  </li>
      <li><span class='vym-branch-2' style='color:#000000' id='mc:0,bo:3,bo:3'>JSON and Object Literal</span>
      <ul class="vym-list-ul-3">
        <li><span class='vym-branch-3' style='color:#000000' id='mc:0,bo:3,bo:3,bo:0'>Inspired by object literal</span>
        <ul class="vym-list-ul-4">
          <li><span class='vym-branch-4' style='color:#000000' id='mc:0,bo:3,bo:3,bo:0,bo:0'>Not the same as object literals</span>  </li>
        </ul>  </li>
        <li><span class='vym-branch-3' style='color:#000000' id='mc:0,bo:3,bo:3,bo:1'>JavaScript Object Nottation</span>  </li>
        <li><span class='vym-branch-3' style='color:#000000' id='mc:0,bo:3,bo:3,bo:2'>Many formats were send across the wire (the internet)</span>  </li>
        <li><span class='vym-branch-3' style='color:#000000' id='mc:0,bo:3,bo:3,bo:3'>Example code</span>
<table class="vym-note"><tr><td class="vym-note-flag">
<td>
var objectLiteral = {<br/>    firstname: 'Mary',<br/>    isAProgrammer: true<br/>}<br/><br/>console.log(JSON.stringify(objectLiteral));<br/><br/>var jsonValue = JSON.parse('{ "firstname": "Mary", "isAProgrammer": true }');<br/><br/>console.log(jsonValue);
</td></tr></table>
  </li>
        <li><span class='vym-branch-3' style='color:#000000' id='mc:0,bo:3,bo:3,bo:4'>JSON is more strict</span>  </li>
      </ul>  </li>
      <li><span class='vym-branch-2' style='color:#000000' id='mc:0,bo:3,bo:4'>Functions are objects<img src="flags/flag-info.png"></span>
<table class="vym-note"><tr><td class="vym-note-flag">
<td>
nb
</td></tr></table>

      <ul class="vym-list-ul-3">
        <li><span class='vym-branch-3' style='color:#000000' id='mc:0,bo:3,bo:4,bo:0'>1st class functions</span>
        <ul class="vym-list-ul-4">
          <li><span class='vym-branch-4' style='color:#000000' id='mc:0,bo:3,bo:4,bo:0,bo:0'>Everything you can do other types, you can do with functions</span>  </li>
          <li><span class='vym-branch-4' style='color:#000000' id='mc:0,bo:3,bo:4,bo:0,bo:1'>You can have functions as paramerts, set them equal to variables, write them on
the fly</span>  </li>
        </ul>  </li>
        <li><span class='vym-branch-3' style='color:#000000' id='mc:0,bo:3,bo:4,bo:1'>A function is a special type of object</span>
        <ul class="vym-list-ul-4">
          <li><span class='vym-branch-4' style='color:#000000' id='mc:0,bo:3,bo:4,bo:1,bo:0'>You can attach properties and methods to a function</span>
          <ul class="vym-list-ul-5">
            <li><span class='vym-branch-5' style='color:#000000' id='mc:0,bo:3,bo:4,bo:1,bo:0,bo:0'>Primative</span>  </li>
            <li><span class='vym-branch-5' style='color:#000000' id='mc:0,bo:3,bo:4,bo:1,bo:0,bo:1'>Object</span>  </li>
            <li><span class='vym-branch-5' style='color:#000000' id='mc:0,bo:3,bo:4,bo:1,bo:0,bo:2'>Functions</span>  </li>
            <li><span class='vym-branch-5' style='color:#000000' id='mc:0,bo:3,bo:4,bo:1,bo:0,bo:3'>Example Code</span>
<table class="vym-note"><tr><td class="vym-note-flag">
<td>
function greet() {<br/>  console.log("Hello");<br/>}<br/><br/>greet.lang = "english";<br/><br/>console.log(greet);<br/>console.log(greet.language);<br/><br/>//output<br/>/*<br/>function greet() {<br/>  console.log("Hello");<br/>}<br/>"english"<br/>*/
</td></tr></table>
  </li>
          </ul>  </li>
          <li><span class='vym-branch-4' style='color:#000000' id='mc:0,bo:3,bo:4,bo:1,bo:1'>Special parts</span>
          <ul class="vym-list-ul-5">
            <li><span class='vym-branch-5' style='color:#000000' id='mc:0,bo:3,bo:4,bo:1,bo:1,bo:0'>Names</span>
            <ul class="vym-list-ul-6">
              <li><span class='vym-branch-6' style='color:#000000' id='mc:0,bo:3,bo:4,bo:1,bo:1,bo:0,bo:0'>Doesn't have to have one</span>  </li>
            </ul>  </li>
            <li><span class='vym-branch-5' style='color:#000000' id='mc:0,bo:3,bo:4,bo:1,bo:1,bo:1'>Code property</span>
            <ul class="vym-list-ul-6">
              <li><span class='vym-branch-6' style='color:#000000' id='mc:0,bo:3,bo:4,bo:1,bo:1,bo:1,bo:0'>Invocable</span>
              <ul class="vym-list-ul-7">
                <li><span class='vym-branch-7' style='color:#000000' id='mc:0,bo:3,bo:4,bo:1,bo:1,bo:1,bo:0,bo:0'>Run this code please! (execution context, exeuction, etc.)</span>  </li>
              </ul>  </li>
            </ul>  </li>
          </ul>  </li>
        </ul>  </li>
      </ul>  </li>
      <li><span class='vym-branch-2' style='color:#000000' id='mc:0,bo:3,bo:5'>Function Statements and Function Expressions</span>
      <ul class="vym-list-ul-3">
        <li><span class='vym-branch-3' style='color:#000000' id='mc:0,bo:3,bo:5,bo:0'>Expression: a unit of code that results in a value</span>
        <ul class="vym-list-ul-4">
          <li><span class='vym-branch-4' style='color:#000000' id='mc:0,bo:3,bo:5,bo:0,bo:0'>Doesn't have to save inside a variable</span>  </li>
          <li><span class='vym-branch-4' style='color:#000000' id='mc:0,bo:3,bo:5,bo:0,bo:1'>Examples</span>
<table class="vym-note"><tr><td class="vym-note-flag">
<td>
var a  = 3<br/>1 + 2;;
</td></tr></table>
  </li>
          <li><span class='vym-branch-4' style='color:#000000' id='mc:0,bo:3,bo:5,bo:0,bo:2'>function expression</span>
<table class="vym-note"><tr><td class="vym-note-flag">
<td>
var anonynomus = function () {<br/>  console.log("hello");<br/>}
</td></tr></table>

          <ul class="vym-list-ul-5">
            <li><span class='vym-branch-5' style='color:#000000' id='mc:0,bo:3,bo:5,bo:0,bo:2,bo:0'>It doesn't have a name, it's an anonymous function stored in memory with the
name of anaoymous greet</span>  </li>
          </ul>  </li>
          <li><span class='vym-branch-4' style='color:#000000' id='mc:0,bo:3,bo:5,bo:0,bo:3'>Returns an object, while a function statement will say &quot;yeah there's a function
there&quot; and won't execute it in any way</span>  </li>
          <li><span class='vym-branch-4' style='color:#000000' id='mc:0,bo:3,bo:5,bo:0,bo:4'>Variable set to undefined first</span>  </li>
        </ul>  </li>
        <li><span class='vym-branch-3' style='color:#000000' id='mc:0,bo:3,bo:5,bo:1'>STatement: does work</span>
        <ul class="vym-list-ul-4">
          <li><span class='vym-branch-4' style='color:#000000' id='mc:0,bo:3,bo:5,bo:1,bo:0'>If statement</span>  </li>
          <li><span class='vym-branch-4' style='color:#000000' id='mc:0,bo:3,bo:5,bo:1,bo:1'>function statement</span>
<table class="vym-note"><tr><td class="vym-note-flag">
<td>
function greet() {<br/>  console.log("Hi");<br/>}
</td></tr></table>

          <ul class="vym-list-ul-5">
            <li><span class='vym-branch-5' style='color:#000000' id='mc:0,bo:3,bo:5,bo:1,bo:1,bo:0'>It doesn't result in a value</span>  </li>
            <li><span class='vym-branch-5' style='color:#000000' id='mc:0,bo:3,bo:5,bo:1,bo:1,bo:1'>Available in memory</span>  </li>
            <li><span class='vym-branch-5' style='color:#000000' id='mc:0,bo:3,bo:5,bo:1,bo:1,bo:2'>Hoisted</span>  </li>
          </ul>  </li>
        </ul>  </li>
        <li><span class='vym-branch-3' style='color:#000000' id='mc:0,bo:3,bo:5,bo:2'>Good good is being understandable and consie</span>  </li>
        <li><span class='vym-branch-3' style='color:#000000' id='mc:0,bo:3,bo:5,bo:3'>function log(a) {</span>
<table class="vym-note"><tr><td class="vym-note-flag">
<td>
<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.0//EN" "http://www.w3.org/TR/REC-html40/strict.dtd">

<p class="vym-note-paragraph"><span style=" font-family:'Sans'; font-size:10pt; font-weight:600; color:#680000;">...<br /><br />function log(a) {</span></p>
<p class="vym-note-paragraph"><span style=" font-family:'Sans'; font-size:10pt; font-weight:600; color:#680000;"> console.log(a);</span></p>
<p class="vym-note-paragraph"><span style=" font-family:'Sans'; font-size:10pt; font-weight:600; color:#680000;"> a();</span></p>
<p class="vym-note-paragraph"><span style=" font-family:'Sans'; font-size:10pt; font-weight:600; color:#680000;">}</span></p>
<p class="vym-note-paragraph"><br /></p>
<p class="vym-note-paragraph"><span style=" font-family:'Sans'; font-size:10pt; font-weight:600; color:#680000;">log(3);</span></p>
<p class="vym-note-paragraph"><span style=" font-family:'Sans'; font-size:10pt; font-weight:600; color:#680000;">log(&quot;three&quot;);</span></p>
<p class="vym-note-paragraph"><span style=" font-family:'Sans'; font-size:10pt; font-weight:600; color:#680000;">log({greeting: hi});</span></p>
<p class="vym-note-paragraph"><br /></p>
<p class="vym-note-paragraph"><span style=" font-family:'Sans'; font-size:10pt; font-weight:600; color:#680000;">log(function() {</span></p>
<p class="vym-note-paragraph"><span style=" font-family:'Sans'; font-size:10pt; font-weight:600; color:#680000;">  console.log(&quot;hi&quot;);</span></p>
<p class="vym-note-paragraph"><span style=" font-family:'Sans'; font-size:10pt; font-weight:600; color:#680000;">});</span></p>
<p class="vym-note-paragraph"><br /></p>
<p class="vym-note-paragraph"><br /></p>
<p class="vym-note-paragraph"><br /></p>
</td></tr></table>
  </li>
        <li><span class='vym-branch-3' style='color:#000000' id='mc:0,bo:3,bo:5,bo:4'>Passing function around, give function to function as parameters, use them like
variables = functional programming</span>  </li>
        <li><span class='vym-branch-3' style='color:#000000' id='mc:0,bo:3,bo:5,bo:5'>first class function'; functions in JS are objects</span>  </li>
      </ul>  </li>
      <li><span class='vym-branch-2' style='color:#000000' id='mc:0,bo:3,bo:6'>By Reference / By Value</span>
      <ul class="vym-list-ul-3">
        <li><span class='vym-branch-3' style='color:#000000' id='mc:0,bo:3,bo:6,bo:0'>By Value</span>
        <ul class="vym-list-ul-4">
          <li><span class='vym-branch-4' style='color:#000000' id='mc:0,bo:3,bo:6,bo:0,bo:0'>b = a</span>  </li>
          <li><span class='vym-branch-4' style='color:#000000' id='mc:0,bo:3,bo:6,bo:0,bo:1'><a href="/home/juxley/Pictures/byreferencebyvalue1.png"><img src="flags/flag-url-16x16.png">Model</a></span>  </li>
          <li><span class='vym-branch-4' style='color:#000000' id='mc:0,bo:3,bo:6,bo:0,bo:2'>Primitve types! (all, except objects)</span>  </li>
          <li><span class='vym-branch-4' style='color:#000000' id='mc:0,bo:3,bo:6,bo:0,bo:3'>After copying, the variables can stay on their own.</span>  </li>
        </ul>  </li>
        <li><span class='vym-branch-3' style='color:#000000' id='mc:0,bo:3,bo:6,bo:1'>By Reference</span>
        <ul class="vym-list-ul-4">
          <li><span class='vym-branch-4' style='color:#000000' id='mc:0,bo:3,bo:6,bo:1,bo:0'>Objects (all objects, which includes functions)</span>  </li>
          <li><span class='vym-branch-4' style='color:#000000' id='mc:0,bo:3,bo:6,bo:1,bo:1'>Two names point to the same place in memory</span>  </li>
          <li><span class='vym-branch-4' style='color:#000000' id='mc:0,bo:3,bo:6,bo:1,bo:2'><a href="/home/juxley/Pictures/byreference.png"><img src="flags/flag-url-16x16.png">Model</a></span>  </li>
        </ul>  </li>
        <li><span class='vym-branch-3' style='color:#000000' id='mc:0,bo:3,bo:6,bo:2'>Code</span>
<table class="vym-note"><tr><td class="vym-note-flag">
<td>
//by value<br/>var a = 3;<br/>var b;<br/><br/>b = a;<br/>a = 2;<br/><br/><br/>//by reference<br/><br/>var c = { greeting: "hi" };<br/>var d = c;<br/>c.greet = "hello"; //mutated<br/><br/>//by reference, even as a parameter<br/><br/>function changeGreet(obj) {<br/>  obj.greet = "Hola";<br/>}<br/><br/>c.greet = d.greet = obj.greet;<br/>c.greet = { greeting: "hiya" };  // new place in memeory for that to live
</td></tr></table>
  </li>
        <li><span class='vym-branch-3' style='color:#000000' id='mc:0,bo:3,bo:6,bo:3'>mutated</span>
        <ul class="vym-list-ul-4">
          <li><span class='vym-branch-4' style='color:#000000' id='mc:0,bo:3,bo:6,bo:3,bo:0'>To chang a avlue</span>  </li>
        </ul>  </li>
        <li><span class='vym-branch-3' style='color:#000000' id='mc:0,bo:3,bo:6,bo:4'>immuatable</span>
        <ul class="vym-list-ul-4">
          <li><span class='vym-branch-4' style='color:#000000' id='mc:0,bo:3,bo:6,bo:4,bo:0'>Cannot be change</span>  </li>
        </ul>  </li>
      </ul>  </li>
      <li><span class='vym-branch-2' style='color:#000000' id='mc:0,bo:3,bo:7'><a href="/home/juxley/Pictures/this.png"><img src="flags/flag-url-16x16.png">Objects, Functions, and &quot;this&quot;</a></span>
      <ul class="vym-list-ul-3">
        <li><span class='vym-branch-3' style='color:#000000' id='mc:0,bo:3,bo:7,bo:0'>Each time an execution context is made, JavaScript makes the 'this' object</span>  </li>
        <li><span class='vym-branch-3' style='color:#000000' id='mc:0,bo:3,bo:7,bo:1'>3 Execution Conext</span>
        <ul class="vym-list-ul-4">
          <li><span class='vym-branch-4' style='color:#000000' id='mc:0,bo:3,bo:7,bo:1,bo:0'>All 3 'this' point to the global object, the Window object</span>  </li>
          <li><span class='vym-branch-4' style='color:#000000' id='mc:0,bo:3,bo:7,bo:1,bo:1'>Code Example</span>
<table class="vym-note"><tr><td class="vym-note-flag">
<td>
function a() {<br/>  console.log(this);<br/>  this.newVar = "Hello"<br/>} <br/><br/>var b = function() {<br/>  console.log(this);<br/>};<br/><br/>a();<br/>console.log("Hello"); // works<br/> <br/>b();<br/><br/>var c = {<br/>  name: "c object",<br/>  log: function() {<br/><br/>   var self = this;<br/><br/>	  self.name = "updated c object";<br/>      console.log(self);<br/>   <br/><br/>  var setName = function(newName) {<br/>    this.name = newName; //on the global objects<br/>    self.name = newName;<br/>  }<br/>   setName("OOPS! this.anme is on the global object, while self.name is on the c<br/>object")<br/>   console.log(self);<br/>  }<br/>}
</td></tr></table>
  </li>
          <li><span class='vym-branch-4' style='color:#000000' id='mc:0,bo:3,bo:7,bo:1,bo:2'>'this' will point to the ojbect is attached to. It will point to the object it
contains to.</span>  </li>
          <li><span class='vym-branch-4' style='color:#000000' id='mc:0,bo:3,bo:7,bo:1,bo:3'>You can access the properties within the object using 'this'</span>  </li>
          <li><span class='vym-branch-4' style='color:#000000' id='mc:0,bo:3,bo:7,bo:1,bo:4'>when just invocating a funciton, 'this' points to the global object</span>  </li>
          <li><span class='vym-branch-4' style='color:#000000' id='mc:0,bo:3,bo:7,bo:1,bo:5'>when in a object, 'this points to the object itself</span>  </li>
        </ul>  </li>
      </ul>  </li>
      <li><span class='vym-branch-2' style='color:#000000' id='mc:0,bo:3,bo:8'><a href="/home/juxley/Pictures/collectionofanything.png"><img src="flags/flag-url-16x16.png">Conceptual Aside: Collection of Anything</a></span>  </li>
      <li><span class='vym-branch-2' style='color:#000000' id='mc:0,bo:3,bo:9'>arguments and &quot;spread&quot;</span>
      <ul class="vym-list-ul-3">
        <li><span class='vym-branch-3' style='color:#000000' id='mc:0,bo:3,bo:9,bo:0'></span>  </li>
        <li><span class='vym-branch-3' style='color:#000000' id='mc:0,bo:3,bo:9,bo:1'>arguments hold all the values of all of the parameters passed into a function</span>  </li>
        <li><span class='vym-branch-3' style='color:#000000' id='mc:0,bo:3,bo:9,bo:2'>Arguments =&gt; The parameters yyou pass into a function</span>  </li>
        <li><span class='vym-branch-3' style='color:#000000' id='mc:0,bo:3,bo:9,bo:3'>JavaScript gives you a key word that stores tthem in</span>  </li>
        <li><span class='vym-branch-3' style='color:#000000' id='mc:0,bo:3,bo:9,bo:4'>Example</span>
<table class="vym-note"><tr><td class="vym-note-flag">
<td>
function greet(first, last, langauge, ...other) {<br/>  langauge = langauge || "en";<br/><br/>  if (arguments.length === 0) {<br/>  console.('Missing Parametrs');<br/>  console.log('------');<br/>  return<br/>}<br/><br/>  console.log({first, last, langauge});<br/>  console.log(arguments);<br/>  console.log("arg 0: "<br/>  console.log("----------------------");<br/>}<br/><br/>greet();q<br/>greet("jason");<br/>greet("Jason", "Ribble", "cz");
</td></tr></table>
  </li>
        <li><span class='vym-branch-3' style='color:#000000' id='mc:0,bo:3,bo:9,bo:5'>Hving default parameters</span>  </li>
        <li><span class='vym-branch-3' style='color:#000000' id='mc:0,bo:3,bo:9,bo:6'>arguments keyword IS NOT really an array.</span>
        <ul class="vym-list-ul-4">
          <li><span class='vym-branch-4' style='color:#000000' id='mc:0,bo:3,bo:9,bo:6,bo:0'>Know as array-like</span>  </li>
        </ul>  </li>
        <li><span class='vym-branch-3' style='color:#000000' id='mc:0,bo:3,bo:9,bo:7'>Arguments are depreeated</span>  </li>
        <li><span class='vym-branch-3' style='color:#000000' id='mc:0,bo:3,bo:9,bo:8'>Spread!</span>
        <ul class="vym-list-ul-4">
          <li><span class='vym-branch-4' style='color:#000000' id='mc:0,bo:3,bo:9,bo:8,bo:0'>...other</span>  </li>
          <li><span class='vym-branch-4' style='color:#000000' id='mc:0,bo:3,bo:9,bo:8,bo:1'>Take the paramets and put them in an array called other</span>  </li>
        </ul>  </li>
      </ul>  </li>
      <li><span class='vym-branch-2' style='color:#000000' id='mc:0,bo:3,bo:10'>Framework Aside : function overloading</span>
<table class="vym-note"><tr><td class="vym-note-flag">
<td>
function greet(first, last, lang) {<br/><br/>if (lang === "en") {<br/>  console.log("hello " + first + " " + last);<br/>}<br/><br/>if (lang === "es") {<br/>  console.log("hola " + first + " " + last);<br/>}<br/><br/>}<br/><br/>function greetEn(first, last) {<br/>  greet(first, last, 'en');<br/>}<br/><br/>function greetEs(first, last) {<br/>  greet(first, last, 'es');<br/>}
</td></tr></table>

      <ul class="vym-list-ul-3">
        <li><span class='vym-branch-3' style='color:#000000' id='mc:0,bo:3,bo:10,bo:0'>JavaScript doesn't have this, and we don't care</span>  </li>
        <li><span class='vym-branch-3' style='color:#000000' id='mc:0,bo:3,bo:10,bo:1'>We have 1st class functions</span>  </li>
        <li><span class='vym-branch-3' style='color:#000000' id='mc:0,bo:3,bo:10,bo:2'>Example</span>  </li>
      </ul>  </li>
      <li><span class='vym-branch-2' style='color:#000000' id='mc:0,bo:3,bo:11'>Concept Aside: Syntax Parser</span>
      <ul class="vym-list-ul-3">
        <li><span class='vym-branch-3' style='color:#000000' id='mc:0,bo:3,bo:11,bo:0'>The computer transflate it into what the computer can understand</span>  </li>
        <li><span class='vym-branch-3' style='color:#000000' id='mc:0,bo:3,bo:11,bo:1'>A browser is on for JavaScript</span>  </li>
        <li><span class='vym-branch-3' style='color:#000000' id='mc:0,bo:3,bo:11,bo:2'>if it see proper syntax, it'll know what you tend to do</span>  </li>
        <li><span class='vym-branch-3' style='color:#000000' id='mc:0,bo:3,bo:11,bo:3'>character by  character making assumptions, rules, and might even make changes
to your code; trying to determine what you intend to do</span>  </li>
      </ul>  </li>
      <li><span class='vym-branch-2' style='color:#000000' id='mc:0,bo:3,bo:12'>Dangerous Aside!!!!!!! Automatic Semicolin Insertation</span>
      <ul class="vym-list-ul-3">
        <li><span class='vym-branch-3' style='color:#000000' id='mc:0,bo:3,bo:12,bo:0'>The JavaScript syntax parser will put a ; where it expects it to be.</span>  </li>
        <li><span class='vym-branch-3' style='color:#000000' id='mc:0,bo:3,bo:12,bo:1'>Put the semicolons, as you don't want JavaScript to guess for you.</span>  </li>
        <li><span class='vym-branch-3' style='color:#000000' id='mc:0,bo:3,bo:12,bo:2'>Returns (enter) may cause some problems in your code</span>  </li>
        <li><span class='vym-branch-3' style='color:#000000' id='mc:0,bo:3,bo:12,bo:3'>Example (Incorrect)</span>
<table class="vym-note"><tr><td class="vym-note-flag">
<td>
function getPerson() {<br/>  return  //&lt;-Semicolon inserted)<br/>   {<br/>     firstname: 'Tony'<br/>   }<br/>}<br/><br/>console.log(getPerson());
</td></tr></table>
  </li>
        <li><span class='vym-branch-3' style='color:#000000' id='mc:0,bo:3,bo:12,bo:4'>Example (Correct)</span>
<table class="vym-note"><tr><td class="vym-note-flag">
<td>
function getPerson() {<br/>  return { <br/>     firstname: 'Tony'<br/>   }<br/>}<br/><br/>console.log(getPerson());
</td></tr></table>
  </li>
        <li><span class='vym-branch-3' style='color:#000000' id='mc:0,bo:3,bo:12,bo:5'>Put { on the same line as the statement (object, function, if, etc.)</span>  </li>
      </ul>  </li>
      <li><span class='vym-branch-2' style='color:#000000' id='mc:0,bo:3,bo:13'>Conceptual Aside :WhitespacesJ</span>
      <ul class="vym-list-ul-3">
        <li><span class='vym-branch-3' style='color:#000000' id='mc:0,bo:3,bo:13,bo:0'>JavaScript is very liberal</span>  </li>
        <li><span class='vym-branch-3' style='color:#000000' id='mc:0,bo:3,bo:13,bo:1'>Make comments! You add one using white spaces</span>
        <ul class="vym-list-ul-4">
          <li><span class='vym-branch-4' style='color:#000000' id='mc:0,bo:3,bo:13,bo:1,bo:0'></span>  </li>
        </ul>  </li>
        <li><span class='vym-branch-3' style='color:#000000' id='mc:0,bo:3,bo:13,bo:2'>Example</span>
<table class="vym-note"><tr><td class="vym-note-flag">
<td>
var<br/><br/>// look at that<br/>  firstname,<br/>  lastname,<br/>//another one<br/>  lang;<br/><br/>var person {<br/>  // the first name<br/>  firstname: 'Jason',<br/>  // More white space<br/>  lastname: 'Ribble';<br/>}
</td></tr></table>
  </li>
        <li><span class='vym-branch-3' style='color:#000000' id='mc:0,bo:3,bo:13,bo:3'>Programming will be happy to put a lot of coments to take adventage of this</span>  </li>
        <li><span class='vym-branch-3' style='color:#000000' id='mc:0,bo:3,bo:13,bo:4'>When coming back to your own code you'll be happy</span>  </li>
      </ul>  </li>
      <li><span class='vym-branch-2' style='color:#000000' id='mc:0,bo:3,bo:14'>Immeditaly Invoked Function Expressions</span>
      <ul class="vym-list-ul-3">
        <li><span class='vym-branch-3' style='color:#000000' id='mc:0,bo:3,bo:14,bo:0'>Function statment</span>  </li>
        <li><span class='vym-branch-3' style='color:#000000' id='mc:0,bo:3,bo:14,bo:1'>Function Expression</span>  </li>
        <li><span class='vym-branch-3' style='color:#000000' id='mc:0,bo:3,bo:14,bo:2'>Functoins</span>
        <ul class="vym-list-ul-4">
          <li><span class='vym-branch-4' style='color:#000000' id='mc:0,bo:3,bo:14,bo:2,bo:0'>Code property (innovcation)</span>  </li>
          <li><span class='vym-branch-4' style='color:#000000' id='mc:0,bo:3,bo:14,bo:2,bo:1'>Name</span>  </li>
        </ul>  </li>
        <li><span class='vym-branch-3' style='color:#000000' id='mc:0,bo:3,bo:14,bo:3'>Invoking something on the fly</span>  </li>
        <li><span class='vym-branch-3' style='color:#000000' id='mc:0,bo:3,bo:14,bo:4'>IIFE</span>
<table class="vym-note"><tr><td class="vym-note-flag">
<td>
var greeting = function(name) {<br/>   return "Hello " + name;<br/>}("Jason");
</td></tr></table>

        <ul class="vym-list-ul-4">
          <li><span class='vym-branch-4' style='color:#000000' id='mc:0,bo:3,bo:14,bo:4,bo:0'>Invocate a function immeditably after creating it</span>  </li>
          <li><span class='vym-branch-4' style='color:#000000' id='mc:0,bo:3,bo:14,bo:4,bo:1'>The variable holds the returned value, not the function</span>  </li>
        </ul>  </li>
        <li><span class='vym-branch-3' style='color:#000000' id='mc:0,bo:3,bo:14,bo:5'>We can put strings, numbers, and objects anywhere, that's not doing anything; we
can do so.</span>
        <ul class="vym-list-ul-4">
          <li><span class='vym-branch-4' style='color:#000000' id='mc:0,bo:3,bo:14,bo:5,bo:0'>We can't do it with functions; it wants to be a function STATEMENT</span>  </li>
          <li><span class='vym-branch-4' style='color:#000000' id='mc:0,bo:3,bo:14,bo:5,bo:1'>UNLESS we have a function expression, by WRAPPING YOUR FUNCTION IN PARENTHESES</span>  </li>
        </ul>  </li>
        <li><span class='vym-branch-3' style='color:#000000' id='mc:0,bo:3,bo:14,bo:6'>Expression: Something that returns a value</span>  </li>
        <li><span class='vym-branch-3' style='color:#000000' id='mc:0,bo:3,bo:14,bo:7'>What's special about this?</span>
        <ul class="vym-list-ul-4">
          <li><span class='vym-branch-4' style='color:#000000' id='mc:0,bo:3,bo:14,bo:7,bo:0'>we can have a function expression (wrapped in parens to trick the syntax
paratex, then we can write a function and run it at the same time</span>  </li>
          <li><span class='vym-branch-4' style='color:#000000' id='mc:0,bo:3,bo:14,bo:7,bo:1'>Another Example</span>
<table class="vym-note"><tr><td class="vym-note-flag">
<td>
(function(name) { <br/>    var greet = "hello "; <br/>	console.log(greet + name); <br/>})("Jason");
</td></tr></table>
  </li>
        </ul>  </li>
        <li><span class='vym-branch-3' style='color:#000000' id='mc:0,bo:3,bo:14,bo:8'>Framework aside IIFE and Safe Code</span>
        <ul class="vym-list-ul-4">
          <li><span class='vym-branch-4' style='color:#000000' id='mc:0,bo:3,bo:14,bo:8,bo:0'>Ran Code</span>
<table class="vym-note"><tr><td class="vym-note-flag">
<td>
(function(name) { <br/>    var greet = "hello "; <br/>	console.log(greet + name); <br/>})("Jason");
</td></tr></table>
  </li>
          <li><span class='vym-branch-4' style='color:#000000' id='mc:0,bo:3,bo:14,bo:8,bo:1'>Execution Stack</span>
          <ul class="vym-list-ul-5">
            <li><span class='vym-branch-5' style='color:#000000' id='mc:0,bo:3,bo:14,bo:8,bo:1,bo:0'>Hits the function expression, create an object with code (anynomous function)</span>  </li>
            <li><span class='vym-branch-5' style='color:#000000' id='mc:0,bo:3,bo:14,bo:8,bo:1,bo:1'>Hits the parentheses that invokes the funciton</span>  </li>
            <li><span class='vym-branch-5' style='color:#000000' id='mc:0,bo:3,bo:14,bo:8,bo:1,bo:2'>Execution Conext of the anynomous function</span>
            <ul class="vym-list-ul-6">
              <li><span class='vym-branch-6' style='color:#000000' id='mc:0,bo:3,bo:14,bo:8,bo:1,bo:2,bo:0'>The parameter goes into the Execution Conext of the anyonmous function, it is
not touching the global enviroment.</span>  </li>
              <li><span class='vym-branch-6' style='color:#000000' id='mc:0,bo:3,bo:14,bo:8,bo:1,bo:2,bo:1'>This allows us to have 2 variable names in JavaScript; esecially when usng
frameworks.</span>  </li>
            </ul>  </li>
          </ul>  </li>
          <li><span class='vym-branch-4' style='color:#000000' id='mc:0,bo:3,bo:14,bo:8,bo:2'><a href="/home/juxley/Pictures/safeiife.png"><img src="flags/flag-url-16x16.png">Image</a></span>  </li>
          <li><span class='vym-branch-4' style='color:#000000' id='mc:0,bo:3,bo:14,bo:8,bo:3'>The entire framework wll be in an IIFE to prevent code from crashing into other
code</span>
          <ul class="vym-list-ul-5">
            <li><span class='vym-branch-5' style='color:#000000' id='mc:0,bo:3,bo:14,bo:8,bo:3,bo:0'>This will also create reuseable code</span>  </li>
          </ul>  </li>
          <li><span class='vym-branch-4' style='color:#000000' id='mc:0,bo:3,bo:14,bo:8,bo:4'>What if we want someting inthe global object?</span>
          <ul class="vym-list-ul-5">
            <li><span class='vym-branch-5' style='color:#000000' id='mc:0,bo:3,bo:14,bo:8,bo:4,bo:0'>Pass the global object (window) into the IIFE</span>
            <ul class="vym-list-ul-6">
              <li><span class='vym-branch-6' style='color:#000000' id='mc:0,bo:3,bo:14,bo:8,bo:4,bo:0,bo:0'>Example</span>
<table class="vym-note"><tr><td class="vym-note-flag">
<td>
<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.0//EN" "http://www.w3.org/TR/REC-html40/strict.dtd">

<p class="vym-note-paragraph"><span style=" color:#000000;">var greeting = &quot;Hola&quot;;</span></p>
<p class="vym-note-paragraph"><br /></p>
<p class="vym-note-paragraph"><span style=" color:#000000;">(functon (global, greetng) {</span></p>
<p class="vym-note-paragraph"><span style=" color:#000000;">    var greetng = 'Hello';</span></p>
<p class="vym-note-paragraph"><span style=" color:#000000;">    global.greetng = &quot;Hiya'';</span></p>
<p class="vym-note-paragraph"><br /></p>
<p class="vym-note-paragraph"><span style=" color:#000000;">})(window, &quot;Jason&quot;);</span></p>
</td></tr></table>
  </li>
            </ul>  </li>
          </ul>  </li>
        </ul>  </li>
      </ul>  </li>
      <li><span class='vym-branch-2' style='color:#000000' id='mc:0,bo:3,bo:15'>Understanding Closures</span>
      <ul class="vym-list-ul-3">
        <li><span class='vym-branch-3' style='color:#000000' id='mc:0,bo:3,bo:15,bo:0'>Example</span>
<table class="vym-note"><tr><td class="vym-note-flag">
<td>
function greet(whattosay) {<br/>  <br/>  return function(name) {<br/>    console.log(whattosay + " " + name);<br/>  }<br/>}<br/><br/>greet("Hi")("Jason");<br/><br/>let sayHey = greet("Hey");<br/>sayHey("Jason");
</td></tr></table>
  </li>
        <li><span class='vym-branch-3' style='color:#000000' id='mc:0,bo:3,bo:15,bo:1'>How does the sayhey varable still know the whattosay value?</span>  </li>
        <li><span class='vym-branch-3' style='color:#000000' id='mc:0,bo:3,bo:15,bo:2'>This is possible due to closures</span>  </li>
        <li><span class='vym-branch-3' style='color:#000000' id='mc:0,bo:3,bo:15,bo:3'>The greet function needs to &quot;end&quot; after the execution is complete. How does it
work?</span>
        <ul class="vym-list-ul-4">
          <li><span class='vym-branch-4' style='color:#000000' id='mc:0,bo:3,bo:15,bo:3,bo:0'>It's pop off the stack when greet finshes reading &quot;return&quot;</span>  </li>
        </ul>  </li>
        <li><span class='vym-branch-3' style='color:#000000' id='mc:0,bo:3,bo:15,bo:4'>The Execution Conext has a space in memory where the variables live.</span>
        <ul class="vym-list-ul-4">
          <li><span class='vym-branch-4' style='color:#000000' id='mc:0,bo:3,bo:15,bo:4,bo:0'>Using it cleans out, due to garabage collection</span>  </li>
          <li><span class='vym-branch-4' style='color:#000000' id='mc:0,bo:3,bo:15,bo:4,bo:1'>However, when the execution conext is complete, the vairables in memory are
still there</span>  </li>
        </ul>  </li>
        <li><span class='vym-branch-3' style='color:#000000' id='mc:0,bo:3,bo:15,bo:5'>When sayHey hits whatstosay, it'll go up the Scope Chain</span>
        <ul class="vym-list-ul-4">
          <li><span class='vym-branch-4' style='color:#000000' id='mc:0,bo:3,bo:15,bo:5,bo:0'>What's in memoery for the &quot;lost&quot; execution conext, the variable can still go
down the scope chain.</span>  </li>
          <li><span class='vym-branch-4' style='color:#000000' id='mc:0,bo:3,bo:15,bo:5,bo:1'>It's &quot;closed it&quot; the outer variables.</span>  </li>
          <li><span class='vym-branch-4' style='color:#000000' id='mc:0,bo:3,bo:15,bo:5,bo:2'>Closing in the variables that are needed.</span>  </li>
        </ul>  </li>
        <li><span class='vym-branch-3' style='color:#000000' id='mc:0,bo:3,bo:15,bo:6'><a href="/home/juxley/Pictures/closures.png"><img src="flags/flag-url-16x16.png">Clousres are a feature of JavaScript; it'll do it for you.</a></span>
        <ul class="vym-list-ul-4">
          <li><span class='vym-branch-4' style='color:#000000' id='mc:0,bo:3,bo:15,bo:6,bo:0'>&quot;You&quot; don't create a clousre</span>  </li>
        </ul>  </li>
        <li><span class='vym-branch-3' style='color:#000000' id='mc:0,bo:3,bo:15,bo:7'>You don't need to worry that the outer execution conext is running; it'll have
the variables within scope</span>  </li>
        <li><span class='vym-branch-3' style='color:#000000' id='mc:0,bo:3,bo:15,bo:8'>Classic Example</span>
<table class="vym-note"><tr><td class="vym-note-flag">
<td>
function buildFunctions() {<br/> <br/>  var arr = [];<br/>  <br/>  for (var i = 0; i &lt; 3; i++) {<br/>     arr.push(function() {<br/>        console.log(i);<br/>      });<br/>  }<br/>  return arr;<br/>}<br/><br/><br/>var fs = buildFunctions();<br/>fs[0]();<br/>fs[1]();<br/>fs[2]();
</td></tr></table>

        <ul class="vym-list-ul-4">
          <li><span class='vym-branch-4' style='color:#000000' id='mc:0,bo:3,bo:15,bo:8,bo:0'><a href="/home/juxley/Pictures/closure2.png"><img src="flags/flag-url-16x16.png">pic</a></span>  </li>
          <li><span class='vym-branch-4' style='color:#000000' id='mc:0,bo:3,bo:15,bo:8,bo:1'>What is the value of the PARENT, what is the value of the memory RIGHT NOW, when
the code is being executed.</span>  </li>
          <li><span class='vym-branch-4' style='color:#000000' id='mc:0,bo:3,bo:15,bo:8,bo:2'>Buildfunctions2</span>
<table class="vym-note"><tr><td class="vym-note-flag">
<td>
function buildIIFE() {<br/> <br/>  var arr = [];<br/>  <br/>  for (var i = 0; i &lt; 3; i++) {<br/>    let j = i; // ES6 that allows for a new part in memory per assigned variable<br/>     arr.push(function() {<br/>        console.log(j);<br/>      });<br/>  }<br/>  return arr;<br/>}<br/><br/><br/>var fs2 = buildIIFE();<br/>fs2[0]();<br/>fs2[1]();<br/>fs2[2]();<br/> 
</td></tr></table>
  </li>
          <li><span class='vym-branch-4' style='color:#000000' id='mc:0,bo:3,bo:15,bo:8,bo:3'>IIFE Version</span>
<table class="vym-note"><tr><td class="vym-note-flag">
<td>
<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.0//EN" "http://www.w3.org/TR/REC-html40/strict.dtd">

<p class="vym-note-paragraph"><span style=" font-family:'Droid Sans Mono,monospace,monospace,Droid Sans Fallback'; font-size:14px; color:#0000ff;">function</span><span style=" font-family:'Droid Sans Mono,monospace,monospace,Droid Sans Fallback'; font-size:14px; color:#000000;"> buildIIFE() {</span></pre>
<p class="vym-note-paragraph"><span style=" font-family:'Droid Sans Mono,monospace,monospace,Droid Sans Fallback'; font-size:14px; color:#000000;"> </span></pre>
<p class="vym-note-paragraph"><span style=" font-family:'Droid Sans Mono,monospace,monospace,Droid Sans Fallback'; font-size:14px; color:#000000;">  </span><span style=" font-family:'Droid Sans Mono,monospace,monospace,Droid Sans Fallback'; font-size:14px; color:#0000ff;">var</span><span style=" font-family:'Droid Sans Mono,monospace,monospace,Droid Sans Fallback'; font-size:14px; color:#000000;"> arr = [];</span></pre>
<p class="vym-note-paragraph"><span style=" font-family:'Droid Sans Mono,monospace,monospace,Droid Sans Fallback'; font-size:14px; color:#000000;">  </span></pre>
<p class="vym-note-paragraph"><span style=" font-family:'Droid Sans Mono,monospace,monospace,Droid Sans Fallback'; font-size:14px; color:#000000;">  </span><span style=" font-family:'Droid Sans Mono,monospace,monospace,Droid Sans Fallback'; font-size:14px; color:#0000ff;">for</span><span style=" font-family:'Droid Sans Mono,monospace,monospace,Droid Sans Fallback'; font-size:14px; color:#000000;"> (</span><span style=" font-family:'Droid Sans Mono,monospace,monospace,Droid Sans Fallback'; font-size:14px; color:#0000ff;">var</span><span style=" font-family:'Droid Sans Mono,monospace,monospace,Droid Sans Fallback'; font-size:14px; color:#000000;"> i = </span><span style=" font-family:'Droid Sans Mono,monospace,monospace,Droid Sans Fallback'; font-size:14px; color:#09885a;">0</span><span style=" font-family:'Droid Sans Mono,monospace,monospace,Droid Sans Fallback'; font-size:14px; color:#000000;">; i &lt; </span><span style=" font-family:'Droid Sans Mono,monospace,monospace,Droid Sans Fallback'; font-size:14px; color:#09885a;">3</span><span style=" font-family:'Droid Sans Mono,monospace,monospace,Droid Sans Fallback'; font-size:14px; color:#000000;">; i++) {</span></pre>
<p class="vym-note-paragraph"><span style=" font-family:'Droid Sans Mono,monospace,monospace,Droid Sans Fallback'; font-size:14px; color:#000000;">     arr.push(</span></pre>
<p class="vym-note-paragraph"><span style=" font-family:'Droid Sans Mono,monospace,monospace,Droid Sans Fallback'; font-size:14px; color:#000000;">       (</span><span style=" font-family:'Droid Sans Mono,monospace,monospace,Droid Sans Fallback'; font-size:14px; color:#0000ff;">function</span><span style=" font-family:'Droid Sans Mono,monospace,monospace,Droid Sans Fallback'; font-size:14px; color:#000000;">(j) {</span></pre>
<p class="vym-note-paragraph"><span style=" font-family:'Droid Sans Mono,monospace,monospace,Droid Sans Fallback'; font-size:14px; color:#000000;">          </span><span style=" font-family:'Droid Sans Mono,monospace,monospace,Droid Sans Fallback'; font-size:14px; color:#0000ff;">return</span><span style=" font-family:'Droid Sans Mono,monospace,monospace,Droid Sans Fallback'; font-size:14px; color:#000000;"> </span><span style=" font-family:'Droid Sans Mono,monospace,monospace,Droid Sans Fallback'; font-size:14px; color:#0000ff;">function</span><span style=" font-family:'Droid Sans Mono,monospace,monospace,Droid Sans Fallback'; font-size:14px; color:#000000;">() {</span></pre>
<p class="vym-note-paragraph"><span style=" font-family:'Droid Sans Mono,monospace,monospace,Droid Sans Fallback'; font-size:14px; color:#000000;">             console.log(j);</span></pre>
<p class="vym-note-paragraph"><span style=" font-family:'Droid Sans Mono,monospace,monospace,Droid Sans Fallback'; font-size:14px; color:#000000;">          }</span></pre>
<p class="vym-note-paragraph"><span style=" font-family:'Droid Sans Mono,monospace,monospace,Droid Sans Fallback'; font-size:14px; color:#000000;">          }(i)));</span></pre>
<p class="vym-note-paragraph"><span style=" font-family:'Droid Sans Mono,monospace,monospace,Droid Sans Fallback'; font-size:14px; color:#000000;">    }</span></pre>
<p class="vym-note-paragraph"><span style=" font-family:'Droid Sans Mono,monospace,monospace,Droid Sans Fallback'; font-size:14px; color:#000000;">  </span><span style=" font-family:'Droid Sans Mono,monospace,monospace,Droid Sans Fallback'; font-size:14px; color:#0000ff;">return</span><span style=" font-family:'Droid Sans Mono,monospace,monospace,Droid Sans Fallback'; font-size:14px; color:#000000;"> arr;</span></pre>
<p class="vym-note-paragraph"><span style=" font-family:'Droid Sans Mono,monospace,monospace,Droid Sans Fallback'; font-size:14px; color:#000000;">}</span></pre>
<p class="vym-note-paragraph"><span style=" font-family:'Droid Sans Mono,monospace,monospace,Droid Sans Fallback'; font-size:14px; color:#000000;"><br /></span></p>
<p class="vym-note-paragraph"><span style=" font-family:'Droid Sans Mono,monospace,monospace,Droid Sans Fallback'; font-size:14px; color:#0000ff;">var</span><span style=" font-family:'Droid Sans Mono,monospace,monospace,Droid Sans Fallback'; font-size:14px; color:#000000;"> fs2 = buildIIFE();</span></pre>
<p class="vym-note-paragraph"><span style=" font-family:'Droid Sans Mono,monospace,monospace,Droid Sans Fallback'; font-size:14px; color:#000000;">fs2[</span><span style=" font-family:'Droid Sans Mono,monospace,monospace,Droid Sans Fallback'; font-size:14px; color:#09885a;">0</span><span style=" font-family:'Droid Sans Mono,monospace,monospace,Droid Sans Fallback'; font-size:14px; color:#000000;">]();</span></pre>
<p class="vym-note-paragraph"><span style=" font-family:'Droid Sans Mono,monospace,monospace,Droid Sans Fallback'; font-size:14px; color:#000000;">fs2[</span><span style=" font-family:'Droid Sans Mono,monospace,monospace,Droid Sans Fallback'; font-size:14px; color:#09885a;">1</span><span style=" font-family:'Droid Sans Mono,monospace,monospace,Droid Sans Fallback'; font-size:14px; color:#000000;">]();</span></pre>
<p class="vym-note-paragraph"><span style=" font-family:'Droid Sans Mono,monospace,monospace,Droid Sans Fallback'; font-size:14px; color:#000000;">fs2[</span><span style=" font-family:'Droid Sans Mono,monospace,monospace,Droid Sans Fallback'; font-size:14px; color:#09885a;">2</span><span style=" font-family:'Droid Sans Mono,monospace,monospace,Droid Sans Fallback'; font-size:14px; color:#000000;">]();</span></pre>
<p class="vym-note-paragraph"> </p>
</td></tr></table>
  </li>
        </ul>  </li>
        <li><span class='vym-branch-3' style='color:#000000' id='mc:0,bo:3,bo:15,bo:9'>Framework Aside: Function Factories</span>
        <ul class="vym-list-ul-4">
          <li><span class='vym-branch-4' style='color:#000000' id='mc:0,bo:3,bo:15,bo:9,bo:0'>Clousres give us the ability to have set parameters in a function; building it
off another function</span>  </li>
          <li><span class='vym-branch-4' style='color:#000000' id='mc:0,bo:3,bo:15,bo:9,bo:1'>When calling the built funciton; the orginal parameter passed through, doesn't
have access to the parameter</span>  </li>
          <li><span class='vym-branch-4' style='color:#000000' id='mc:0,bo:3,bo:15,bo:9,bo:2'>Example</span>
<table class="vym-note"><tr><td class="vym-note-flag">
<td>
function makeGreeting(lang) {<br/>  return function(first, last) {<br/>    if (lang === "en") {<br/> 			console.log("Hello " + first + " " + last")<br/>    }<br/>    <br/>		if (lang === "es") {<br/> 			console.log("Hola " + first + " " + last")<br/>    }<br/>  }<br/>}<br/><br/>var greetEnglish = makeGreeting("en")<br/><br/>var greetSpanish = makeGreeting("es")<br/><br/>greetEnglish("Jason", "Ribble")<br/>greetSpanish("Javier", "Ribblo")
</td></tr></table>
  </li>
          <li><span class='vym-branch-4' style='color:#000000' id='mc:0,bo:3,bo:15,bo:9,bo:3'>When calling the function twice, they aren't in the same memeory space since
they are in another execution context</span>  </li>
          <li><span class='vym-branch-4' style='color:#000000' id='mc:0,bo:3,bo:15,bo:9,bo:4'><a href="/home/juxley/Pictures/closures_factorybuilding.png"><img src="flags/flag-url-16x16.png">Image</a></span>  </li>
        </ul>  </li>
        <li><span class='vym-branch-3' style='color:#000000' id='mc:0,bo:3,bo:15,bo:10'>Closures and CallbacksC</span>
        <ul class="vym-list-ul-4">
          <li><span class='vym-branch-4' style='color:#000000' id='mc:0,bo:3,bo:15,bo:10,bo:0'>Example</span>
<table class="vym-note"><tr><td class="vym-note-flag">
<td>
function sayHiLater() {<br/>   var greet = "hi"<br/><br/>	 setTimeOut(function() {<br/>        console.log(greet)<br/>    }, 3000)<br/><br/>}<br/><br/>sayHiLater()
</td></tr></table>
  </li>
          <li><span class='vym-branch-4' style='color:#000000' id='mc:0,bo:3,bo:15,bo:10,bo:1'>We are passing a function as a variable (first class function)</span>  </li>
          <li><span class='vym-branch-4' style='color:#000000' id='mc:0,bo:3,bo:15,bo:10,bo:2'>We used a function expression (declaring a function on the fly)</span>  </li>
          <li><span class='vym-branch-4' style='color:#000000' id='mc:0,bo:3,bo:15,bo:10,bo:3'>We have greet as clousres</span>  </li>
          <li><span class='vym-branch-4' style='color:#000000' id='mc:0,bo:3,bo:15,bo:10,bo:4'>All of long you've used clousres and first call functoin :D</span>  </li>
          <li><span class='vym-branch-4' style='color:#000000' id='mc:0,bo:3,bo:15,bo:10,bo:5'>Callback; when you're done working, call the function the other function for me
when yo'ure odne</span>  </li>
          <li><span class='vym-branch-4' style='color:#000000' id='mc:0,bo:3,bo:15,bo:10,bo:6'>Callback function: a function given to another function to be run when the other
function is finished</span>
          <ul class="vym-list-ul-5">
            <li><span class='vym-branch-5' style='color:#000000' id='mc:0,bo:3,bo:15,bo:10,bo:6,bo:0'>The function invoked &quot;callsback&quot; by calling the function given when finished</span>  </li>
            <li><span class='vym-branch-5' style='color:#000000' id='mc:0,bo:3,bo:15,bo:10,bo:6,bo:1'>Example Callback</span>
<table class="vym-note"><tr><td class="vym-note-flag">
<td>
<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.0//EN" "http://www.w3.org/TR/REC-html40/strict.dtd">

<p class="vym-note-paragraph"><span style=" color:#000000;">function tellMeWhenDone(callback) {</span></p>
<p class="vym-note-paragraph"><span style=" color:#000000;">  let a= 20000 // work...</span></p>
<p class="vym-note-paragraph"><span style=" color:#000000;">  let b = 30000/ work...</span></p>
<p class="vym-note-paragraph"><br /></p>
<p class="vym-note-paragraph"><span style=" color:#000000;">  callback()</span></p>
<p class="vym-note-paragraph"><span style=" color:#000000;">}</span></p>
<p class="vym-note-paragraph"><br /></p>
<p class="vym-note-paragraph"><span style=" color:#000000;">tellMeWhenDone(function() {</span></p>
<p class="vym-note-paragraph"><span style=" color:#000000;">  console.log(&quot;I'm done&quot;)</span></p>
<p class="vym-note-paragraph"><span style=" color:#000000;">})</span></p>
</td></tr></table>
  </li>
          </ul>  </li>
        </ul>  </li>
      </ul>  </li>
      <li><span class='vym-branch-2' style='color:#000000' id='mc:0,bo:3,bo:16'>call(), apply() bind()</span>
      <ul class="vym-list-ul-3">
        <li><span class='vym-branch-3' style='color:#000000' id='mc:0,bo:3,bo:16,bo:0'>Controlling what the &quot;this&quot; variable can be?</span>
        <ul class="vym-list-ul-4">
          <li><span class='vym-branch-4' style='color:#000000' id='mc:0,bo:3,bo:16,bo:0,bo:0'>That's what these function can do</span>  </li>
        </ul>  </li>
        <li><span class='vym-branch-3' style='color:#000000' id='mc:0,bo:3,bo:16,bo:1'>All function get special methods</span>
        <ul class="vym-list-ul-4">
          <li><span class='vym-branch-4' style='color:#000000' id='mc:0,bo:3,bo:16,bo:1,bo:0'>bind</span>
<table class="vym-note"><tr><td class="vym-note-flag">
<td>
let person = {<br/>  first: "Jason",<br/>  last: "Ribble",<br/>  getFullName: functino() {<br/>    console.log(this.first + " " + this.last)<br/>  }<br/>}<br/><br/> //Will not work as is since _this_ points to logName<br/><br/>var logName = function(lang1, lang2) {<br/>  console.log("Logged: " + this.getFullName)<br/>}//.bind(person) we can do it on the fly<br/><br/><br/>var logPerson = logName.bind(person)<br/>// This will work since bind points _this_ to the person object, which has the<br/>getFullName method<br/><br/>logName()<br/>logPerson()
</td></tr></table>

          <ul class="vym-list-ul-5">
            <li><span class='vym-branch-5' style='color:#000000' id='mc:0,bo:3,bo:16,bo:1,bo:0,bo:0'>Creates a copy, and passing what we want the &quot;this vairable&quot; is</span>  </li>
            <li><span class='vym-branch-5' style='color:#000000' id='mc:0,bo:3,bo:16,bo:1,bo:0,bo:1'>Doesn't call it</span>  </li>
          </ul>  </li>
          <li><span class='vym-branch-4' style='color:#000000' id='mc:0,bo:3,bo:16,bo:1,bo:1'>call</span>
<table class="vym-note"><tr><td class="vym-note-flag">
<td>
logName.call(person, "en", "es")
</td></tr></table>

          <ul class="vym-list-ul-5">
            <li><span class='vym-branch-5' style='color:#000000' id='mc:0,bo:3,bo:16,bo:1,bo:1,bo:0'>logName.call invokes the function, yet we can pass  the &quot;this&quot; variable, and
pass in parameters</span>  </li>
          </ul>  </li>
          <li><span class='vym-branch-4' style='color:#000000' id='mc:0,bo:3,bo:16,bo:1,bo:2'>apply</span>
<table class="vym-note"><tr><td class="vym-note-flag">
<td>
logName.apply(person, [en, es])
</td></tr></table>

          <ul class="vym-list-ul-5">
            <li><span class='vym-branch-5' style='color:#000000' id='mc:0,bo:3,bo:16,bo:1,bo:2,bo:0'>aSame as call, yet you'll have to use arrays; which would help with mathmatics</span>  </li>
            <li><span class='vym-branch-5' style='color:#000000' id='mc:0,bo:3,bo:16,bo:1,bo:2,bo:1'>Can also use a IIFE</span>
<table class="vym-note"><tr><td class="vym-note-flag">
<td>
(function(blah) {<br/>  obj.method(blah)<br/>}).call(obj, blahParm)
</td></tr></table>

            <ul class="vym-list-ul-6">
              <li><span class='vym-branch-6' style='color:#000000' id='mc:0,bo:3,bo:16,bo:1,bo:2,bo:1,bo:0'>When would we use this?</span>  </li>
              <li><span class='vym-branch-6' style='color:#000000' id='mc:0,bo:3,bo:16,bo:1,bo:2,bo:1,bo:1'>Function Borrowing</span>
<table class="vym-note"><tr><td class="vym-note-flag">
<td>
var person2 = {<br/>  first: "Clark", <br/>  last: "Kozak"<br/>}<br/><br/>person.getFullName.apply(person2)
</td></tr></table>

              <ul class="vym-list-ul-7">
                <li><span class='vym-branch-7' style='color:#000000' id='mc:0,bo:3,bo:16,bo:1,bo:2,bo:1,bo:1,bo:0'>We borrwed a functoin and used the person2 object</span>  </li>
              </ul>  </li>
              <li><span class='vym-branch-6' style='color:#000000' id='mc:0,bo:3,bo:16,bo:1,bo:2,bo:1,bo:2'>Function Currying (bind)</span>
<table class="vym-note"><tr><td class="vym-note-flag">
<td>
function mult(a , b) {<br/>  return a * b<br/>}<br/><br/>let multBy2 = mult.bind(this, 2) // 2 will be the permenant value of the a<br/>variable<br/><br/><br/><br/>/*<br/>A "normal" example will look like this<br/><br/>function multBy2 (b) {<br/>  let a = 2<br/>  return a * b<br/>}<br/><br/><br/>*/
</td></tr></table>

              <ul class="vym-list-ul-7">
                <li><span class='vym-branch-7' style='color:#000000' id='mc:0,bo:3,bo:16,bo:1,bo:2,bo:1,bo:2,bo:0'>Sets permant values of the parameters for the copied (new) funciton)</span>  </li>
                <li><span class='vym-branch-7' style='color:#000000' id='mc:0,bo:3,bo:16,bo:1,bo:2,bo:1,bo:2,bo:1'>BWA: function currying: building a copy of a function yet with set parametrs,
good for mathmatics</span>  </li>
              </ul>  </li>
            </ul>  </li>
          </ul>  </li>
        </ul>  </li>
        <li><span class='vym-branch-3' style='color:#000000' id='mc:0,bo:3,bo:16,bo:2'><a href="/home/juxley/Pictures/functionbreakdone.png"><img src="flags/flag-url-16x16.png">Image</a></span>  </li>
      </ul>  </li>
      <li><span class='vym-branch-2' style='color:#000000' id='mc:0,bo:3,bo:17'>Functional Programming</span>
      <ul class="vym-list-ul-3">
        <li><span class='vym-branch-3' style='color:#000000' id='mc:0,bo:3,bo:17,bo:0'>JavaScript looks like other functional programming</span>
        <ul class="vym-list-ul-4">
          <li><span class='vym-branch-4' style='color:#000000' id='mc:0,bo:3,bo:17,bo:0,bo:0'></span>  </li>
          <li><span class='vym-branch-4' style='color:#000000' id='mc:0,bo:3,bo:17,bo:0,bo:1'></span>  </li>
        </ul>  </li>
        <li><span class='vym-branch-3' style='color:#000000' id='mc:0,bo:3,bo:17,bo:1'>Think and code in terms of functions</span>  </li>
        <li><span class='vym-branch-3' style='color:#000000' id='mc:0,bo:3,bo:17,bo:2'>Introduces a new approach of thinking in programming due to first class
functions</span>  </li>
        <li><span class='vym-branch-3' style='color:#000000' id='mc:0,bo:3,bo:17,bo:3'>mapForEach example</span>
<table class="vym-note"><tr><td class="vym-note-flag">
<td>
<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.0//EN" "http://www.w3.org/TR/REC-html40/strict.dtd">

<p class="vym-note-paragraph"><span style=" font-family:'Droid Sans Mono,monospace,monospace,Droid Sans Fallback'; font-size:14px; color:#0000ff;">function</span><span style=" font-family:'Droid Sans Mono,monospace,monospace,Droid Sans Fallback'; font-size:14px; color:#000000;"> mapForEach(arr, fn) {</span></p>
<p class="vym-note-paragraph"><span style=" font-family:'Droid Sans Mono,monospace,monospace,Droid Sans Fallback'; font-size:14px; color:#000000;">  </span><span style=" font-family:'Droid Sans Mono,monospace,monospace,Droid Sans Fallback'; font-size:14px; color:#0000ff;">var</span><span style=" font-family:'Droid Sans Mono,monospace,monospace,Droid Sans Fallback'; font-size:14px; color:#000000;"> newArr = []</span></p>
<p class="vym-note-paragraph"><span style=" font-family:'Droid Sans Mono,monospace,monospace,Droid Sans Fallback'; font-size:14px; color:#000000;">  </span><span style=" font-family:'Droid Sans Mono,monospace,monospace,Droid Sans Fallback'; font-size:14px; color:#0000ff;">for</span><span style=" font-family:'Droid Sans Mono,monospace,monospace,Droid Sans Fallback'; font-size:14px; color:#000000;"> (</span><span style=" font-family:'Droid Sans Mono,monospace,monospace,Droid Sans Fallback'; font-size:14px; color:#0000ff;">var</span><span style=" font-family:'Droid Sans Mono,monospace,monospace,Droid Sans Fallback'; font-size:14px; color:#000000;"> i = </span><span style=" font-family:'Droid Sans Mono,monospace,monospace,Droid Sans Fallback'; font-size:14px; color:#09885a;">0</span><span style=" font-family:'Droid Sans Mono,monospace,monospace,Droid Sans Fallback'; font-size:14px; color:#000000;">; i &lt; arr.length; i++) {</span></p>
<p class="vym-note-paragraph"><span style=" font-family:'Droid Sans Mono,monospace,monospace,Droid Sans Fallback'; font-size:14px; color:#000000;">    newArr.push(</span></p>
<p class="vym-note-paragraph"><span style=" font-family:'Droid Sans Mono,monospace,monospace,Droid Sans Fallback'; font-size:14px; color:#000000;">      fn(arr[i])</span></p>
<p class="vym-note-paragraph"><span style=" font-family:'Droid Sans Mono,monospace,monospace,Droid Sans Fallback'; font-size:14px; color:#000000;">    )</span></p>
<p class="vym-note-paragraph"><span style=" font-family:'Droid Sans Mono,monospace,monospace,Droid Sans Fallback'; font-size:14px; color:#000000;">  }</span></p>
<p class="vym-note-paragraph"><span style=" font-family:'Droid Sans Mono,monospace,monospace,Droid Sans Fallback'; font-size:14px; color:#000000;">  </span><span style=" font-family:'Droid Sans Mono,monospace,monospace,Droid Sans Fallback'; font-size:14px; color:#0000ff;">return</span><span style=" font-family:'Droid Sans Mono,monospace,monospace,Droid Sans Fallback'; font-size:14px; color:#000000;"> newArr</span></p>
<p class="vym-note-paragraph"><span style=" font-family:'Droid Sans Mono,monospace,monospace,Droid Sans Fallback'; font-size:14px; color:#000000;">}</span></p>
<p class="vym-note-paragraph"><span style=" font-family:'Droid Sans Mono,monospace,monospace,Droid Sans Fallback'; font-size:14px; color:#000000;"><br /></span></p>
<p class="vym-note-paragraph"><span style=" font-family:'Droid Sans Mono,monospace,monospace,Droid Sans Fallback'; font-size:14px; color:#0000ff;">var</span><span style=" font-family:'Droid Sans Mono,monospace,monospace,Droid Sans Fallback'; font-size:14px; color:#000000;"> arr1 = [</span><span style=" font-family:'Droid Sans Mono,monospace,monospace,Droid Sans Fallback'; font-size:14px; color:#09885a;">1</span><span style=" font-family:'Droid Sans Mono,monospace,monospace,Droid Sans Fallback'; font-size:14px; color:#000000;">, </span><span style=" font-family:'Droid Sans Mono,monospace,monospace,Droid Sans Fallback'; font-size:14px; color:#09885a;">2</span><span style=" font-family:'Droid Sans Mono,monospace,monospace,Droid Sans Fallback'; font-size:14px; color:#000000;">, </span><span style=" font-family:'Droid Sans Mono,monospace,monospace,Droid Sans Fallback'; font-size:14px; color:#09885a;">3</span><span style=" font-family:'Droid Sans Mono,monospace,monospace,Droid Sans Fallback'; font-size:14px; color:#000000;">]</span></p>
<p class="vym-note-paragraph"><span style=" font-family:'Droid Sans Mono,monospace,monospace,Droid Sans Fallback'; font-size:14px; color:#000000;"><br /></span></p>
<p class="vym-note-paragraph"><span style=" font-family:'Droid Sans Mono,monospace,monospace,Droid Sans Fallback'; font-size:14px; color:#0000ff;">var</span><span style=" font-family:'Droid Sans Mono,monospace,monospace,Droid Sans Fallback'; font-size:14px; color:#000000;"> arr2 = mapForEach(arr1, </span><span style=" font-family:'Droid Sans Mono,monospace,monospace,Droid Sans Fallback'; font-size:14px; color:#0000ff;">function</span><span style=" font-family:'Droid Sans Mono,monospace,monospace,Droid Sans Fallback'; font-size:14px; color:#000000;">(item) {</span></p>
<p class="vym-note-paragraph"><span style=" font-family:'Droid Sans Mono,monospace,monospace,Droid Sans Fallback'; font-size:14px; color:#000000;">  </span><span style=" font-family:'Droid Sans Mono,monospace,monospace,Droid Sans Fallback'; font-size:14px; color:#0000ff;">return</span><span style=" font-family:'Droid Sans Mono,monospace,monospace,Droid Sans Fallback'; font-size:14px; color:#000000;"> item * </span><span style=" font-family:'Droid Sans Mono,monospace,monospace,Droid Sans Fallback'; font-size:14px; color:#09885a;">2</span></p>
<p class="vym-note-paragraph"><span style=" font-family:'Droid Sans Mono,monospace,monospace,Droid Sans Fallback'; font-size:14px; color:#000000;">})</span></p>
<p class="vym-note-paragraph"><span style=" font-family:'Droid Sans Mono,monospace,monospace,Droid Sans Fallback'; font-size:14px; color:#000000;"><br /></span></p>
<p class="vym-note-paragraph"><span style=" font-family:'Droid Sans Mono,monospace,monospace,Droid Sans Fallback'; font-size:14px; color:#0000ff;">var</span><span style=" font-family:'Droid Sans Mono,monospace,monospace,Droid Sans Fallback'; font-size:14px; color:#000000;"> arr3 = mapForEach(arr1, </span><span style=" font-family:'Droid Sans Mono,monospace,monospace,Droid Sans Fallback'; font-size:14px; color:#0000ff;">function</span><span style=" font-family:'Droid Sans Mono,monospace,monospace,Droid Sans Fallback'; font-size:14px; color:#000000;">(item) {</span></p>
<p class="vym-note-paragraph"><span style=" font-family:'Droid Sans Mono,monospace,monospace,Droid Sans Fallback'; font-size:14px; color:#000000;">  </span><span style=" font-family:'Droid Sans Mono,monospace,monospace,Droid Sans Fallback'; font-size:14px; color:#0000ff;">return</span><span style=" font-family:'Droid Sans Mono,monospace,monospace,Droid Sans Fallback'; font-size:14px; color:#000000;"> item &gt; </span><span style=" font-family:'Droid Sans Mono,monospace,monospace,Droid Sans Fallback'; font-size:14px; color:#09885a;">2</span></p>
<p class="vym-note-paragraph"><span style=" font-family:'Droid Sans Mono,monospace,monospace,Droid Sans Fallback'; font-size:14px; color:#000000;">})</span></p>
<p class="vym-note-paragraph"><span style=" font-family:'Droid Sans Mono,monospace,monospace,Droid Sans Fallback'; font-size:14px; color:#000000;"><br /></span></p>
<p class="vym-note-paragraph"><span style=" font-family:'Droid Sans Mono,monospace,monospace,Droid Sans Fallback'; font-size:14px; color:#0000ff;">var</span><span style=" font-family:'Droid Sans Mono,monospace,monospace,Droid Sans Fallback'; font-size:14px; color:#000000;"> checkPastLimit = </span><span style=" font-family:'Droid Sans Mono,monospace,monospace,Droid Sans Fallback'; font-size:14px; color:#0000ff;">function</span><span style=" font-family:'Droid Sans Mono,monospace,monospace,Droid Sans Fallback'; font-size:14px; color:#000000;">(limiter, item) {</span></p>
<p class="vym-note-paragraph"><span style=" font-family:'Droid Sans Mono,monospace,monospace,Droid Sans Fallback'; font-size:14px; color:#000000;">  </span><span style=" font-family:'Droid Sans Mono,monospace,monospace,Droid Sans Fallback'; font-size:14px; color:#0000ff;">return</span><span style=" font-family:'Droid Sans Mono,monospace,monospace,Droid Sans Fallback'; font-size:14px; color:#000000;"> item &gt; limiter</span></p>
<p class="vym-note-paragraph"><span style=" font-family:'Droid Sans Mono,monospace,monospace,Droid Sans Fallback'; font-size:14px; color:#000000;">}</span></p>
<p class="vym-note-paragraph"><span style=" font-family:'Droid Sans Mono,monospace,monospace,Droid Sans Fallback'; font-size:14px; color:#000000;"><br /></span></p>
<p class="vym-note-paragraph"><span style=" font-family:'Droid Sans Mono,monospace,monospace,Droid Sans Fallback'; font-size:14px; color:#aaaaaa;">// how can we pass checkPastLimit to mapForEach? We can use bind</span></p>
<p class="vym-note-paragraph"><span style=" font-family:'Droid Sans Mono,monospace,monospace,Droid Sans Fallback'; font-size:14px; color:#000000;"><br /></span></p>
<p class="vym-note-paragraph"><span style=" font-family:'Droid Sans Mono,monospace,monospace,Droid Sans Fallback'; font-size:14px; color:#0000ff;">var</span><span style=" font-family:'Droid Sans Mono,monospace,monospace,Droid Sans Fallback'; font-size:14px; color:#000000;"> arr4 = mapForEach(arr1, checkPastLimit.bind(</span><span style=" font-family:'Droid Sans Mono,monospace,monospace,Droid Sans Fallback'; font-size:14px; color:#0000ff;">this</span><span style=" font-family:'Droid Sans Mono,monospace,monospace,Droid Sans Fallback'; font-size:14px; color:#000000;">, </span><span style=" font-family:'Droid Sans Mono,monospace,monospace,Droid Sans Fallback'; font-size:14px; color:#09885a;">1</span><span style=" font-family:'Droid Sans Mono,monospace,monospace,Droid Sans Fallback'; font-size:14px; color:#000000;">))</span></p>
<p class="vym-note-paragraph"><span style=" font-family:'Droid Sans Mono,monospace,monospace,Droid Sans Fallback'; font-size:14px; color:#000000;"><br /></span></p>
<p class="vym-note-paragraph"><span style=" font-family:'Droid Sans Mono,monospace,monospace,Droid Sans Fallback'; font-size:14px; color:#aaaaaa;">//how can we have checkPastLimit only accept a limiter?)</span></p>
<p class="vym-note-paragraph"><span style=" font-family:'Droid Sans Mono,monospace,monospace,Droid Sans Fallback'; font-size:14px; color:#000000;"><br /></span></p>
<p class="vym-note-paragraph"><span style=" font-family:'Droid Sans Mono,monospace,monospace,Droid Sans Fallback'; font-size:14px; color:#0000ff;">var</span><span style=" font-family:'Droid Sans Mono,monospace,monospace,Droid Sans Fallback'; font-size:14px; color:#000000;"> checkForThisLimit = </span><span style=" font-family:'Droid Sans Mono,monospace,monospace,Droid Sans Fallback'; font-size:14px; color:#0000ff;">function</span><span style=" font-family:'Droid Sans Mono,monospace,monospace,Droid Sans Fallback'; font-size:14px; color:#000000;">(limit) {</span></p>
<p class="vym-note-paragraph"><span style=" font-family:'Droid Sans Mono,monospace,monospace,Droid Sans Fallback'; font-size:14px; color:#000000;">  </span><span style=" font-family:'Droid Sans Mono,monospace,monospace,Droid Sans Fallback'; font-size:14px; color:#0000ff;">return</span><span style=" font-family:'Droid Sans Mono,monospace,monospace,Droid Sans Fallback'; font-size:14px; color:#000000;"> checkPastLimit.bind(</span><span style=" font-family:'Droid Sans Mono,monospace,monospace,Droid Sans Fallback'; font-size:14px; color:#0000ff;">this</span><span style=" font-family:'Droid Sans Mono,monospace,monospace,Droid Sans Fallback'; font-size:14px; color:#000000;">, limit) </span><span style=" font-family:'Droid Sans Mono,monospace,monospace,Droid Sans Fallback'; font-size:14px; color:#aaaaaa;">// this is how I did it</span></p>
<p class="vym-note-paragraph"><span style=" font-family:'Droid Sans Mono,monospace,monospace,Droid Sans Fallback'; font-size:14px; color:#000000;">}</span></p>
<p class="vym-note-paragraph"><span style=" font-family:'Droid Sans Mono,monospace,monospace,Droid Sans Fallback'; font-size:14px; color:#000000;"><br /></span></p>
<p class="vym-note-paragraph"><span style=" font-family:'Droid Sans Mono,monospace,monospace,Droid Sans Fallback'; font-size:14px; color:#aaaaaa;">//This is how he did it</span></p>
<p class="vym-note-paragraph"><span style=" font-family:'Droid Sans Mono,monospace,monospace,Droid Sans Fallback'; font-size:14px; color:#0000ff;">var</span><span style=" font-family:'Droid Sans Mono,monospace,monospace,Droid Sans Fallback'; font-size:14px; color:#000000;"> checkPastLimitSimplified = </span><span style=" font-family:'Droid Sans Mono,monospace,monospace,Droid Sans Fallback'; font-size:14px; color:#0000ff;">function</span><span style=" font-family:'Droid Sans Mono,monospace,monospace,Droid Sans Fallback'; font-size:14px; color:#000000;">(limit) {</span></p>
<p class="vym-note-paragraph"><span style=" font-family:'Droid Sans Mono,monospace,monospace,Droid Sans Fallback'; font-size:14px; color:#000000;">  </span><span style=" font-family:'Droid Sans Mono,monospace,monospace,Droid Sans Fallback'; font-size:14px; color:#0000ff;">return</span><span style=" font-family:'Droid Sans Mono,monospace,monospace,Droid Sans Fallback'; font-size:14px; color:#000000;"> </span><span style=" font-family:'Droid Sans Mono,monospace,monospace,Droid Sans Fallback'; font-size:14px; color:#0000ff;">function</span><span style=" font-family:'Droid Sans Mono,monospace,monospace,Droid Sans Fallback'; font-size:14px; color:#000000;">(limit, item) {</span></p>
<p class="vym-note-paragraph"><span style=" font-family:'Droid Sans Mono,monospace,monospace,Droid Sans Fallback'; font-size:14px; color:#000000;">    </span><span style=" font-family:'Droid Sans Mono,monospace,monospace,Droid Sans Fallback'; font-size:14px; color:#0000ff;">return</span><span style=" font-family:'Droid Sans Mono,monospace,monospace,Droid Sans Fallback'; font-size:14px; color:#000000;"> item &gt; limit</span></p>
<p class="vym-note-paragraph"><span style=" font-family:'Droid Sans Mono,monospace,monospace,Droid Sans Fallback'; font-size:14px; color:#000000;">  }.bind(</span><span style=" font-family:'Droid Sans Mono,monospace,monospace,Droid Sans Fallback'; font-size:14px; color:#0000ff;">this</span><span style=" font-family:'Droid Sans Mono,monospace,monospace,Droid Sans Fallback'; font-size:14px; color:#000000;">, limit)</span></p>
<p class="vym-note-paragraph"><span style=" font-family:'Droid Sans Mono,monospace,monospace,Droid Sans Fallback'; font-size:14px; color:#000000;">}</span></p>
<p class="vym-note-paragraph"><span style=" font-family:'Droid Sans Mono,monospace,monospace,Droid Sans Fallback'; font-size:14px; color:#000000;"><br /></span></p>
<p class="vym-note-paragraph"><span style=" font-family:'Droid Sans Mono,monospace,monospace,Droid Sans Fallback'; font-size:14px; color:#0000ff;">var</span><span style=" font-family:'Droid Sans Mono,monospace,monospace,Droid Sans Fallback'; font-size:14px; color:#000000;"> arr5 = checkForThisLimit(</span><span style=" font-family:'Droid Sans Mono,monospace,monospace,Droid Sans Fallback'; font-size:14px; color:#09885a;">1</span><span style=" font-family:'Droid Sans Mono,monospace,monospace,Droid Sans Fallback'; font-size:14px; color:#000000;">)</span></p>
<p class="vym-note-paragraph"><span style=" font-family:'Droid Sans Mono,monospace,monospace,Droid Sans Fallback'; font-size:14px; color:#0000ff;">var</span><span style=" font-family:'Droid Sans Mono,monospace,monospace,Droid Sans Fallback'; font-size:14px; color:#000000;"> arr6 = checkPastLimitSimplified(</span><span style=" font-family:'Droid Sans Mono,monospace,monospace,Droid Sans Fallback'; font-size:14px; color:#09885a;">1</span><span style=" font-family:'Droid Sans Mono,monospace,monospace,Droid Sans Fallback'; font-size:14px; color:#000000;">)</span></p>
<p class="vym-note-paragraph"><span style=" font-family:'Droid Sans Mono,monospace,monospace,Droid Sans Fallback'; font-size:14px; color:#000000;"><br /><br /></span></p>
<p class="vym-note-paragraph"><span style=" font-family:'Droid Sans Mono,monospace,monospace,Droid Sans Fallback'; font-size:14px; color:#000000;">console.log({arr1, arr2, arr3, arr4, arr5, arr6})</span></p>
<p class="vym-note-paragraph"> </p>
</td></tr></table>

        <ul class="vym-list-ul-4">
          <li><span class='vym-branch-4' style='color:#000000' id='mc:0,bo:3,bo:17,bo:3,bo:0'>Telling the parameter function to do the work to each item</span>  </li>
          <li><span class='vym-branch-4' style='color:#000000' id='mc:0,bo:3,bo:17,bo:3,bo:1'>Clean, easy to read, consie, REUSEABLE code</span>  </li>
        </ul>  </li>
        <li><span class='vym-branch-3' style='color:#000000' id='mc:0,bo:3,bo:17,bo:4'>In functional programming, don't mutated data.</span>
        <ul class="vym-list-ul-4">
          <li><span class='vym-branch-4' style='color:#000000' id='mc:0,bo:3,bo:17,bo:4,bo:0'>Return something new</span>  </li>
          <li><span class='vym-branch-4' style='color:#000000' id='mc:0,bo:3,bo:17,bo:4,bo:1'>Mutated the data early</span>  </li>
          <li><span class='vym-branch-4' style='color:#000000' id='mc:0,bo:3,bo:17,bo:4,bo:2'>It could become an entire course</span>  </li>
          <li><span class='vym-branch-4' style='color:#000000' id='mc:0,bo:3,bo:17,bo:4,bo:3'>This is what take JavaScript to the next level</span>  </li>
        </ul>  </li>
        <li><span class='vym-branch-3' style='color:#000000' id='mc:0,bo:3,bo:17,bo:5'>Part 2</span>
        <ul class="vym-list-ul-4">
          <li><span class='vym-branch-4' style='color:#000000' id='mc:0,bo:3,bo:17,bo:5,bo:0'><a href="http://underscorejs.org"><img src="flags/flag-url-16x16.png">underscore.js library</a></span>
          <ul class="vym-list-ul-5">
            <li><span class='vym-branch-5' style='color:#000000' id='mc:0,bo:3,bo:17,bo:5,bo:0,bo:0'></span>  </li>
          </ul>  </li>
          <li><span class='vym-branch-4' style='color:#000000' id='mc:0,bo:3,bo:17,bo:5,bo:1'>An Open Source Eduation</span>
          <ul class="vym-list-ul-5">
            <li><span class='vym-branch-5' style='color:#000000' id='mc:0,bo:3,bo:17,bo:5,bo:1,bo:0'>Read and Write good JavaScript</span>  </li>
            <li><span class='vym-branch-5' style='color:#000000' id='mc:0,bo:3,bo:17,bo:5,bo:1,bo:1'>You'll need to understand the foundation of JavaScript</span>  </li>
          </ul>  </li>
          <li><span class='vym-branch-4' style='color:#000000' id='mc:0,bo:3,bo:17,bo:5,bo:2'>underscore.js example</span>
<table class="vym-note"><tr><td class="vym-note-flag">
<td>
var arr6 = _.map([1, 2, 3], function(item) {return item * 3})<br/>console.log(arr6)<br/><br/>var arr7 = _.filter([2, 3, 4, 5, 6 ,7], function(item) { return item % 2 === 0<br/>})<br/>console.log(arr7)
</td></tr></table>
  </li>
        </ul>  </li>
      </ul>  </li>
    </ul>
  <h2><span class='vym-branch-1' style='color:#000000' id='mc:0,bo:4'>Object Oriented JavaScript and Prototypal Inhertiance</span></h2>
    <ul class="vym-list-ul-2">
      <li><span class='vym-branch-2' style='color:#000000' id='mc:0,bo:4,bo:0'>Conceptual Aside: Classical vs Proptoypal Inhertiance</span>
      <ul class="vym-list-ul-3">
        <li><span class='vym-branch-3' style='color:#000000' id='mc:0,bo:4,bo:0,bo:0'>BWA: Inhertiance: when an object gets access to antoher objects properties and
methods</span>  </li>
        <li><span class='vym-branch-3' style='color:#000000' id='mc:0,bo:4,bo:0,bo:1'>Classical</span>
        <ul class="vym-list-ul-4">
          <li><span class='vym-branch-4' style='color:#000000' id='mc:0,bo:4,bo:0,bo:1,bo:0'>Common structure in Java</span>  </li>
          <li><span class='vym-branch-4' style='color:#000000' id='mc:0,bo:4,bo:0,bo:1,bo:1'>Cons: verbose</span>  </li>
          <li><span class='vym-branch-4' style='color:#000000' id='mc:0,bo:4,bo:0,bo:1,bo:2'>Extedned vocabulary</span>  </li>
        </ul>  </li>
        <li><span class='vym-branch-3' style='color:#000000' id='mc:0,bo:4,bo:0,bo:2'>Prototypal</span>
        <ul class="vym-list-ul-4">
          <li><span class='vym-branch-4' style='color:#000000' id='mc:0,bo:4,bo:0,bo:2,bo:0'>Flexible, simple, easy to understand</span>  </li>
          <li><span class='vym-branch-4' style='color:#000000' id='mc:0,bo:4,bo:0,bo:2,bo:1'>Very different than other programming languages</span>  </li>
        </ul>  </li>
      </ul>  </li>
      <li><span class='vym-branch-2' style='color:#000000' id='mc:0,bo:4,bo:1'>Understanding the Prototype</span>
      <ul class="vym-list-ul-3">
        <li><span class='vym-branch-3' style='color:#000000' id='mc:0,bo:4,bo:1,bo:0'>All objects (including functions) has the prototype object</span>  </li>
        <li><span class='vym-branch-3' style='color:#000000' id='mc:0,bo:4,bo:1,bo:1'><a href="/home/juxley/Pictures/proto.png"><img src="flags/flag-url-16x16.png">Image</a></span>  </li>
        <li><span class='vym-branch-3' style='color:#000000' id='mc:0,bo:4,bo:1,bo:2'>It will look like prop2 within proto</span>  </li>
        <li><span class='vym-branch-3' style='color:#000000' id='mc:0,bo:4,bo:1,bo:3'>Each object can has it's own prototype</span>  </li>
        <li><span class='vym-branch-3' style='color:#000000' id='mc:0,bo:4,bo:1,bo:4'>obj.prop2 will go down the PROTOTYPE CHAIN</span>
        <ul class="vym-list-ul-4">
          <li><span class='vym-branch-4' style='color:#000000' id='mc:0,bo:4,bo:1,bo:4,bo:0'>The JS Engine will search for the property for us</span>  </li>
        </ul>  </li>
        <li><span class='vym-branch-3' style='color:#000000' id='mc:0,bo:4,bo:1,bo:5'>Code Example</span>
<table class="vym-note"><tr><td class="vym-note-flag">
<td>
var person {<br/>  first: "default",<br/>  last: "deafult"<br/>  getFullName: function(this.first + " " + this.last<br/>}<br/><br/>var john {<br/>  first: "John",<br/>  last: "Doe"<br/>}<br/><br/>//NEVER DO THIS EVER.  IT WILL SLOW DOWN YOUR STUFF<br/><br/>john.__proto__ = person //weird name so to not type it accidently<br/><br/>//john object now inherits person<br/><br/>console.log(john.getFullName)<br/>console.log(john.first) // outputs John because it doesn't need to go down the<br/>Prototype chain. It will stop when it finds what it is looking for<br/><br/>var jane {<br/>  first: "Jane"<br/>}<br/><br/>jane.__proto__ = person<br/>console.log(jane.getFullName
</td></tr></table>

        <ul class="vym-list-ul-4">
          <li><span class='vym-branch-4' style='color:#000000' id='mc:0,bo:4,bo:1,bo:5,bo:0'>NEVER DO THIS EVER.  IT WILL SLOW DOWN YOUR STUFF</span>  </li>
          <li><span class='vym-branch-4' style='color:#000000' id='mc:0,bo:4,bo:1,bo:5,bo:1'>this also knows the object that orginated the call</span>  </li>
        </ul>  </li>
      </ul>  </li>
      <li><span class='vym-branch-2' style='color:#000000' id='mc:0,bo:4,bo:2'>Everything is an Object (or a primative)</span>
      <ul class="vym-list-ul-3">
        <li><span class='vym-branch-3' style='color:#000000' id='mc:0,bo:4,bo:2,bo:0'>functions, arrays, etc. all have a prototype</span>  </li>
        <li><span class='vym-branch-3' style='color:#000000' id='mc:0,bo:4,bo:2,bo:1'>Execept the base object</span>
        <ul class="vym-list-ul-4">
          <li><span class='vym-branch-4' style='color:#000000' id='mc:0,bo:4,bo:2,bo:1,bo:0'>Everything eventually leads to the base Object</span>  </li>
        </ul>  </li>
        <li><span class='vym-branch-3' style='color:#000000' id='mc:0,bo:4,bo:2,bo:2'>Code</span>
<table class="vym-note"><tr><td class="vym-note-flag">
<td>
var a = {} // a.__proto__: Object {} // the base object<br/>var b = function() {} // b.__proto: function Empty()<br/>var c = [] //
</td></tr></table>
  </li>
        <li><span class='vym-branch-3' style='color:#000000' id='mc:0,bo:4,bo:2,bo:3'>All of the base prototypes have share methods with ALL of the other objects,
functions, and arrays</span>  </li>
        <li><span class='vym-branch-3' style='color:#000000' id='mc:0,bo:4,bo:2,bo:4'>The JavaScript engine has already set the proto of soething</span>  </li>
        <li><span class='vym-branch-3' style='color:#000000' id='mc:0,bo:4,bo:2,bo:5'>The prototype of the protype points to the base Object</span>  </li>
      </ul>  </li>
      <li><span class='vym-branch-2' style='color:#000000' id='mc:0,bo:4,bo:3'>Reflection and Extension</span>
      <ul class="vym-list-ul-3">
        <li><span class='vym-branch-3' style='color:#000000' id='mc:0,bo:4,bo:3,bo:0'>BWA: Reflection: An object can look at itself, listing and changing its
properties and methods</span>  </li>
        <li><span class='vym-branch-3' style='color:#000000' id='mc:0,bo:4,bo:3,bo:1'>Example</span>
<table class="vym-note"><tr><td class="vym-note-flag">
<td>
<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.0//EN" "http://www.w3.org/TR/REC-html40/strict.dtd">

<p class="vym-note-paragraph"><span style=" font-family:'DejaVu Sans Mono'; font-size:12pt; color:#000000;">var person {</span></p>
<p class="vym-note-paragraph"><span style=" font-family:'DejaVu Sans Mono'; font-size:12pt; color:#000000;">  first: &quot;default&quot;,</span></p>
<p class="vym-note-paragraph"><span style=" font-family:'DejaVu Sans Mono'; font-size:12pt; color:#000000;">  last: &quot;deafult&quot;</span></p>
<p class="vym-note-paragraph"><span style=" font-family:'DejaVu Sans Mono'; font-size:12pt; color:#000000;">  getFullName: function(this.first + &quot; &quot; + this.last</span></p>
<p class="vym-note-paragraph"><span style=" font-family:'DejaVu Sans Mono'; font-size:12pt; color:#000000;">}</span></p>
<p class="vym-note-paragraph"><br /></p>
<p class="vym-note-paragraph"><span style=" font-family:'DejaVu Sans Mono'; font-size:12pt; color:#000000;">var john {</span></p>
<p class="vym-note-paragraph"><span style=" font-family:'DejaVu Sans Mono'; font-size:12pt; color:#000000;">  first: &quot;John&quot;,</span></p>
<p class="vym-note-paragraph"><span style=" font-family:'DejaVu Sans Mono'; font-size:12pt; color:#000000;">  last: &quot;Doe&quot;</span></p>
<p class="vym-note-paragraph"><span style=" font-family:'DejaVu Sans Mono'; font-size:12pt; color:#000000;">}</span></p>
<p class="vym-note-paragraph"><br /></p>
<p class="vym-note-paragraph"><span style=" font-family:'DejaVu Sans Mono'; font-size:12pt; color:#000000;">//NEVER DO THIS EVER.  IT WILL SLOW DOWN YOUR STUFF</span></p>
<p class="vym-note-paragraph"><br /></p>
<p class="vym-note-paragraph"><span style=" font-family:'DejaVu Sans Mono'; font-size:12pt; color:#000000;">john.__proto__ = person //weird name so to not type it accidently</span></p>
<p class="vym-note-paragraph"><br /></p>
<p class="vym-note-paragraph"><span style=" font-family:'DejaVu Sans Mono'; font-size:12pt; color:#000000;">//This is an example of reflection as it lists an objects properties and methods</span></p>
<p class="vym-note-paragraph"><span style=" font-family:'DejaVu Sans Mono'; font-size:12pt; color:#000000;">for (var prop in john) {</span></p>
<p class="vym-note-paragraph"><span style=" font-family:'DejaVu Sans Mono'; font-size:12pt; color:#000000;">  if (john.hasOwnProperty(prop)) {</span></p>
<p class="vym-note-paragraph"><span style=" font-family:'DejaVu Sans Mono'; font-size:12pt; color:#000000;">  console.log(prop + &quot;: &quot; + john[prop])</span></p>
<p class="vym-note-paragraph"><span style=" font-family:'DejaVu Sans Mono'; font-size:12pt; color:#000000;">  }</span></p>
<p class="vym-note-paragraph"><span style=" font-family:'DejaVu Sans Mono'; font-size:12pt; color:#000000;">}</span></p>
<p class="vym-note-paragraph"><br /></p>
<p class="vym-note-paragraph"><span style=" font-family:'DejaVu Sans Mono'; font-size:12pt; color:#000000;">var jane = {</span></p>
<p class="vym-note-paragraph"><span style=" font-family:'DejaVu Sans Mono'; font-size:12pt; color:#000000;">  getFormalName: //function...<br />}</span></p>
<p class="vym-note-paragraph"><br /></p>
<p class="vym-note-paragraph"><span style=" font-family:'DejaVu Sans Mono'; font-size:12pt; color:#000000;">var mike = {</span></p>
<p class="vym-note-paragraph"><span style=" font-family:'DejaVu Sans Mono'; font-size:12pt; color:#000000;">  getFirst: //function...</span></p>
<p class="vym-note-paragraph"><span style=" font-family:'DejaVu Sans Mono'; font-size:12pt; color:#000000;">}</span></p>
<p class="vym-note-paragraph"><br /></p>
<p class="vym-note-paragraph"><span style=" font-family:'DejaVu Sans Mono'; font-size:12pt; color:#000000;">var </span></p>
<p class="vym-note-paragraph"><span style=" font-family:'DejaVu Sans Mono'; font-size:12pt; color:#000000;">//using underscore.js</span></p>
<p class="vym-note-paragraph"><span style=" font-family:'DejaVu Sans Mono'; font-size:12pt; color:#000000;">_.extend(john, jane, mike)</span></p>
<p class="vym-note-paragraph"><br /></p>
<p class="vym-note-paragraph"><span style=" font-family:'DejaVu Sans Mono'; font-size:12pt; color:#000000;">//now john will have the same properties and methods as jane and mike without extending the prototype chain</span></p>
<p class="vym-note-paragraph"><br /></p>
</td></tr></table>

        <ul class="vym-list-ul-4">
          <li><span class='vym-branch-4' style='color:#000000' id='mc:0,bo:4,bo:3,bo:1,bo:0'>This is an example of reflection as it lists an objects properties and methods</span>  </li>
        </ul>  </li>
        <li><span class='vym-branch-3' style='color:#000000' id='mc:0,bo:4,bo:3,bo:2'>Extend</span>
<table class="vym-note"><tr><td class="vym-note-flag">
<td>
_
</td></tr></table>

        <ul class="vym-list-ul-4">
          <li><span class='vym-branch-4' style='color:#000000' id='mc:0,bo:4,bo:3,bo:2,bo:0'>Compliment to JS prototype</span>
          <ul class="vym-list-ul-5">
            <li><span class='vym-branch-5' style='color:#000000' id='mc:0,bo:4,bo:3,bo:2,bo:0,bo:0'></span>  </li>
          </ul>  </li>
          <li><span class='vym-branch-4' style='color:#000000' id='mc:0,bo:4,bo:3,bo:2,bo:1'>underscore.js creates one</span>  </li>
        </ul>  </li>
      </ul>  </li>
    </ul>
  <h2><span class='vym-branch-1' style='color:#000000' id='mc:0,bo:5'>Building Objects</span></h2>
    <ul class="vym-list-ul-2">
      <li><span class='vym-branch-2' style='color:#000000' id='mc:0,bo:5,bo:0'>Function Constructors, 'new', and the History of JavaScript</span>
      <ul class="vym-list-ul-3">
        <li><span class='vym-branch-3' style='color:#000000' id='mc:0,bo:5,bo:0,bo:0'>History</span>
        <ul class="vym-list-ul-4">
          <li><span class='vym-branch-4' style='color:#000000' id='mc:0,bo:5,bo:0,bo:0,bo:0'>Programming war!!!</span>  </li>
          <li><span class='vym-branch-4' style='color:#000000' id='mc:0,bo:5,bo:0,bo:0,bo:1'>Call JavaScript; to attract Java developers (marketing!)</span>  </li>
          <li><span class='vym-branch-4' style='color:#000000' id='mc:0,bo:5,bo:0,bo:0,bo:2'>var john = new Person()</span>
          <ul class="vym-list-ul-5">
            <li><span class='vym-branch-5' style='color:#000000' id='mc:0,bo:5,bo:0,bo:0,bo:2,bo:0'>Looks a bit like Java</span>  </li>
          </ul>  </li>
        </ul>  </li>
        <li><span class='vym-branch-3' style='color:#000000' id='mc:0,bo:5,bo:0,bo:1'>Example Code</span>
<table class="vym-note"><tr><td class="vym-note-flag">
<td>
function Person(firstname, lastname) {<br/>this. firstname = firstname<br/>this.lastname = lastname <br/>console.log("this function is invoked")<br/><br/>//return console.log("I got in the way")<br/>}<br/>var john = new Person("John", "Doe")<br/>console.log(john)<br/><br/>var jason = new Person("Jason", "Ribble") // invoked and set in a different<br/>place in language
</td></tr></table>
  </li>
        <li><span class='vym-branch-3' style='color:#000000' id='mc:0,bo:5,bo:0,bo:2'>Learning the proper way to build objects to assign properites, methods, and
settting the prototypes</span>  </li>
        <li><span class='vym-branch-3' style='color:#000000' id='mc:0,bo:5,bo:0,bo:3'>new is an opperator</span>
        <ul class="vym-list-ul-4">
          <li><span class='vym-branch-4' style='color:#000000' id='mc:0,bo:5,bo:0,bo:3,bo:0'>immediatedly an empty object is created</span>  </li>
          <li><span class='vym-branch-4' style='color:#000000' id='mc:0,bo:5,bo:0,bo:3,bo:1'>Then it calls the Person() function</span>
          <ul class="vym-list-ul-5">
            <li><span class='vym-branch-5' style='color:#000000' id='mc:0,bo:5,bo:0,bo:3,bo:1,bo:0'>Execution conext is made, and &quot;this&quot; is created</span>  </li>
            <li><span class='vym-branch-5' style='color:#000000' id='mc:0,bo:5,bo:0,bo:3,bo:1,bo:1'>The &quot;This&quot; points to the empty object that new created</span>  </li>
          </ul>  </li>
          <li><span class='vym-branch-4' style='color:#000000' id='mc:0,bo:5,bo:0,bo:3,bo:2'>Having a function create an object</span>  </li>
        </ul>  </li>
        <li><span class='vym-branch-3' style='color:#000000' id='mc:0,bo:5,bo:0,bo:4'>Function Constructors = function</span>
        <ul class="vym-list-ul-4">
          <li><span class='vym-branch-4' style='color:#000000' id='mc:0,bo:5,bo:0,bo:4,bo:0'>A normal function, used to create objecs</span>  </li>
          <li><span class='vym-branch-4' style='color:#000000' id='mc:0,bo:5,bo:0,bo:4,bo:1'>The &quot;this&quot; variable points to an new empty object, and the object is return from
the function automatically</span>  </li>
        </ul>  </li>
      </ul>  </li>
      <li><span class='vym-branch-2' style='color:#000000' id='mc:0,bo:5,bo:1'>Function Constructors and .prototype</span>
      <ul class="vym-list-ul-3">
        <li><span class='vym-branch-3' style='color:#000000' id='mc:0,bo:5,bo:1,bo:0'><a href="/home/juxley/Picture/funcproto.png"><img src="flags/flag-url-16x16.png">Image</a></span>  </li>
        <li><span class='vym-branch-3' style='color:#000000' id='mc:0,bo:5,bo:1,bo:1'>When function constructors are called with new, it creates an empty object</span>  </li>
        <li><span class='vym-branch-3' style='color:#000000' id='mc:0,bo:5,bo:1,bo:2'>The .prototype points to this object</span>  </li>
        <li><span class='vym-branch-3' style='color:#000000' id='mc:0,bo:5,bo:1,bo:3'>It has properties and methods; and it has</span>  </li>
        <li><span class='vym-branch-3' style='color:#000000' id='mc:0,bo:5,bo:1,bo:4'>Why add it to the prototype and not the function constructor?</span>
        <ul class="vym-list-ul-4">
          <li><span class='vym-branch-4' style='color:#000000' id='mc:0,bo:5,bo:1,bo:4,bo:0'>The method sits in the prototype in memory only one time</span>  </li>
          <li><span class='vym-branch-4' style='color:#000000' id='mc:0,bo:5,bo:1,bo:4,bo:1'>The object can be created many times and point to the one method</span>  </li>
        </ul>  </li>
        <li><span class='vym-branch-3' style='color:#000000' id='mc:0,bo:5,bo:1,bo:5'>Example</span>
<table class="vym-note"><tr><td class="vym-note-flag">
<td>
<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.0//EN" "http://www.w3.org/TR/REC-html40/strict.dtd">

<p class="vym-note-paragraph"><span style=" color:#000000;">function Person(first, last) {</span></p>
<p class="vym-note-paragraph"><span style=" color:#000000;">          this.first = first</span></p>
<p class="vym-note-paragraph"><span style=" color:#000000;">          this.last = last</span></p>
<p class="vym-note-paragraph"><span style=" color:#000000;">          console.log(&quot;Invoked&quot;)</span></p>
<p class="vym-note-paragraph"><span style=" color:#000000;">}</span></p>
<p class="vym-note-paragraph"><br /></p>
<p class="vym-note-paragraph"><span style=" color:#000000;">Person.prototype.getFullName = function() {</span></p>
<p class="vym-note-paragraph"><span style=" color:#000000;">          return this.first + &quot; &quot; + this.last</span></p>
<p class="vym-note-paragraph"><span style=" color:#000000;">}</span></p>
<p class="vym-note-paragraph"><br /></p>
<p class="vym-note-paragraph"><span style=" color:#000000;">let jason = new Person(&quot;Jason&quot;, &quot;Ribble&quot;)</span></p>
<p class="vym-note-paragraph"><span style=" color:#000000;">let mike = new Person(&quot;Mike&quot;, &quot;Row&quot;)</span></p>
<p class="vym-note-paragraph"><br /></p>
<p class="vym-note-paragraph"><span style=" color:#000000;">console.log(jason.getFullName())</span></p>
<p class="vym-note-paragraph"><span style=" color:#000000;">console.log(mike.getFullName())</span></p>
</td></tr></table>

        <ul class="vym-list-ul-4">
          <li><span class='vym-branch-4' style='color:#000000' id='mc:0,bo:5,bo:1,bo:5,bo:0'>One of the valid ways of setting the prototype in JavaScript</span>  </li>
        </ul>  </li>
      </ul>  </li>
      <li><span class='vym-branch-2' style='color:#000000' id='mc:0,bo:5,bo:2'>Dangerous Aside: new and function constructors</span>
      <ul class="vym-list-ul-3">
        <li><span class='vym-branch-3' style='color:#000000' id='mc:0,bo:5,bo:2,bo:0'>if you don't have the &quot;new&quot; keyword, then the object will be undefinied since
the function doesn't return anything</span>  </li>
        <li><span class='vym-branch-3' style='color:#000000' id='mc:0,bo:5,bo:2,bo:1'>Coding Convention: Functoin Constructors have capital letters</span>  </li>
        <li><span class='vym-branch-3' style='color:#000000' id='mc:0,bo:5,bo:2,bo:2'>there are going to be making a new way for function constructor?</span>  </li>
      </ul>  </li>
      <li><span class='vym-branch-2' style='color:#000000' id='mc:0,bo:5,bo:3'>Conceptual Aside: Built In Function Constructors</span>
      <ul class="vym-list-ul-3">
        <li><span class='vym-branch-3' style='color:#000000' id='mc:0,bo:5,bo:3,bo:0'>var a = new Number(&quot;3&quot;) // Numbe {[Primiative Value], 3}</span>  </li>
        <li><span class='vym-branch-3' style='color:#000000' id='mc:0,bo:5,bo:3,bo:1'>var b = new String(&quot;Jason&quot;)</span>
        <ul class="vym-list-ul-4">
          <li><span class='vym-branch-4' style='color:#000000' id='mc:0,bo:5,bo:3,bo:1,bo:0'>b.indexOf(&quot;o&quot;)</span>  </li>
          <li><span class='vym-branch-4' style='color:#000000' id='mc:0,bo:5,bo:3,bo:1,bo:1'>String.prototype.indexOf(&quot;o&quot;)</span>  </li>
        </ul>  </li>
        <li><span class='vym-branch-3' style='color:#000000' id='mc:0,bo:5,bo:3,bo:2'>You are not creating primiative, you are creating objects</span>  </li>
        <li><span class='vym-branch-3' style='color:#000000' id='mc:0,bo:5,bo:3,bo:3'>&quot;Jason&quot;.length</span>
        <ul class="vym-list-ul-4">
          <li><span class='vym-branch-4' style='color:#000000' id='mc:0,bo:5,bo:3,bo:3,bo:0'>It will &quot;box&quot; the string in an object for you, so you can use properties and
methods of the prototype'</span>  </li>
        </ul>  </li>
        <li><span class='vym-branch-3' style='color:#000000' id='mc:0,bo:5,bo:3,bo:4'>var d = new Date(&quot;3/1/15&quot;)</span>  </li>
        <li><span class='vym-branch-3' style='color:#000000' id='mc:0,bo:5,bo:3,bo:5'>We can tac on features onto Strings, Numbers, Dates</span>  </li>
        <li><span class='vym-branch-3' style='color:#000000' id='mc:0,bo:5,bo:3,bo:6'>By understanding this, we can extend the language</span>  </li>
        <li><span class='vym-branch-3' style='color:#000000' id='mc:0,bo:5,bo:3,bo:7'>Warning! make sure that you don't overwrite pre-existing methods or prototypes</span>  </li>
        <li><span class='vym-branch-3' style='color:#000000' id='mc:0,bo:5,bo:3,bo:8'>Strings and Array do get boxing, while Numbers do not</span>  </li>
        <li><span class='vym-branch-3' style='color:#000000' id='mc:0,bo:5,bo:3,bo:9'>new Number !== a primative number</span>  </li>
      </ul>  </li>
      <li><span class='vym-branch-2' style='color:#000000' id='mc:0,bo:5,bo:4'>Dangerous Aside: Build In Function Constructor</span>
      <ul class="vym-list-ul-3">
        <li><span class='vym-branch-3' style='color:#000000' id='mc:0,bo:5,bo:4,bo:0'>Example code</span>
<table class="vym-note"><tr><td class="vym-note-flag">
<td>
var a = 3<br/>var b = new Number(3)<br/>a == b //true<br/>a === b //false<br/><br/>//proper way to use this<br/>var c = Number("3") // to have the string go to a number
</td></tr></table>
  </li>
        <li><span class='vym-branch-3' style='color:#000000' id='mc:0,bo:5,bo:4,bo:1'>Function Constructors are not pritatives</span>  </li>
        <li><span class='vym-branch-3' style='color:#000000' id='mc:0,bo:5,bo:4,bo:2'>To avoid this, use literals</span>  </li>
        <li><span class='vym-branch-3' style='color:#000000' id='mc:0,bo:5,bo:4,bo:3'>If you do use them, understand what is goin gon</span>  </li>
        <li><span class='vym-branch-3' style='color:#000000' id='mc:0,bo:5,bo:4,bo:4'>If you using the Date, use moment.js</span>  </li>
        <li><span class='vym-branch-3' style='color:#000000' id='mc:0,bo:5,bo:4,bo:5'>It's dangerous to use function constructor for primatives</span>  </li>
        <li><span class='vym-branch-3' style='color:#000000' id='mc:0,bo:5,bo:4,bo:6'>You can also use this a function, not a constructor</span>  </li>
      </ul>  </li>
      <li><span class='vym-branch-2' style='color:#000000' id='mc:0,bo:5,bo:5'>Dangerous Aside: Arrays and for.in</span>
      <ul class="vym-list-ul-3">
        <li><span class='vym-branch-3' style='color:#000000' id='mc:0,bo:5,bo:5,bo:0'>Arrays are objects!</span>  </li>
        <li><span class='vym-branch-3' style='color:#000000' id='mc:0,bo:5,bo:5,bo:1'>Code</span>
<table class="vym-note"><tr><td class="vym-note-flag">
<td>
<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.0//EN" "http://www.w3.org/TR/REC-html40/strict.dtd">

<p class="vym-note-paragraph"><span style=" color:#000000;">let arr = [1, 2, 3[</span></p>
<p class="vym-note-paragraph"><span style=" color:#000000;">for (let prop in arr) {</span></p>
<p class="vym-note-paragraph"><span style=" color:#000000;">   console.log(prop + &quot; &quot; + arr[prop])h</span></p>
<p class="vym-note-paragraph"><span style=" color:#000000;">}</span></p>
</td></tr></table>
  </li>
        <li><span class='vym-branch-3' style='color:#000000' id='mc:0,bo:5,bo:5,bo:2'>If someone extends the Array.prototype with additional features, and we attempt
to use for..in then we will see the Array.protype since it goes down the
prototype chain</span>  </li>
      </ul>  </li>
      <li><span class='vym-branch-2' style='color:#000000' id='mc:0,bo:5,bo:6'>Object.create and Pure Prototypal Inheritence</span>
      <ul class="vym-list-ul-3">
        <li><span class='vym-branch-3' style='color:#000000' id='mc:0,bo:5,bo:6,bo:0'>Example Code</span>
<table class="vym-note"><tr><td class="vym-note-flag">
<td>
let person = {<br/>  first: "Default",<br/>  last: "Default",<br/>  greet: function() {<br/>    return "Hi " + this.first <br/>    // Why Do we need "this" here? Objects do not have execution conext, and<br/>first will look for the first variable in the next exeuction conext, which will<br/>be the global execution conext <br/>  }<br/>}<br/><br/>let jason = Object.create(person)<br/>// Now override the values<br/>jason.first = "Jason"<br/>jason.last = "Ribble'<br/>console.log(jason)
</td></tr></table>
  </li>
        <li><span class='vym-branch-3' style='color:#000000' id='mc:0,bo:5,bo:6,bo:1'>This structure of code is known as pure prototypal inhertience</span>  </li>
        <li><span class='vym-branch-3' style='color:#000000' id='mc:0,bo:5,bo:6,bo:2'>This way we can keep methods on the base object and override the properties</span>  </li>
        <li><span class='vym-branch-3' style='color:#000000' id='mc:0,bo:5,bo:6,bo:3'>BWA: Polyfil</span>
<table class="vym-note"><tr><td class="vym-note-flag">
<td>
if (!Object.create) {<br/>  Object.create = function (o) {<br/>    if (argument.length &gt; 1) {<br/>       throw new Error("Object.create implementation only accepts the first<br/>parameter.")<br/>    }<br/>    function F() {}<br/>    F.prototype = o<br/>    return new F()<br/>  }<br/>}
</td></tr></table>

        <ul class="vym-list-ul-4">
          <li><span class='vym-branch-4' style='color:#000000' id='mc:0,bo:5,bo:6,bo:3,bo:0'>Code that will add a feature which theengine MAY lack</span>  </li>
          <li><span class='vym-branch-4' style='color:#000000' id='mc:0,bo:5,bo:6,bo:3,bo:1'>Adding Object.create</span>  </li>
        </ul>  </li>
        <li><span class='vym-branch-3' style='color:#000000' id='mc:0,bo:5,bo:6,bo:4'>We can add feautre, properties and methods, on the fly</span>  </li>
        <li><span class='vym-branch-3' style='color:#000000' id='mc:0,bo:5,bo:6,bo:5'>freer approach to constructing objects</span>  </li>
      </ul>  </li>
      <li><span class='vym-branch-2' style='color:#000000' id='mc:0,bo:5,bo:7'>ES6 and Classes</span>
      <ul class="vym-list-ul-3">
        <li><span class='vym-branch-3' style='color:#000000' id='mc:0,bo:5,bo:7,bo:0'>ES6 introduces classes in another way</span>  </li>
        <li><span class='vym-branch-3' style='color:#000000' id='mc:0,bo:5,bo:7,bo:1'>Example Code</span>
<table class="vym-note"><tr><td class="vym-note-flag">
<td>
class Person {<br/>  constructor(first, last) {<br/>     this.first = first<br/>     this.last = last  <br/>  }<br/>  <br/>  greet() {<br/>    return "Hi " + first<br/>  }<br/>}<br/><br/>let jason = new Person("Jason", "Ribble")<br/><br/>class InformMalPerson extends Person {<br/>  constructor(first, last) {<br/>    super(first, last)  <br/>  }<br/><br/>  greet() {<br/>    return "Yo " + first<br/>  }<br/><br/>}
</td></tr></table>
  </li>
        <li><span class='vym-branch-3' style='color:#000000' id='mc:0,bo:5,bo:7,bo:2'>JavaScript defers, because THIS IS AN OBJECT</span>  </li>
        <li><span class='vym-branch-3' style='color:#000000' id='mc:0,bo:5,bo:7,bo:3'>This isn't a class, like a template in other langauges</span>  </li>
        <li><span class='vym-branch-3' style='color:#000000' id='mc:0,bo:5,bo:7,bo:4'>In addition, we use the &quot;new&quot; keyword</span>  </li>
        <li><span class='vym-branch-3' style='color:#000000' id='mc:0,bo:5,bo:7,bo:5'>Appreciate prototypal inhertience! stop mimicking other langaues? &lt;/opinion&gt;</span>  </li>
        <li><span class='vym-branch-3' style='color:#000000' id='mc:0,bo:5,bo:7,bo:6'>extends: a keyword that sets the __proto__ to a certain Object</span>
        <ul class="vym-list-ul-4">
          <li><span class='vym-branch-4' style='color:#000000' id='mc:0,bo:5,bo:7,bo:6,bo:0'>Then we can call the super keyword to call the parent constructor</span>  </li>
        </ul>  </li>
        <li><span class='vym-branch-3' style='color:#000000' id='mc:0,bo:5,bo:7,bo:7'>Another syntically way; yet all of them work the same way</span>  </li>
        <li><span class='vym-branch-3' style='color:#000000' id='mc:0,bo:5,bo:7,bo:8'>syntactic sugar: another way to type the code, that doesn't change the way the
JavaScript engine works, yet it is written differnetly</span>  </li>
      </ul>  </li>
    </ul>
  <h2><span class='vym-branch-1' style='color:#000000' id='mc:0,bo:6'>Odds and Ends</span>
<table class="vym-note"><tr><td class="vym-note-flag">
<td>
Things that could've been in other parts of the course; yet aren't as important
</td></tr></table>
</h2>
    <ul class="vym-list-ul-2">
      <li><span class='vym-branch-2' style='color:#000000' id='mc:0,bo:6,bo:0'>Initialization</span>
      <ul class="vym-list-ul-3">
        <li><span class='vym-branch-3' style='color:#000000' id='mc:0,bo:6,bo:0,bo:0'>When we have a large amount of data, it may look scary</span>
        <ul class="vym-list-ul-4">
          <li><span class='vym-branch-4' style='color:#000000' id='mc:0,bo:6,bo:0,bo:0,bo:0'>Don't be intimdated</span>  </li>
        </ul>  </li>
        <li><span class='vym-branch-3' style='color:#000000' id='mc:0,bo:6,bo:0,bo:1'>Prepare data for API before going done software</span>  </li>
        <li><span class='vym-branch-3' style='color:#000000' id='mc:0,bo:6,bo:0,bo:2'>Syntax highlighters are great!</span>  </li>
        <li><span class='vym-branch-3' style='color:#000000' id='mc:0,bo:6,bo:0,bo:3'>Example</span>
<table class="vym-note"><tr><td class="vym-note-flag">
<td>
let people = [<br/>    // John<br/>  {  <br/>    first: "John"<br/>    last: "Doe<br/>  },<br/>    // Mary<br/>  {  <br/>    first: "Mary"<br/>    last: "Doe<br/>  }<br/>]
</td></tr></table>
  </li>
      </ul>  </li>
      <li><span class='vym-branch-2' style='color:#000000' id='mc:0,bo:6,bo:1'>'typeof', 'instanceof' and figuring out what somethig is</span>
      <ul class="vym-list-ul-3">
        <li><span class='vym-branch-3' style='color:#000000' id='mc:0,bo:6,bo:1,bo:0'>Example</span>
<table class="vym-note"><tr><td class="vym-note-flag">
<td>
let a = 3<br/>console.log(typeof a)<br/><br/>let b = "String"<br/>console.log(typeof b)<br/><br/>let c = {}<br/>console.log(typeof c)<br/><br/>let d = []<br/>console.log(typeof d) // arrays are objects (not so useful)<br/>console.log(Object.prototype.toString.call(d))  // another way around this<br/>  // Going down the Object prototype; there's a toString method that converts<br/>"this" to a String<br/>  // By using call, we pass in the d object, which is an arry<br/><br/>function Person(name) {<br/>  this.name = name<br/>}<br/><br/>let e = new Person("Jason")<br/>console.log(typeof e)<br/>console.log(e instanceof Person) <br/>  // instanceof goes down the prototype chain looking for to see if it has the<br/>Person (or the object that you pass in) exists. It will return a boolean.<br/><br/>console.log(typeof undefined)<br/>console.log(typeof null) // a bug in JavaScript that as never been addressed<br/><br/>let f = function () {} <br/>console.log(typeof f) // returns functions!<br/><br/>let g = false<br/>console.log(typeof g)
</td></tr></table>
  </li>
        <li><span class='vym-branch-3' style='color:#000000' id='mc:0,bo:6,bo:1,bo:1'>typeof has six different outputs</span>
        <ul class="vym-list-ul-4">
          <li><span class='vym-branch-4' style='color:#000000' id='mc:0,bo:6,bo:1,bo:1,bo:0'>function</span>  </li>
          <li><span class='vym-branch-4' style='color:#000000' id='mc:0,bo:6,bo:1,bo:1,bo:1'>string</span>  </li>
          <li><span class='vym-branch-4' style='color:#000000' id='mc:0,bo:6,bo:1,bo:1,bo:2'>number</span>  </li>
          <li><span class='vym-branch-4' style='color:#000000' id='mc:0,bo:6,bo:1,bo:1,bo:3'>undefined</span>  </li>
          <li><span class='vym-branch-4' style='color:#000000' id='mc:0,bo:6,bo:1,bo:1,bo:4'>object</span>  </li>
          <li><span class='vym-branch-4' style='color:#000000' id='mc:0,bo:6,bo:1,bo:1,bo:5'>boolean</span>  </li>
          <li><span class='vym-branch-4' style='color:#000000' id='mc:0,bo:6,bo:1,bo:1,bo:6'>WHAT ABOUT ARRAYS</span>
          <ul class="vym-list-ul-5">
            <li><span class='vym-branch-5' style='color:#000000' id='mc:0,bo:6,bo:1,bo:1,bo:6,bo:0'>We need to get around them by going down the Object prototype chain</span>  </li>
          </ul>  </li>
        </ul>  </li>
      </ul>  </li>
      <li><span class='vym-branch-2' style='color:#000000' id='mc:0,bo:6,bo:2'>Strict Mode</span>
      <ul class="vym-list-ul-3">
        <li><span class='vym-branch-3' style='color:#000000' id='mc:0,bo:6,bo:2,bo:0'><a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Strict_mode"><img src="flags/flag-url-16x16.png">Docs</a></span>  </li>
        <li><span class='vym-branch-3' style='color:#000000' id='mc:0,bo:6,bo:2,bo:1'>Opt in to having a picky regemant</span>  </li>
        <li><span class='vym-branch-3' style='color:#000000' id='mc:0,bo:6,bo:2,bo:2'>Doesn't solve all of it's liberal features</span>  </li>
        <li><span class='vym-branch-3' style='color:#000000' id='mc:0,bo:6,bo:2,bo:3'>Example</span>
<table class="vym-note"><tr><td class="vym-note-flag">
<td>
// "use strict"  // it's most useful feature is declaration of variables<br/>function thing() {<br/>"use strict"<br/>let person;<br/> <br/>persom = {}<br/>console.log(persom)   <br/>}<br/>let person;<br/> <br/>persom = {} // intialitional typo to show strict mode feature<br/>console.log(persom) // Object {} because it's sitting on the global object<br/>// person is undefined<br/>thing()
</td></tr></table>
  </li>
        <li><span class='vym-branch-3' style='color:#000000' id='mc:0,bo:6,bo:2,bo:4'>Put &quot;use strict&quot; on the type of the file (global execution) or function</span>
        <ul class="vym-list-ul-4">
          <li><span class='vym-branch-4' style='color:#000000' id='mc:0,bo:6,bo:2,bo:4,bo:0'>Using it on the function, we can have the function have strict mode</span>  </li>
        </ul>  </li>
        <li><span class='vym-branch-3' style='color:#000000' id='mc:0,bo:6,bo:2,bo:5'>It has to be the first line of the function or the file</span>  </li>
        <li><span class='vym-branch-3' style='color:#000000' id='mc:0,bo:6,bo:2,bo:6'>Not ever JavaScript engine works with &quot;use strict&quot; in the same way</span>  </li>
        <li><span class='vym-branch-3' style='color:#000000' id='mc:0,bo:6,bo:2,bo:7'>Careful of minification when we have mutiple files. Stay safe of this</span>  </li>
      </ul>  </li>
    </ul>
  <h2><span class='vym-branch-1' style='color:#000000' id='mc:0,bo:7'>Examing Famous Frameworks and Libraries</span></h2>
    <ul class="vym-list-ul-2">
      <li><span class='vym-branch-2' style='color:#000000' id='mc:0,bo:7,bo:0'>Look into other's code</span>
      <ul class="vym-list-ul-3">
        <li><span class='vym-branch-3' style='color:#000000' id='mc:0,bo:7,bo:0,bo:0'>Go ahead and read them</span>  </li>
        <li><span class='vym-branch-3' style='color:#000000' id='mc:0,bo:7,bo:0,bo:1'>Millions of people use it every day!</span>  </li>
        <li><span class='vym-branch-3' style='color:#000000' id='mc:0,bo:7,bo:0,bo:2'>An Open Source Education!</span>  </li>
        <li><span class='vym-branch-3' style='color:#000000' id='mc:0,bo:7,bo:0,bo:3'>Don't be afraid! You can learn from them!</span>  </li>
        <li><span class='vym-branch-3' style='color:#000000' id='mc:0,bo:7,bo:0,bo:4'>Explore other's code in github!</span>
        <ul class="vym-list-ul-4">
          <li><span class='vym-branch-4' style='color:#000000' id='mc:0,bo:7,bo:0,bo:4,bo:0'>Explore &gt; JavaScript Frameworks</span>  </li>
        </ul>  </li>
        <li><span class='vym-branch-3' style='color:#000000' id='mc:0,bo:7,bo:0,bo:5'><a href="https://code.jquery.com/jquery-3.3.1.js"><img src="flags/flag-url-16x16.png">jQuery</a></span>  </li>
        <li><span class='vym-branch-3' style='color:#000000' id='mc:0,bo:7,bo:0,bo:6'>Find something that you find interest, and see what we can learn and soak in</span>
        <ul class="vym-list-ul-4">
          <li><span class='vym-branch-4' style='color:#000000' id='mc:0,bo:7,bo:0,bo:6,bo:0'>Occassionally take a look into it</span>  </li>
        </ul>  </li>
      </ul>  </li>
      <li><span class='vym-branch-2' style='color:#000000' id='mc:0,bo:7,bo:1'>Deep Dive into Source Code: jQuery part 1</span>
      <ul class="vym-list-ul-3">
        <li><span class='vym-branch-3' style='color:#000000' id='mc:0,bo:7,bo:1,bo:0'>Go into the code and see if there's anything that we can use (we don't need to
understand every little thing)</span>  </li>
        <li><span class='vym-branch-3' style='color:#000000' id='mc:0,bo:7,bo:1,bo:1'>What is jQuery</span>
        <ul class="vym-list-ul-4">
          <li><span class='vym-branch-4' style='color:#000000' id='mc:0,bo:7,bo:1,bo:1,bo:0'>fixes cross browser issues</span>  </li>
          <li><span class='vym-branch-4' style='color:#000000' id='mc:0,bo:7,bo:1,bo:1,bo:1'>syntacical pretty code</span>  </li>
          <li><span class='vym-branch-4' style='color:#000000' id='mc:0,bo:7,bo:1,bo:1,bo:2'>Let's you manipulate the DOM</span>
          <ul class="vym-list-ul-5">
            <li><span class='vym-branch-5' style='color:#000000' id='mc:0,bo:7,bo:1,bo:1,bo:2,bo:0'>DOM is the model that shows the HTML page</span>  </li>
            <li><span class='vym-branch-5' style='color:#000000' id='mc:0,bo:7,bo:1,bo:1,bo:2,bo:1'>Makes it easier to looking to DOM to make changes to them</span>  </li>
          </ul>  </li>
        </ul>  </li>
        <li><span class='vym-branch-3' style='color:#000000' id='mc:0,bo:7,bo:1,bo:2'>Example Code</span>
        <ul class="vym-list-ul-4">
          <li><span class='vym-branch-4' style='color:#000000' id='mc:0,bo:7,bo:1,bo:2,bo:0'>HTML</span>  </li>
          <li><span class='vym-branch-4' style='color:#000000' id='mc:0,bo:7,bo:1,bo:2,bo:1'>$ or jQuery</span>  </li>
          <li><span class='vym-branch-4' style='color:#000000' id='mc:0,bo:7,bo:1,bo:2,bo:2'><a href="https://code.jquery.com/jquery-1.11.2.js"><img src="flags/flag-url-16x16.png">jquery.js</a></span>
          <ul class="vym-list-ul-5">
            <li><span class='vym-branch-5' style='color:#000000' id='mc:0,bo:7,bo:1,bo:2,bo:2,bo:0'>version 1.11.2</span>  </li>
          </ul>  </li>
          <li><span class='vym-branch-4' style='color:#000000' id='mc:0,bo:7,bo:1,bo:2,bo:3'>app.js</span>
          <ul class="vym-list-ul-5">
            <li><span class='vym-branch-5' style='color:#000000' id='mc:0,bo:7,bo:1,bo:2,bo:3,bo:0'>// I want the all of the li elements of the ul elements with the class of people</span>  </li>
            <li><span class='vym-branch-5' style='color:#000000' id='mc:0,bo:7,bo:1,bo:2,bo:3,bo:1'>// Each li is a DOM element. It has things like innerHTML, and other things</span>  </li>
            <li><span class='vym-branch-5' style='color:#000000' id='mc:0,bo:7,bo:1,bo:2,bo:3,bo:2'>// __proto__ has a jQuery object; which has many methods</span>
            <ul class="vym-list-ul-6">
              <li><span class='vym-branch-6' style='color:#000000' id='mc:0,bo:7,bo:1,bo:2,bo:3,bo:2,bo:0'>It's better to have methods on the prototype to save memory space. Each of the
declared properties don't have to have the same methods written over and over
again</span>  </li>
            </ul>  </li>
            <li><span class='vym-branch-5' style='color:#000000' id='mc:0,bo:7,bo:1,bo:2,bo:3,bo:3'>What is jQuery.fn.init(3)?</span>  </li>
          </ul>  </li>
          <li><span class='vym-branch-4' style='color:#000000' id='mc:0,bo:7,bo:1,bo:2,bo:4'>A function that calls a function constructor</span>
<table class="vym-note"><tr><td class="vym-note-flag">
<td>
jQuery = function( selector, context ) {<br/>        return new jQuery.fn.init( selector, context );<br/>    },
</td></tr></table>
  </li>
          <li><span class='vym-branch-4' style='color:#000000' id='mc:0,bo:7,bo:1,bo:2,bo:5'>What does the beginning of the code do?</span>  </li>
          <li><span class='vym-branch-4' style='color:#000000' id='mc:0,bo:7,bo:1,bo:2,bo:6'>All funcitons get a prototype property</span>
<table class="vym-note"><tr><td class="vym-note-flag">
<td>
jQuery.fn = jQuery.prototype = {<br/>    // The current version of jQuery being used<br/>    jquery: version,<br/><br/><br/>    constructor: jQuery,<br/><br/><br/>    // Start with an empty selector<br/>    selector: "",<br/><br/><br/>    // The default length of a jQuery object is 0<br/>    length: 0,<br/><br/><br/>    toArray: function() {<br/>        return slice.call( this );<br/>    },<br/><br/><br/>    // Get the Nth element in the matched element set OR<br/>    // Get the whole matched element set as a clean array<br/>    get: function( num ) {<br/>        return num != null ?<br/><br/><br/>            // Return just the one element from the set<br/>            ( num &lt; 0 ? this[ num + this.length ] : this[ num ] ) :<br/><br/><br/>            // Return all the elements in a clean array<br/>            slice.call( this );<br/>    },<br/><br/><br/>    // Take an array of elements and push it onto the stack<br/>    // (returning the new matched element set)<br/>    pushStack: function( elems ) {<br/><br/><br/>        // Build a new jQuery matched element set<br/>        var ret = jQuery.merge( this.constructor(), elems );<br/><br/><br/>        // Add the old object onto the stack (as a reference)<br/>        ret.prevObject = this;<br/>        ret.context = this.context;<br/><br/><br/>        // Return the newly-formed element set<br/>        return ret;<br/>    },<br/><br/><br/>    // Execute a callback for every element in the matched set.<br/>    // (You can seed the arguments with an array of args, but this is<br/>    // only used internally.)<br/>    each: function( callback, args ) {<br/>        return jQuery.each( this, callback, args );<br/>    },<br/><br/><br/>    map: function( callback ) {<br/>        return this.pushStack( jQuery.map(this, function( elem, i ) {<br/>            return callback.call( elem, i, elem );<br/>        }));<br/>    },<br/><br/><br/>    slice: function() {<br/>        return this.pushStack( slice.apply( this, arguments ) );<br/>    },<br/><br/><br/>    first: function() {<br/>        return this.eq( 0 );<br/>    },<br/><br/><br/>    last: function() {<br/>        return this.eq( -1 );<br/>    },<br/><br/><br/>    eq: function( i ) {<br/>        var len = this.length,<br/>            j = +i + ( i &lt; 0 ? len : 0 );<br/>        return this.pushStack( j &gt;= 0 && j &lt; len ? [ this[j] ] : [] );<br/>    },<br/><br/><br/>    end: function() {<br/>        return this.prevObject || this.constructor(null);<br/>    },<br/><br/><br/>    // For internal use only.<br/>    // Behaves like an Array's method, not like a jQuery method.<br/>    push: push,<br/>    sort: deletedIds.sort,<br/>    splice: deletedIds.splice<br/>};<br/> 
</td></tr></table>

          <ul class="vym-list-ul-5">
            <li><span class='vym-branch-5' style='color:#000000' id='mc:0,bo:7,bo:1,bo:2,bo:6,bo:0'>jQuery.fn is an aliasn for jQuery.prototype, so we don't have to type it again</span>  </li>
          </ul>  </li>
          <li><span class='vym-branch-4' style='color:#000000' id='mc:0,bo:7,bo:1,bo:2,bo:7'>jQuery.extend</span>
<table class="vym-note"><tr><td class="vym-note-flag">
<td>
<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.0//EN" "http://www.w3.org/TR/REC-html40/strict.dtd">

<p class="vym-note-paragraph"><span style=" font-family:'DejaVu Sans Mono'; font-size:12pt; color:#000000;">jQuery.extend = jQuery.fn.extend = function() {</span></p>
<p class="vym-note-paragraph"><span style=" font-family:'DejaVu Sans Mono'; font-size:12pt; color:#000000;">    var src, copyIsArray, copy, name, options, clone,</span></p>
<p class="vym-note-paragraph"><span style=" font-family:'DejaVu Sans Mono'; font-size:12pt; color:#000000;">        target = arguments[0] || {},</span></p>
<p class="vym-note-paragraph"><span style=" font-family:'DejaVu Sans Mono'; font-size:12pt; color:#000000;">        i = 1,</span></p>
<p class="vym-note-paragraph"><span style=" font-family:'DejaVu Sans Mono'; font-size:12pt; color:#000000;">        length = arguments.length,</span></p>
<p class="vym-note-paragraph"><span style=" font-family:'DejaVu Sans Mono'; font-size:12pt; color:#000000;">        deep = false;</span></p>
<p class="vym-note-paragraph"><br /></p>
<p class="vym-note-paragraph"><br /></p>
<p class="vym-note-paragraph"><span style=" font-family:'DejaVu Sans Mono'; font-size:12pt; color:#000000;">    // Handle a deep copy situation</span></p>
<p class="vym-note-paragraph"><span style=" font-family:'DejaVu Sans Mono'; font-size:12pt; color:#000000;">    if ( typeof target === &quot;boolean&quot; ) {</span></p>
<p class="vym-note-paragraph"><span style=" font-family:'DejaVu Sans Mono'; font-size:12pt; color:#000000;">        deep = target;</span></p>
<p class="vym-note-paragraph"><br /></p>
<p class="vym-note-paragraph"><br /></p>
<p class="vym-note-paragraph"><span style=" font-family:'DejaVu Sans Mono'; font-size:12pt; color:#000000;">        // skip the boolean and the target</span></p>
<p class="vym-note-paragraph"><span style=" font-family:'DejaVu Sans Mono'; font-size:12pt; color:#000000;">        target = arguments[ i ] || {};</span></p>
<p class="vym-note-paragraph"><span style=" font-family:'DejaVu Sans Mono'; font-size:12pt; color:#000000;">        i++;</span></p>
<p class="vym-note-paragraph"><span style=" font-family:'DejaVu Sans Mono'; font-size:12pt; color:#000000;">    }</span></p>
<p class="vym-note-paragraph"><br /></p>
<p class="vym-note-paragraph"><br /></p>
<p class="vym-note-paragraph"><span style=" font-family:'DejaVu Sans Mono'; font-size:12pt; color:#000000;">    // Handle case when target is a string or something (possible in deep copy)</span></p>
<p class="vym-note-paragraph"><span style=" font-family:'DejaVu Sans Mono'; font-size:12pt; color:#000000;">    if ( typeof target !== &quot;object&quot; &amp;&amp; !jQuery.isFunction(target) ) {</span></p>
<p class="vym-note-paragraph"><span style=" font-family:'DejaVu Sans Mono'; font-size:12pt; color:#000000;">        target = {};</span></p>
<p class="vym-note-paragraph"><span style=" font-family:'DejaVu Sans Mono'; font-size:12pt; color:#000000;">    }</span></p>
<p class="vym-note-paragraph"><br /></p>
<p class="vym-note-paragraph"><br /></p>
<p class="vym-note-paragraph"><span style=" font-family:'DejaVu Sans Mono'; font-size:12pt; color:#000000;">    // extend jQuery itself if only one argument is passed</span></p>
<p class="vym-note-paragraph"><span style=" font-family:'DejaVu Sans Mono'; font-size:12pt; color:#000000;">    if ( i === length ) {</span></p>
<p class="vym-note-paragraph"><span style=" font-family:'DejaVu Sans Mono'; font-size:12pt; color:#000000;">        target = this;</span></p>
<p class="vym-note-paragraph"><span style=" font-family:'DejaVu Sans Mono'; font-size:12pt; color:#000000;">        i--;</span></p>
<p class="vym-note-paragraph"><span style=" font-family:'DejaVu Sans Mono'; font-size:12pt; color:#000000;">    }</span></p>
<p class="vym-note-paragraph"><br /></p>
<p class="vym-note-paragraph"><br /></p>
<p class="vym-note-paragraph"><span style=" font-family:'DejaVu Sans Mono'; font-size:12pt; color:#000000;">    for ( ; i &lt; length; i++ ) {</span></p>
<p class="vym-note-paragraph"><span style=" font-family:'DejaVu Sans Mono'; font-size:12pt; color:#000000;">        // Only deal with non-null/undefined values</span></p>
<p class="vym-note-paragraph"><span style=" font-family:'DejaVu Sans Mono'; font-size:12pt; color:#000000;">        if ( (options = arguments[ i ]) != null ) {</span></p>
<p class="vym-note-paragraph"><span style=" font-family:'DejaVu Sans Mono'; font-size:12pt; color:#000000;">            // Extend the base object</span></p>
<p class="vym-note-paragraph"><span style=" font-family:'DejaVu Sans Mono'; font-size:12pt; color:#000000;">            for ( name in options ) {</span></p>
<p class="vym-note-paragraph"><span style=" font-family:'DejaVu Sans Mono'; font-size:12pt; color:#000000;">                src = target[ name ];</span></p>
<p class="vym-note-paragraph"><span style=" font-family:'DejaVu Sans Mono'; font-size:12pt; color:#000000;">                copy = options[ name ];</span></p>
<p class="vym-note-paragraph"><br /></p>
<p class="vym-note-paragraph"><br /></p>
<p class="vym-note-paragraph"><span style=" font-family:'DejaVu Sans Mono'; font-size:12pt; color:#000000;">                // Prevent never-ending loop</span></p>
<p class="vym-note-paragraph"><span style=" font-family:'DejaVu Sans Mono'; font-size:12pt; color:#000000;">                if ( target === copy ) {</span></p>
<p class="vym-note-paragraph"><span style=" font-family:'DejaVu Sans Mono'; font-size:12pt; color:#000000;">                    continue;</span></p>
<p class="vym-note-paragraph"><span style=" font-family:'DejaVu Sans Mono'; font-size:12pt; color:#000000;">                }</span></p>
<p class="vym-note-paragraph"><br /></p>
<p class="vym-note-paragraph"><br /></p>
<p class="vym-note-paragraph"><span style=" font-family:'DejaVu Sans Mono'; font-size:12pt; color:#000000;">                // Recurse if we're merging plain objects or arrays</span></p>
<p class="vym-note-paragraph"><span style=" font-family:'DejaVu Sans Mono'; font-size:12pt; color:#000000;">                if ( deep &amp;&amp; copy &amp;&amp; ( jQuery.isPlainObject(copy) || (copyIsArray = jQuery.isArray(copy)) ) ) {</span></p>
<p class="vym-note-paragraph"><span style=" font-family:'DejaVu Sans Mono'; font-size:12pt; color:#000000;">                    if ( copyIsArray ) {</span></p>
<p class="vym-note-paragraph"><span style=" font-family:'DejaVu Sans Mono'; font-size:12pt; color:#000000;">                        copyIsArray = false;</span></p>
<p class="vym-note-paragraph"><span style=" font-family:'DejaVu Sans Mono'; font-size:12pt; color:#000000;">                        clone = src &amp;&amp; jQuery.isArray(src) ? src : [];</span></p>
<p class="vym-note-paragraph"><br /></p>
<p class="vym-note-paragraph"><br /></p>
<p class="vym-note-paragraph"><span style=" font-family:'DejaVu Sans Mono'; font-size:12pt; color:#000000;">                    } else {</span></p>
<p class="vym-note-paragraph"><span style=" font-family:'DejaVu Sans Mono'; font-size:12pt; color:#000000;">                        clone = src &amp;&amp; jQuery.isPlainObject(src) ? src : {};</span></p>
<p class="vym-note-paragraph"><span style=" font-family:'DejaVu Sans Mono'; font-size:12pt; color:#000000;">                    }</span></p>
<p class="vym-note-paragraph"><br /></p>
<p class="vym-note-paragraph"><br /></p>
<p class="vym-note-paragraph"><span style=" font-family:'DejaVu Sans Mono'; font-size:12pt; color:#000000;">                    // Never move original objects, clone them</span></p>
<p class="vym-note-paragraph"><span style=" font-family:'DejaVu Sans Mono'; font-size:12pt; color:#000000;">                    target[ name ] = jQuery.extend( deep, clone, copy );</span></p>
<p class="vym-note-paragraph"><br /></p>
<p class="vym-note-paragraph"><br /></p>
<p class="vym-note-paragraph"><span style=" font-family:'DejaVu Sans Mono'; font-size:12pt; color:#000000;">                // Don't bring in undefined values</span></p>
<p class="vym-note-paragraph"><span style=" font-family:'DejaVu Sans Mono'; font-size:12pt; color:#000000;">                } else if ( copy !== undefined ) {</span></p>
<p class="vym-note-paragraph"><span style=" font-family:'DejaVu Sans Mono'; font-size:12pt; color:#000000;">                    target[ name ] = copy;</span></p>
<p class="vym-note-paragraph"><span style=" font-family:'DejaVu Sans Mono'; font-size:12pt; color:#000000;">                }</span></p>
<p class="vym-note-paragraph"><span style=" font-family:'DejaVu Sans Mono'; font-size:12pt; color:#000000;">            }</span></p>
<p class="vym-note-paragraph"><span style=" font-family:'DejaVu Sans Mono'; font-size:12pt; color:#000000;">        }</span></p>
<p class="vym-note-paragraph"><span style=" font-family:'DejaVu Sans Mono'; font-size:12pt; color:#000000;">    }</span></p>
<p class="vym-note-paragraph"><br /></p>
<p class="vym-note-paragraph"><br /></p>
<p class="vym-note-paragraph"><span style=" font-family:'DejaVu Sans Mono'; font-size:12pt; color:#000000;">    // Return the modified object</span></p>
<p class="vym-note-paragraph"><span style=" font-family:'DejaVu Sans Mono'; font-size:12pt; color:#000000;">    return target;</span></p>
<p class="vym-note-paragraph"><span style=" font-family:'DejaVu Sans Mono'; font-size:12pt; color:#000000;">};</span></p>
<p class="vym-note-paragraph"><span style=" font-family:'DejaVu Sans Mono'; font-size:12pt; color:#000000;"> </span></p>
</td></tr></table>

          <ul class="vym-list-ul-5">
            <li><span class='vym-branch-5' style='color:#000000' id='mc:0,bo:7,bo:1,bo:2,bo:7,bo:0'>Perhaps the same concept as the one in Underscore.js</span>  </li>
            <li><span class='vym-branch-5' style='color:#000000' id='mc:0,bo:7,bo:1,bo:2,bo:7,bo:1'>Aliasses to a function expression</span>  </li>
            <li><span class='vym-branch-5' style='color:#000000' id='mc:0,bo:7,bo:1,bo:2,bo:7,bo:2'>Deep copy</span>  </li>
            <li><span class='vym-branch-5' style='color:#000000' id='mc:0,bo:7,bo:1,bo:2,bo:7,bo:3'>Taking the properties and methods of an object and passing it into another
object</span>  </li>
            <li><span class='vym-branch-5' style='color:#000000' id='mc:0,bo:7,bo:1,bo:2,bo:7,bo:4'>Pass as many objects as you'd like</span>  </li>
            <li><span class='vym-branch-5' style='color:#000000' id='mc:0,bo:7,bo:1,bo:2,bo:7,bo:5'>It goes down and calls it again as well.</span>  </li>
            <li><span class='vym-branch-5' style='color:#000000' id='mc:0,bo:7,bo:1,bo:2,bo:7,bo:6'>A really good method to extend objects and the objects objects ...etc.</span>  </li>
            <li><span class='vym-branch-5' style='color:#000000' id='mc:0,bo:7,bo:1,bo:2,bo:7,bo:7'>After making this, it calls uses it immediately</span>
            <ul class="vym-list-ul-6">
              <li><span class='vym-branch-6' style='color:#000000' id='mc:0,bo:7,bo:1,bo:2,bo:7,bo:7,bo:0'>If you pass one argument into the extend method, then it refers to this, or
jQuery itself.</span>
              <ul class="vym-list-ul-7">
                <li><span class='vym-branch-7' style='color:#000000' id='mc:0,bo:7,bo:1,bo:2,bo:7,bo:7,bo:0,bo:0'>isArray</span>  </li>
              </ul>  </li>
            </ul>  </li>
          </ul>  </li>
          <li><span class='vym-branch-4' style='color:#000000' id='mc:0,bo:7,bo:1,bo:2,bo:8'>SizzleJs</span>
<table class="vym-note"><tr><td class="vym-note-flag">
<td>
var Sizzle =<br/>(function( window ) {
</td></tr></table>

          <ul class="vym-list-ul-5">
            <li><span class='vym-branch-5' style='color:#000000' id='mc:0,bo:7,bo:1,bo:2,bo:8,bo:0'>jQuery uses another engine to help it with selecting elements</span>  </li>
            <li><span class='vym-branch-5' style='color:#000000' id='mc:0,bo:7,bo:1,bo:2,bo:8,bo:1'>IFFE's in IFFE's; to extend levels</span>  </li>
          </ul>  </li>
          <li><span class='vym-branch-4' style='color:#000000' id='mc:0,bo:7,bo:1,bo:2,bo:9'>the init constructor, where it is called with new, then returns an array</span>
<table class="vym-note"><tr><td class="vym-note-flag">
<td>
<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.0//EN" "http://www.w3.org/TR/REC-html40/strict.dtd">

<p class="vym-note-paragraph"><span style=" color:#000000;">	init = jQuery.fn.init = function( selector, context ) {</span></p>
<p class="vym-note-paragraph"><span style=" color:#000000;">		var match, elem;</span></p>
<p class="vym-note-paragraph"><br /></p>
<p class="vym-note-paragraph"><span style=" color:#000000;">		// HANDLE: $(&quot;&quot;), $(null), $(undefined), $(false)</span></p>
<p class="vym-note-paragraph"><span style=" color:#000000;">		if ( !selector ) {</span></p>
<p class="vym-note-paragraph"><span style=" color:#000000;">			return this;</span></p>
<p class="vym-note-paragraph"><span style=" color:#000000;">		}</span></p>
<p class="vym-note-paragraph"><br /></p>
<p class="vym-note-paragraph"><span style=" color:#000000;">		// Handle HTML strings</span></p>
<p class="vym-note-paragraph"><span style=" color:#000000;">		if ( typeof selector === &quot;string&quot; ) {</span></p>
<p class="vym-note-paragraph"><span style=" color:#000000;">			if ( selector.charAt(0) === &quot;&lt;&quot; &amp;&amp; selector.charAt( selector.length - 1 ) === &quot;&gt;&quot; &amp;&amp; selector.length &gt;= 3 ) {</span></p>
<p class="vym-note-paragraph"><span style=" color:#000000;">				// Assume that strings that start and end with &lt;&gt; are HTML and skip the regex check</span></p>
<p class="vym-note-paragraph"><span style=" color:#000000;">				match = [ null, selector, null ];</span></p>
<p class="vym-note-paragraph"><br /></p>
<p class="vym-note-paragraph"><span style=" color:#000000;">			} else {</span></p>
<p class="vym-note-paragraph"><span style=" color:#000000;">				match = rquickExpr.exec( selector );</span></p>
<p class="vym-note-paragraph"><span style=" color:#000000;">			}</span></p>
<p class="vym-note-paragraph"><br /></p>
<p class="vym-note-paragraph"><span style=" color:#000000;">			// Match html or make sure no context is specified for #id</span></p>
<p class="vym-note-paragraph"><span style=" color:#000000;">			if ( match &amp;&amp; (match[1] || !context) ) {</span></p>
<p class="vym-note-paragraph"><br /></p>
<p class="vym-note-paragraph"><span style=" color:#000000;">				// HANDLE: $(html) -&gt; $(array)</span></p>
<p class="vym-note-paragraph"><span style=" color:#000000;">				if ( match[1] ) {</span></p>
<p class="vym-note-paragraph"><span style=" color:#000000;">					context = context instanceof jQuery ? context[0] : context;</span></p>
<p class="vym-note-paragraph"><br /></p>
<p class="vym-note-paragraph"><span style=" color:#000000;">					// scripts is true for back-compat</span></p>
<p class="vym-note-paragraph"><span style=" color:#000000;">					// Intentionally let the error be thrown if parseHTML is not present</span></p>
<p class="vym-note-paragraph"><span style=" color:#000000;">					jQuery.merge( this, jQuery.parseHTML(</span></p>
<p class="vym-note-paragraph"><span style=" color:#000000;">						match[1],</span></p>
<p class="vym-note-paragraph"><span style=" color:#000000;">						context &amp;&amp; context.nodeType ? context.ownerDocument || context : document,</span></p>
<p class="vym-note-paragraph"><span style=" color:#000000;">						true</span></p>
<p class="vym-note-paragraph"><span style=" color:#000000;">					) );</span></p>
<p class="vym-note-paragraph"><br /></p>
<p class="vym-note-paragraph"><span style=" color:#000000;">					// HANDLE: $(html, props)</span></p>
<p class="vym-note-paragraph"><span style=" color:#000000;">					if ( rsingleTag.test( match[1] ) &amp;&amp; jQuery.isPlainObject( context ) ) {</span></p>
<p class="vym-note-paragraph"><span style=" color:#000000;">						for ( match in context ) {</span></p>
<p class="vym-note-paragraph"><span style=" color:#000000;">							// Properties of context are called as methods if possible</span></p>
<p class="vym-note-paragraph"><span style=" color:#000000;">							if ( jQuery.isFunction( this[ match ] ) ) {</span></p>
<p class="vym-note-paragraph"><span style=" color:#000000;">								this[ match ]( context[ match ] );</span></p>
<p class="vym-note-paragraph"><br /></p>
<p class="vym-note-paragraph"><span style=" color:#000000;">							// ...and otherwise set as attributes</span></p>
<p class="vym-note-paragraph"><span style=" color:#000000;">							} else {</span></p>
<p class="vym-note-paragraph"><span style=" color:#000000;">								this.attr( match, context[ match ] );</span></p>
<p class="vym-note-paragraph"><span style=" color:#000000;">							}</span></p>
<p class="vym-note-paragraph"><span style=" color:#000000;">						}</span></p>
<p class="vym-note-paragraph"><span style=" color:#000000;">					}</span></p>
<p class="vym-note-paragraph"><br /></p>
<p class="vym-note-paragraph"><span style=" color:#000000;">					return this;</span></p>
<p class="vym-note-paragraph"><br /></p>
<p class="vym-note-paragraph"><span style=" color:#000000;">				// HANDLE: $(#id)</span></p>
<p class="vym-note-paragraph"><span style=" color:#000000;">				} else {</span></p>
<p class="vym-note-paragraph"><span style=" color:#000000;">					elem = document.getElementById( match[2] );</span></p>
<p class="vym-note-paragraph"><br /></p>
<p class="vym-note-paragraph"><span style=" color:#000000;">					// Check parentNode to catch when Blackberry 4.6 returns</span></p>
<p class="vym-note-paragraph"><span style=" color:#000000;">					// nodes that are no longer in the document #6963</span></p>
<p class="vym-note-paragraph"><span style=" color:#000000;">					if ( elem &amp;&amp; elem.parentNode ) {</span></p>
<p class="vym-note-paragraph"><span style=" color:#000000;">						// Handle the case where IE and Opera return items</span></p>
<p class="vym-note-paragraph"><span style=" color:#000000;">						// by name instead of ID</span></p>
<p class="vym-note-paragraph"><span style=" color:#000000;">						if ( elem.id !== match[2] ) {</span></p>
<p class="vym-note-paragraph"><span style=" color:#000000;">							return rootjQuery.find( selector );</span></p>
<p class="vym-note-paragraph"><span style=" color:#000000;">						}</span></p>
<p class="vym-note-paragraph"><br /></p>
<p class="vym-note-paragraph"><span style=" color:#000000;">						// Otherwise, we inject the element directly into the jQuery object</span></p>
<p class="vym-note-paragraph"><span style=" color:#000000;">						this.length = 1;</span></p>
<p class="vym-note-paragraph"><span style=" color:#000000;">						this[0] = elem;</span></p>
<p class="vym-note-paragraph"><span style=" color:#000000;">					}</span></p>
<p class="vym-note-paragraph"><br /></p>
<p class="vym-note-paragraph"><span style=" color:#000000;">					this.context = document;</span></p>
<p class="vym-note-paragraph"><span style=" color:#000000;">					this.selector = selector;</span></p>
<p class="vym-note-paragraph"><span style=" color:#000000;">					return this;</span></p>
<p class="vym-note-paragraph"><span style=" color:#000000;">				}</span></p>
<p class="vym-note-paragraph"><br /></p>
<p class="vym-note-paragraph"><span style=" color:#000000;">			// HANDLE: $(expr, $(...))</span></p>
<p class="vym-note-paragraph"><span style=" color:#000000;">			} else if ( !context || context.jquery ) {</span></p>
<p class="vym-note-paragraph"><span style=" color:#000000;">				return ( context || rootjQuery ).find( selector );</span></p>
<p class="vym-note-paragraph"><br /></p>
<p class="vym-note-paragraph"><span style=" color:#000000;">			// HANDLE: $(expr, context)</span></p>
<p class="vym-note-paragraph"><span style=" color:#000000;">			// (which is just equivalent to: $(context).find(expr)</span></p>
<p class="vym-note-paragraph"><span style=" color:#000000;">			} else {</span></p>
<p class="vym-note-paragraph"><span style=" color:#000000;">				return this.constructor( context ).find( selector );</span></p>
<p class="vym-note-paragraph"><span style=" color:#000000;">			}</span></p>
<p class="vym-note-paragraph"><br /></p>
<p class="vym-note-paragraph"><span style=" color:#000000;">		// HANDLE: $(DOMElement)</span></p>
<p class="vym-note-paragraph"><span style=" color:#000000;">		} else if ( selector.nodeType ) {</span></p>
<p class="vym-note-paragraph"><span style=" color:#000000;">			this.context = this[0] = selector;</span></p>
<p class="vym-note-paragraph"><span style=" color:#000000;">			this.length = 1;</span></p>
<p class="vym-note-paragraph"><span style=" color:#000000;">			return this;</span></p>
<p class="vym-note-paragraph"><br /></p>
<p class="vym-note-paragraph"><span style=" color:#000000;">		// HANDLE: $(function)</span></p>
<p class="vym-note-paragraph"><span style=" color:#000000;">		// Shortcut for document ready</span></p>
<p class="vym-note-paragraph"><span style=" color:#000000;">		} else if ( jQuery.isFunction( selector ) ) {</span></p>
<p class="vym-note-paragraph"><span style=" color:#000000;">			return typeof rootjQuery.ready !== &quot;undefined&quot; ?</span></p>
<p class="vym-note-paragraph"><span style=" color:#000000;">				rootjQuery.ready( selector ) :</span></p>
<p class="vym-note-paragraph"><span style=" color:#000000;">				// Execute immediately if ready is not present</span></p>
<p class="vym-note-paragraph"><span style=" color:#000000;">				selector( jQuery );</span></p>
<p class="vym-note-paragraph"><span style=" color:#000000;">		}</span></p>
<p class="vym-note-paragraph"><br /></p>
<p class="vym-note-paragraph"><span style=" color:#000000;">		if ( selector.selector !== undefined ) {</span></p>
<p class="vym-note-paragraph"><span style=" color:#000000;">			this.selector = selector.selector;</span></p>
<p class="vym-note-paragraph"><span style=" color:#000000;">			this.context = selector.context;</span></p>
<p class="vym-note-paragraph"><span style=" color:#000000;">		}</span></p>
<p class="vym-note-paragraph"><br /></p>
<p class="vym-note-paragraph"><span style=" color:#000000;">		return jQuery.makeArray( selector, this );</span></p>
<p class="vym-note-paragraph"><span style=" color:#000000;">	};</span></p>
</td></tr></table>

          <ul class="vym-list-ul-5">
            <li><span class='vym-branch-5' style='color:#000000' id='mc:0,bo:7,bo:1,bo:2,bo:9,bo:0'>makeArray</span>
<table class="vym-note"><tr><td class="vym-note-flag">
<td>
<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.0//EN" "http://www.w3.org/TR/REC-html40/strict.dtd">

<p class="vym-note-paragraph"><span style=" color:#000000;">    makeArray: function( arr, results ) {</span></p>
<p class="vym-note-paragraph"><span style=" color:#000000;">        var ret = results || [];</span></p>
<p class="vym-note-paragraph"><br /></p>
<p class="vym-note-paragraph"><br /></p>
<p class="vym-note-paragraph"><span style=" color:#000000;">        if ( arr != null ) {</span></p>
<p class="vym-note-paragraph"><span style=" color:#000000;">            if ( isArraylike( Object(arr) ) ) {</span></p>
<p class="vym-note-paragraph"><span style=" color:#000000;">                jQuery.merge( ret,</span></p>
<p class="vym-note-paragraph"><span style=" color:#000000;">                    typeof arr === &quot;string&quot; ?</span></p>
<p class="vym-note-paragraph"><span style=" color:#000000;">                    [ arr ] : arr</span></p>
<p class="vym-note-paragraph"><span style=" color:#000000;">                );</span></p>
<p class="vym-note-paragraph"><span style=" color:#000000;">            } else {</span></p>
<p class="vym-note-paragraph"><span style=" color:#000000;">                push.call( ret, arr );</span></p>
<p class="vym-note-paragraph"><span style=" color:#000000;">            }</span></p>
<p class="vym-note-paragraph"><span style=" color:#000000;">        }</span></p>
<p class="vym-note-paragraph"><br /></p>
<p class="vym-note-paragraph"><br /></p>
<p class="vym-note-paragraph"><span style=" color:#000000;">        return ret;</span></p>
<p class="vym-note-paragraph"><span style=" color:#000000;">    }</span></p>
<p class="vym-note-paragraph"><span style=" color:#000000;"> </span></p>
</td></tr></table>
  </li>
            <li><span class='vym-branch-5' style='color:#000000' id='mc:0,bo:7,bo:1,bo:2,bo:9,bo:1'>The this variable will be manipulated anyway, yet beefore doing so let's make it
into anarray</span>  </li>
            <li><span class='vym-branch-5' style='color:#000000' id='mc:0,bo:7,bo:1,bo:2,bo:9,bo:2'>The strcutre teaches us that we can return something in  a function construct
only if it's the this vairable</span>  </li>
          </ul>  </li>
          <li><span class='vym-branch-4' style='color:#000000' id='mc:0,bo:7,bo:1,bo:2,bo:10'>Look at Strcuture! Not code!</span>  </li>
          <li><span class='vym-branch-4' style='color:#000000' id='mc:0,bo:7,bo:1,bo:2,bo:11'>init.prototype</span>
<table class="vym-note"><tr><td class="vym-note-flag">
<td>
// Give the init function the jQuery prototype for later instantiation<br/>init.prototype = jQuery.fn;
</td></tr></table>

          <ul class="vym-list-ul-5">
            <li><span class='vym-branch-5' style='color:#000000' id='mc:0,bo:7,bo:1,bo:2,bo:11,bo:0'>var q = $(&quot;ul.people li&quot;)</span>
            <ul class="vym-list-ul-6">
              <li><span class='vym-branch-6' style='color:#000000' id='mc:0,bo:7,bo:1,bo:2,bo:11,bo:0,bo:0'>This calls the function constructor</span>  </li>
            </ul>  </li>
            <li><span class='vym-branch-5' style='color:#000000' id='mc:0,bo:7,bo:1,bo:2,bo:11,bo:1'>The function constructor all new jQuery.fn.init</span>  </li>
            <li><span class='vym-branch-5' style='color:#000000' id='mc:0,bo:7,bo:1,bo:2,bo:11,bo:2'>Has the same prototype in jQuery.prototype</span>  </li>
            <li><span class='vym-branch-5' style='color:#000000' id='mc:0,bo:7,bo:1,bo:2,bo:11,bo:3'>$() calls the a funcition, which calls a funcition constructor, that returns an
object that has all of the same methods and properties as ther jQuery prototype</span>  </li>
            <li><span class='vym-branch-5' style='color:#000000' id='mc:0,bo:7,bo:1,bo:2,bo:11,bo:4'>This processes prevents the need for the new keyword outside of the library</span>  </li>
          </ul>  </li>
          <li><span class='vym-branch-4' style='color:#000000' id='mc:0,bo:7,bo:1,bo:2,bo:12'>What do we want to lear nfrom</span>  </li>
        </ul>  </li>
        <li><span class='vym-branch-3' style='color:#000000' id='mc:0,bo:7,bo:1,bo:3'>jQuery's higher version may not support older browsers (let them DIE!!!)</span>  </li>
        <li><span class='vym-branch-3' style='color:#000000' id='mc:0,bo:7,bo:1,bo:4'>Challenege: Look around</span>
        <ul class="vym-list-ul-4">
          <li><span class='vym-branch-4' style='color:#000000' id='mc:0,bo:7,bo:1,bo:4,bo:0'>Can you find the IFFE</span>  </li>
          <li><span class='vym-branch-4' style='color:#000000' id='mc:0,bo:7,bo:1,bo:4,bo:1'>Object literal</span>  </li>
          <li><span class='vym-branch-4' style='color:#000000' id='mc:0,bo:7,bo:1,bo:4,bo:2'>How is it exposed to the global object?</span>  </li>
          <li><span class='vym-branch-4' style='color:#000000' id='mc:0,bo:7,bo:1,bo:4,bo:3'>what does jquery.fn.init?</span>  </li>
          <li><span class='vym-branch-4' style='color:#000000' id='mc:0,bo:7,bo:1,bo:4,bo:4'>Look for yourself</span>  </li>
        </ul>  </li>
        <li><span class='vym-branch-3' style='color:#000000' id='mc:0,bo:7,bo:1,bo:5'>Is there anything in this code that is impossible for us to understand? If so
why?</span>
        <ul class="vym-list-ul-4">
          <li><span class='vym-branch-4' style='color:#000000' id='mc:0,bo:7,bo:1,bo:5,bo:0'>the conepts themeslves we can understand, then grasp the clever ideas the
frameworks they use</span>  </li>
        </ul>  </li>
        <li><span class='vym-branch-3' style='color:#000000' id='mc:0,bo:7,bo:1,bo:6'>Method Chaining</span>
        <ul class="vym-list-ul-4">
          <li><span class='vym-branch-4' style='color:#000000' id='mc:0,bo:7,bo:1,bo:6,bo:0'>var q = $(ul.people).addClass(&quot;new&quot;).removeClass(&quot;people&quot;)</span>  </li>
          <li><span class='vym-branch-4' style='color:#000000' id='mc:0,bo:7,bo:1,bo:6,bo:1'>How is it able to work on the same $(ul.people) object?</span>  </li>
          <li><span class='vym-branch-4' style='color:#000000' id='mc:0,bo:7,bo:1,bo:6,bo:2'>BWA: Calling mutiple methods on one object at the same time</span>  </li>
          <li><span class='vym-branch-4' style='color:#000000' id='mc:0,bo:7,bo:1,bo:6,bo:3'>How is it that it chains?</span>  </li>
          <li><span class='vym-branch-4' style='color:#000000' id='mc:0,bo:7,bo:1,bo:6,bo:4'>The addClass function does work THEN returns the THIS keyword :D</span>  </li>
          <li><span class='vym-branch-4' style='color:#000000' id='mc:0,bo:7,bo:1,bo:6,bo:5'>Finish the method with returning this</span>  </li>
          <li><span class='vym-branch-4' style='color:#000000' id='mc:0,bo:7,bo:1,bo:6,bo:6'>Then we have method chaining</span>  </li>
        </ul>  </li>
        <li><span class='vym-branch-3' style='color:#000000' id='mc:0,bo:7,bo:1,bo:7'>How is it exposed to the global object?</span>  </li>
      </ul>  </li>
    </ul>
  <h2><span class='vym-branch-1' style='color:#000000' id='mc:0,bo:8'>Building your own Framework/Library</span></h2>
    <ul class="vym-list-ul-2">
      <li><span class='vym-branch-2' style='color:#000000' id='mc:0,bo:8,bo:0'>Interested on strcutre rather than what it does</span>  </li>
      <li><span class='vym-branch-2' style='color:#000000' id='mc:0,bo:8,bo:1'>Grettr</span>
      <ul class="vym-list-ul-3">
        <li><span class='vym-branch-3' style='color:#000000' id='mc:0,bo:8,bo:1,bo:0'>Requirements</span>
        <ul class="vym-list-ul-4">
          <li><span class='vym-branch-4' style='color:#000000' id='mc:0,bo:8,bo:1,bo:0,bo:0'>When given a name, give me formal and informal grettings that I can use
througout my app</span>  </li>
          <li><span class='vym-branch-4' style='color:#000000' id='mc:0,bo:8,bo:1,bo:0,bo:1'>Support English and Spanish</span>  </li>
          <li><span class='vym-branch-4' style='color:#000000' id='mc:0,bo:8,bo:1,bo:0,bo:2'>Reusable, doesn't interfere with others code</span>  </li>
          <li><span class='vym-branch-4' style='color:#000000' id='mc:0,bo:8,bo:1,bo:0,bo:3'>Easy to type strcture</span>
          <ul class="vym-list-ul-5">
            <li><span class='vym-branch-5' style='color:#000000' id='mc:0,bo:8,bo:1,bo:0,bo:3,bo:0'>G$</span>  </li>
          </ul>  </li>
          <li><span class='vym-branch-4' style='color:#000000' id='mc:0,bo:8,bo:1,bo:0,bo:4'>Supports jQuery</span>
          <ul class="vym-list-ul-5">
            <li><span class='vym-branch-5' style='color:#000000' id='mc:0,bo:8,bo:1,bo:0,bo:4,bo:0'>Works with jQuery objects</span>  </li>
            <li><span class='vym-branch-5' style='color:#000000' id='mc:0,bo:8,bo:1,bo:0,bo:4,bo:1'>Passes an elements</span>  </li>
          </ul>  </li>
        </ul>  </li>
      </ul>  </li>
      <li><span class='vym-branch-2' style='color:#000000' id='mc:0,bo:8,bo:2'>Structuring Safe Code</span>
      <ul class="vym-list-ul-3">
        <li><span class='vym-branch-3' style='color:#000000' id='mc:0,bo:8,bo:2,bo:0'>Use an IFFE to prevent variable colition</span>  </li>
        <li><span class='vym-branch-3' style='color:#000000' id='mc:0,bo:8,bo:2,bo:1'>Example</span>
<table class="vym-note"><tr><td class="vym-note-flag">
<td>
(function(global, $) {<br/><br/><br/>})(window, jQuery)<br/> 
</td></tr></table>
  </li>
      </ul>  </li>
      <li><span class='vym-branch-2' style='color:#000000' id='mc:0,bo:8,bo:3'>Our object and it's prototype</span>
      <ul class="vym-list-ul-3">
        <li><span class='vym-branch-3' style='color:#000000' id='mc:0,bo:8,bo:3,bo:0'>We want to have jQuery support</span>  </li>
        <li><span class='vym-branch-3' style='color:#000000' id='mc:0,bo:8,bo:3,bo:1'>Imitate the jQuery object</span>  </li>
        <li><span class='vym-branch-3' style='color:#000000' id='mc:0,bo:8,bo:3,bo:2'>We want a function that returns an object without using the word new</span>  </li>
        <li><span class='vym-branch-3' style='color:#000000' id='mc:0,bo:8,bo:3,bo:3'>expose it to the global object (window) by saying window.ALIAS = OurThingy</span>  </li>
      </ul>  </li>
      <li><span class='vym-branch-2' style='color:#000000' id='mc:0,bo:8,bo:4'>Properties and Chainable Methods</span>
      <ul class="vym-list-ul-3">
        <li><span class='vym-branch-3' style='color:#000000' id='mc:0,bo:8,bo:4,bo:0'>How can we have features in our framework that isn't displayed to the world?</span>
        <ul class="vym-list-ul-4">
          <li><span class='vym-branch-4' style='color:#000000' id='mc:0,bo:8,bo:4,bo:0,bo:0'>var supportedLanguages = [&quot;en&quot;, &quot;es&quot;] // doesn't get exposed</span>  </li>
        </ul>  </li>
        <li><span class='vym-branch-3' style='color:#000000' id='mc:0,bo:8,bo:4,bo:1'>Put methods on the Grettr.prototype to save memory space.</span>
        <ul class="vym-list-ul-4">
          <li><span class='vym-branch-4' style='color:#000000' id='mc:0,bo:8,bo:4,bo:1,bo:0'>Each of the object created will point to the same location in memory</span>  </li>
        </ul>  </li>
      </ul>  </li>
      <li><span class='vym-branch-2' style='color:#000000' id='mc:0,bo:8,bo:5'>Adding jQuery support</span>
      <ul class="vym-list-ul-3">
        <li><span class='vym-branch-3' style='color:#000000' id='mc:0,bo:8,bo:5,bo:0'>How can we add a method that accepts a jQuery selector</span>  </li>
        <li><span class='vym-branch-3' style='color:#000000' id='mc:0,bo:8,bo:5,bo:1'>pass the selectory paramater and use jQuery since our framework imports it</span>
        <ul class="vym-list-ul-4">
          <li><span class='vym-branch-4' style='color:#000000' id='mc:0,bo:8,bo:5,bo:1,bo:0'></span>  </li>
        </ul>  </li>
        <li><span class='vym-branch-3' style='color:#000000' id='mc:0,bo:8,bo:5,bo:2'>Example</span>
<table class="vym-note"><tr><td class="vym-note-flag">
<td>
HTMLgreet: function(selector, formal) {<br/>            if (!$) throw "jQuery isn't loaded"<br/>            if (!selector) throw "No selector"<br/>            let msg<br/><br/>            if(formal) {<br/>                msg = this.greet()<br/>            } else {<br/>                msg = this.informalGreeting()<br/>            }<br/><br/>            $(selector).html(msg)<br/>            <br/>            return this<br/>        }<br/>    }
</td></tr></table>
  </li>
      </ul>  </li>
      <li><span class='vym-branch-2' style='color:#000000' id='mc:0,bo:8,bo:6'>Good Commenting</span>
      <ul class="vym-list-ul-3">
        <li><span class='vym-branch-3' style='color:#000000' id='mc:0,bo:8,bo:6,bo:0'>JavaScript is a very TERSE language.</span>  </li>
        <li><span class='vym-branch-3' style='color:#000000' id='mc:0,bo:8,bo:6,bo:1'>Good comments are very veyr important in JavaScript</span>  </li>
        <li><span class='vym-branch-3' style='color:#000000' id='mc:0,bo:8,bo:6,bo:2'>It will help what your intent is for your future self and future programmers</span>  </li>
        <li><span class='vym-branch-3' style='color:#000000' id='mc:0,bo:8,bo:6,bo:3'>You may have to figure out on what you did</span>  </li>
        <li><span class='vym-branch-3' style='color:#000000' id='mc:0,bo:8,bo:6,bo:4'>Helps you make sure AT THE TIME that you are't doing something by accident.</span>  </li>
        <li><span class='vym-branch-3' style='color:#000000' id='mc:0,bo:8,bo:6,bo:5'>Proof read and comment at the same time!</span>  </li>
      </ul>  </li>
    </ul>
  <h2><span class='vym-branch-1' style='color:#000000' id='mc:0,bo:9'>Extras</span>
<table class="vym-note"><tr><td class="vym-note-flag">
<td>
<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.0//EN" "http://www.w3.org/TR/REC-html40/strict.dtd">

<p class="vym-note-paragraph"><span style=" font-family:'DejaVu Sans Mono'; font-size:12pt;">EXTRAS</span></p>
<p class="vym-note-paragraph"><span style=" font-family:'DejaVu Sans Mono'; font-size:12pt;">For more on Typescript head to: http://www.typescriptlang.org</span></p>
<p class="vym-note-paragraph"><span style=" font-family:'DejaVu Sans Mono'; font-size:12pt;">and try out writing Typescript code in your browser here: http://www.typescriptlang.org/Playground</span></p>
<p class="vym-note-paragraph"><span style=" font-family:'DejaVu Sans Mono'; font-size:12pt;">For more on Traceur head to: https://github.com/google/traceur-compiler</span></p>
<p class="vym-note-paragraph"><span style=" font-family:'DejaVu Sans Mono'; font-size:12pt;">and try out writing ES6 code in Traceur in your browser here: https://google.github.io/traceur-compiler/demo/repl.html#</span></p>
<p class="vym-note-paragraph"><br /></p>
<p class="vym-note-paragraph"><span style=" font-family:'DejaVu Sans Mono'; font-size:12pt;"> aa</span></p>
</td></tr></table>
</h2>
    <ul class="vym-list-ul-2">
      <li><span class='vym-branch-2' style='color:#000000' id='mc:0,bo:9,bo:0'>Transpile</span>
      <ul class="vym-list-ul-3">
        <li><span class='vym-branch-3' style='color:#000000' id='mc:0,bo:9,bo:0,bo:0'>take one language and change the syntaxs into another lanuage</span>  </li>
        <li><span class='vym-branch-3' style='color:#000000' id='mc:0,bo:9,bo:0,bo:1'>Typescript</span>  </li>
        <li><span class='vym-branch-3' style='color:#000000' id='mc:0,bo:9,bo:0,bo:2'>Adds additional features to JavaScript, yet JavaScript is additional informatin</span>  </li>
        <li><span class='vym-branch-3' style='color:#000000' id='mc:0,bo:9,bo:0,bo:3'>Traceur</span>  </li>
      </ul>  </li>
      <li><span class='vym-branch-2' style='color:#000000' id='mc:0,bo:9,bo:1'>ES6</span>
<table class="vym-note"><tr><td class="vym-note-flag">
<td>
https://github.com/lukehoban/es6features 
</td></tr></table>
  </li>
    </ul>
  

<map name='imagemap'>
  <area shape='rect' coords='2754.24,2969.02,3015.74,3006.02' href='#mc:0'>
  <area shape='rect' coords='3253.41,2726.88,3373.07,2760.88' href='#mc:0,bo:0'>
  <area shape='rect' coords='3394.07,2633.88,3608.33,2663.88' href='#mc:0,bo:0,bo:0'>
  <area shape='rect' coords='3629.33,2635.88,3701.72,2661.88' href='#mc:0,bo:0,bo:0,bo:0'>
  <area shape='rect' coords='3394.07,2704.88,3494.66,2734.88' href='#mc:0,bo:0,bo:1'>
  <area shape='rect' coords='3515.66,2665.88,3731.5,2717.88' href='#mc:0,bo:0,bo:1,bo:0'>
  <area shape='rect' coords='3515.66,2719.88,3572.99,2745.88' href='#mc:0,bo:0,bo:1,bo:1'>
  <area shape='rect' coords='3515.66,2747.88,3564.49,2773.88' href='#mc:0,bo:0,bo:1,bo:2'>
  <area shape='rect' coords='3394.07,2799.88,3489.05,2829.88' href='#mc:0,bo:0,bo:2'>
  <area shape='rect' coords='3510.05,2775.88,3765.38,2853.88' href='#mc:0,bo:0,bo:2,bo:0'>
  <area shape='rect' coords='2454.23,1781.79,2835.52,1815.79' href='#mc:0,bo:1'>
  <area shape='rect' coords='2343.79,438.788,2433.23,468.788' href='#mc:0,bo:1,bo:0'>
  <area shape='rect' coords='2205.37,250.788,2322.79,276.788' href='#mc:0,bo:1,bo:0,bo:0'>
  <area shape='rect' coords='2026.82,181.788,2184.37,207.788' href='#mc:0,bo:1,bo:0,bo:0,bo:0'>
  <area shape='rect' coords='2059.09,236.788,2184.37,262.788' href='#mc:0,bo:1,bo:0,bo:0,bo:1'>
  <area shape='rect' coords='1838.27,209.788,2038.09,235.788' href='#mc:0,bo:1,bo:0,bo:0,bo:1,bo:0'>
  <area shape='rect' coords='1787.82,237.788,2038.09,289.788' href='#mc:0,bo:1,bo:0,bo:0,bo:1,bo:1'>
  <area shape='rect' coords='1956.19,291.788,2184.37,317.788' href='#mc:0,bo:1,bo:0,bo:0,bo:2'>
  <area shape='rect' coords='2012.69,319.788,2184.37,345.788' href='#mc:0,bo:1,bo:0,bo:0,bo:3'>
  <area shape='rect' coords='2204.41,401.788,2322.79,427.788' href='#mc:0,bo:1,bo:0,bo:1'>
  <area shape='rect' coords='1924.66,347.788,2183.41,399.788' href='#mc:0,bo:1,bo:0,bo:1,bo:0'>
  <area shape='rect' coords='1949.12,401.788,2183.41,453.788' href='#mc:0,bo:1,bo:0,bo:1,bo:1'>
  <area shape='rect' coords='1968.96,455.788,2183.41,481.788' href='#mc:0,bo:1,bo:0,bo:1,bo:2'>
  <area shape='rect' coords='2199.88,537.788,2322.79,563.788' href='#mc:0,bo:1,bo:0,bo:2'>
  <area shape='rect' coords='1915.37,483.788,2178.88,535.788' href='#mc:0,bo:1,bo:0,bo:2,bo:0'>
  <area shape='rect' coords='1920.65,537.788,2178.88,563.788' href='#mc:0,bo:1,bo:0,bo:2,bo:1'>
  <area shape='rect' coords='1926.02,565.788,2178.88,617.788' href='#mc:0,bo:1,bo:0,bo:2,bo:2'>
  <area shape='rect' coords='2230.4,659.788,2322.79,685.788' href='#mc:0,bo:1,bo:0,bo:3'>
  <area shape='rect' coords='1937.94,619.788,2209.4,697.788' href='#mc:0,bo:1,bo:0,bo:3,bo:0'>
  <area shape='rect' coords='2031.74,699.788,2209.4,725.788' href='#mc:0,bo:1,bo:0,bo:3,bo:1'>
  <area shape='rect' coords='2147.46,919.788,2433.23,949.788' href='#mc:0,bo:1,bo:1'>
  <area shape='rect' coords='1867.76,728.788,2126.46,780.788' href='#mc:0,bo:1,bo:1,bo:0'>
  <area shape='rect' coords='1816.48,727.788,1846.76,753.788' href='#mc:0,bo:1,bo:1,bo:0,bo:0'>
  <area shape='rect' coords='1758.68,755.788,1846.76,781.788' href='#mc:0,bo:1,bo:1,bo:0,bo:1'>
  <area shape='rect' coords='1991.09,852.788,2126.46,878.788' href='#mc:0,bo:1,bo:1,bo:1'>
  <area shape='rect' coords='1939.8,783.788,1970.09,809.788' href='#mc:0,bo:1,bo:1,bo:1,bo:0'>
  <area shape='rect' coords='1913.55,811.788,1970.09,837.788' href='#mc:0,bo:1,bo:1,bo:1,bo:1'>
  <area shape='rect' coords='1751.77,839.788,1970.09,891.788' href='#mc:0,bo:1,bo:1,bo:1,bo:2'>
  <area shape='rect' coords='1522.16,852.788,1730.77,878.788' href='#mc:0,bo:1,bo:1,bo:1,bo:2,bo:0'>
  <area shape='rect' coords='1817.93,893.788,1970.09,919.788' href='#mc:0,bo:1,bo:1,bo:1,bo:3'>
  <area shape='rect' coords='1773.57,921.788,1970.09,947.788' href='#mc:0,bo:1,bo:1,bo:1,bo:4'>
  <area shape='rect' coords='1945.57,976.788,2126.46,1002.79' href='#mc:0,bo:1,bo:1,bo:2'>
  <area shape='rect' coords='1692.66,949.788,1924.57,1001.79' href='#mc:0,bo:1,bo:1,bo:2,bo:0'>
  <area shape='rect' coords='1837.07,1003.79,1924.57,1029.79' href='#mc:0,bo:1,bo:1,bo:2,bo:1'>
  <area shape='rect' coords='2074.82,1073.79,2126.46,1099.79' href='#mc:0,bo:1,bo:1,bo:3'>
  <area shape='rect' coords='1942.65,1073.79,2053.82,1099.79' href='#mc:0,bo:1,bo:1,bo:3,bo:0'>
  <area shape='rect' coords='1831.29,1031.79,1921.65,1057.79' href='#mc:0,bo:1,bo:1,bo:3,bo:0,bo:0'>
  <area shape='rect' coords='1891.37,1059.79,1921.65,1085.79' href='#mc:0,bo:1,bo:1,bo:3,bo:0,bo:1'>
  <area shape='rect' coords='1865.12,1087.79,1921.65,1113.79' href='#mc:0,bo:1,bo:1,bo:3,bo:0,bo:2'>
  <area shape='rect' coords='1852.59,1115.79,1921.65,1141.79' href='#mc:0,bo:1,bo:1,bo:3,bo:0,bo:3'>
  <area shape='rect' coords='2173.99,1292.79,2433.23,1352.79' href='#mc:0,bo:1,bo:2'>
  <area shape='rect' coords='2093.9,1143.79,2152.99,1169.79' href='#mc:0,bo:1,bo:2,bo:0'>
  <area shape='rect' coords='1860.46,1171.79,2152.99,1197.79' href='#mc:0,bo:1,bo:2,bo:1'>
  <area shape='rect' coords='1617.4,1171.79,1839.46,1197.79' href='#mc:0,bo:1,bo:2,bo:1,bo:0'>
  <area shape='rect' coords='2034.35,1254.79,2152.99,1280.79' href='#mc:0,bo:1,bo:2,bo:2'>
  <area shape='rect' coords='1922.99,1199.79,2013.35,1225.79' href='#mc:0,bo:1,bo:2,bo:2,bo:0'>
  <area shape='rect' coords='1983.07,1227.79,2013.35,1253.79' href='#mc:0,bo:1,bo:2,bo:2,bo:1'>
  <area shape='rect' coords='1910.82,1255.79,2013.35,1281.79' href='#mc:0,bo:1,bo:2,bo:2,bo:2'>
  <area shape='rect' coords='1768.54,1283.79,2013.35,1335.79' href='#mc:0,bo:1,bo:2,bo:2,bo:3'>
  <area shape='rect' coords='1493.52,1283.79,1747.54,1335.79' href='#mc:0,bo:1,bo:2,bo:2,bo:3,bo:0'>
  <area shape='rect' coords='2058.09,1379.79,2152.99,1405.79' href='#mc:0,bo:1,bo:2,bo:3'>
  <area shape='rect' coords='1819.27,1337.79,2015.09,1363.79' href='#mc:0,bo:1,bo:2,bo:3,bo:0'>
  <area shape='rect' coords='1770.15,1365.79,2015.09,1391.79' href='#mc:0,bo:1,bo:2,bo:3,bo:1'>
  <area shape='rect' coords='1844.51,1393.79,2015.09,1419.79' href='#mc:0,bo:1,bo:2,bo:3,bo:2'>
  <area shape='rect' coords='1872.68,1421.79,2015.09,1447.79' href='#mc:0,bo:1,bo:2,bo:3,bo:3'>
  <area shape='rect' coords='1927.85,1449.79,2152.99,1501.79' href='#mc:0,bo:1,bo:2,bo:4'>
  <area shape='rect' coords='2213.76,1515.79,2433.23,1545.79' href='#mc:0,bo:1,bo:3'>
  <area shape='rect' coords='2021.66,1503.79,2192.76,1529.79' href='#mc:0,bo:1,bo:3,bo:0'>
  <area shape='rect' coords='1970.54,1531.79,2192.76,1557.79' href='#mc:0,bo:1,bo:3,bo:1'>
  <area shape='rect' coords='2180.74,1651.79,2433.23,1711.79' href='#mc:0,bo:1,bo:4'>
  <area shape='rect' coords='1970.1,1559.79,2159.74,1585.79' href='#mc:0,bo:1,bo:4,bo:0'>
  <area shape='rect' coords='2064.84,1627.79,2159.74,1653.79' href='#mc:0,bo:1,bo:4,bo:1'>
  <area shape='rect' coords='1775.18,1587.79,2021.84,1665.79' href='#mc:0,bo:1,bo:4,bo:1,bo:0'>
  <area shape='rect' coords='1799.59,1667.79,2021.84,1693.79' href='#mc:0,bo:1,bo:4,bo:1,bo:1'>
  <area shape='rect' coords='1942.96,1695.79,2159.74,1747.79' href='#mc:0,bo:1,bo:4,bo:2'>
  <area shape='rect' coords='2017.23,1763.79,2159.74,1789.79' href='#mc:0,bo:1,bo:4,bo:3'>
  <area shape='rect' coords='1863.77,1749.79,1996.23,1775.79' href='#mc:0,bo:1,bo:4,bo:3,bo:0'>
  <area shape='rect' coords='1774.74,1777.79,1996.23,1803.79' href='#mc:0,bo:1,bo:4,bo:3,bo:1'>
  <area shape='rect' coords='2160.68,1856.79,2433.23,1916.79' href='#mc:0,bo:1,bo:5'>
  <area shape='rect' coords='1880.12,1819.79,2139.68,1871.79' href='#mc:0,bo:1,bo:5,bo:0'>
  <area shape='rect' coords='1703.3,1805.79,1859.12,1831.79' href='#mc:0,bo:1,bo:5,bo:0,bo:0'>
  <area shape='rect' coords='1611.15,1833.79,1859.12,1885.79' href='#mc:0,bo:1,bo:5,bo:0,bo:1'>
  <area shape='rect' coords='1941.27,1914.79,2139.68,1940.79' href='#mc:0,bo:1,bo:5,bo:1'>
  <area shape='rect' coords='1829.9,1887.79,1920.27,1913.79' href='#mc:0,bo:1,bo:5,bo:1,bo:0'>
  <area shape='rect' coords='1676.04,1915.79,1920.27,1967.79' href='#mc:0,bo:1,bo:5,bo:1,bo:1'>
  <area shape='rect' coords='2122.54,2131.79,2433.23,2161.79' href='#mc:0,bo:1,bo:6'>
  <area shape='rect' coords='1880.34,1969.79,2101.54,1995.79' href='#mc:0,bo:1,bo:6,bo:0'>
  <area shape='rect' coords='2006.63,1997.79,2101.54,2023.79' href='#mc:0,bo:1,bo:6,bo:1'>
  <area shape='rect' coords='1976.43,2134.79,1998.43,2156.79' href='file:///home/juxley/Pictures/executionstack.png'>
  <area shape='rect' coords='1998.43,2134.79,2101.54,2160.79' href='#mc:0,bo:1,bo:6,bo:2'>
  <area shape='rect' coords='1757.65,2039.79,1955.43,2065.79' href='#mc:0,bo:1,bo:6,bo:2,bo:0'>
  <area shape='rect' coords='1690.55,2025.79,1736.65,2051.79' href='#mc:0,bo:1,bo:6,bo:2,bo:0,bo:0'>
  <area shape='rect' coords='1669.19,2053.79,1736.65,2079.79' href='#mc:0,bo:1,bo:6,bo:2,bo:0,bo:1'>
  <area shape='rect' coords='1779.73,2122.79,1955.43,2148.79' href='#mc:0,bo:1,bo:6,bo:2,bo:1'>
  <area shape='rect' coords='1699.55,2108.79,1758.73,2134.79' href='#mc:0,bo:1,bo:6,bo:2,bo:1,bo:0'>
  <area shape='rect' coords='1505.94,2081.79,1678.55,2107.79' href='#mc:0,bo:1,bo:6,bo:2,bo:1,bo:0,bo:0'>
  <area shape='rect' coords='1430.34,2109.79,1678.55,2161.79' href='#mc:0,bo:1,bo:6,bo:2,bo:1,bo:0,bo:1'>
  <area shape='rect' coords='1696.94,2163.79,1758.73,2189.79' href='#mc:0,bo:1,bo:6,bo:2,bo:1,bo:1'>
  <area shape='rect' coords='1708.34,2191.79,1955.43,2269.79' href='#mc:0,bo:1,bo:6,bo:2,bo:2'>
  <area shape='rect' coords='1891.99,2271.79,2101.54,2323.79' href='#mc:0,bo:1,bo:6,bo:3'>
  <area shape='rect' coords='1663.16,2271.79,1870.99,2323.79' href='#mc:0,bo:1,bo:6,bo:3,bo:0'>
  <area shape='rect' coords='2117.29,2378.79,2433.23,2408.79' href='#mc:0,bo:1,bo:7'>
  <area shape='rect' coords='1964.73,2380.79,2096.29,2406.79' href='#mc:0,bo:1,bo:7,bo:0'>
  <area shape='rect' coords='1690.99,2325.79,1943.73,2351.79' href='#mc:0,bo:1,bo:7,bo:0,bo:0'>
  <area shape='rect' coords='1801.84,2353.79,1943.73,2379.79' href='#mc:0,bo:1,bo:7,bo:0,bo:1'>
  <area shape='rect' coords='1707.74,2381.79,1943.73,2433.79' href='#mc:0,bo:1,bo:7,bo:0,bo:2'>
  <area shape='rect' coords='1848.82,2435.79,1943.73,2461.79' href='#mc:0,bo:1,bo:7,bo:0,bo:3'>
  <area shape='rect' coords='1565.26,2435.79,1805.82,2461.79' href='#mc:0,bo:1,bo:7,bo:0,bo:3,bo:0'>
  <area shape='rect' coords='2301.15,2624.79,2433.23,2654.79' href='#mc:0,bo:1,bo:8'>
  <area shape='rect' coords='2174.44,2463.79,2280.15,2489.79' href='#mc:0,bo:1,bo:8,bo:0'>
  <area shape='rect' coords='2023.05,2519.79,2045.05,2541.79' href='file:///home/juxley/Pictures/scopechain1.png'>
  <area shape='rect' coords='2045.05,2519.79,2280.15,2597.79' href='#mc:0,bo:1,bo:8,bo:1'>
  <area shape='rect' coords='1919.88,2491.79,2002.05,2517.79' href='#mc:0,bo:1,bo:8,bo:1,bo:0'>
  <area shape='rect' coords='1762.29,2519.79,2002.05,2571.79' href='#mc:0,bo:1,bo:8,bo:1,bo:1'>
  <area shape='rect' coords='1755.48,2586.79,2002.05,2612.79' href='#mc:0,bo:1,bo:8,bo:1,bo:2'>
  <area shape='rect' coords='1611.57,2586.79,1734.48,2612.79' href='#mc:0,bo:1,bo:8,bo:1,bo:2,bo:0'>
  <area shape='rect' coords='1352.6,2573.79,1590.57,2625.79' href='#mc:0,bo:1,bo:8,bo:1,bo:2,bo:0,bo:0'>
  <area shape='rect' coords='2035.55,2627.79,2280.15,2679.79' href='#mc:0,bo:1,bo:8,bo:2'>
  <area shape='rect' coords='2041.84,2681.79,2280.15,2733.79' href='#mc:0,bo:1,bo:8,bo:3'>
  <area shape='rect' coords='2155.52,2735.79,2280.15,2761.79' href='#mc:0,bo:1,bo:8,bo:4'>
  <area shape='rect' coords='2028.82,2735.79,2134.52,2761.79' href='#mc:0,bo:1,bo:8,bo:4,bo:0'>
  <area shape='rect' coords='2092.63,2763.79,2280.15,2815.79' href='#mc:0,bo:1,bo:8,bo:5'>
  <area shape='rect' coords='2317.65,2896.79,2433.23,2926.79' href='#mc:0,bo:1,bo:9'>
  <area shape='rect' coords='2058.19,2830.79,2296.65,2856.79' href='#mc:0,bo:1,bo:9,bo:0'>
  <area shape='rect' coords='1802.35,2817.79,2037.19,2869.79' href='#mc:0,bo:1,bo:9,bo:0,bo:0'>
  <area shape='rect' coords='1766.6,2830.79,1781.35,2856.79' href='#mc:0,bo:1,bo:9,bo:0,bo:0,bo:0'>
  <area shape='rect' coords='2166.35,2925.79,2296.65,2951.79' href='#mc:0,bo:1,bo:9,bo:1'>
  <area shape='rect' coords='1929.38,2925.79,2145.35,2951.79' href='#mc:0,bo:1,bo:9,bo:1,bo:0'>
  <area shape='rect' coords='1816.54,2871.79,1908.38,2897.79' href='#mc:0,bo:1,bo:9,bo:1,bo:0,bo:0'>
  <area shape='rect' coords='1694.41,2899.79,1908.38,2951.79' href='#mc:0,bo:1,bo:9,bo:1,bo:0,bo:1'>
  <area shape='rect' coords='1683.05,2953.79,1908.38,3005.79' href='#mc:0,bo:1,bo:9,bo:1,bo:0,bo:2'>
  <area shape='rect' coords='2244.34,3196.79,2433.23,3226.79' href='#mc:0,bo:1,bo:10'>
  <area shape='rect' coords='2068.26,3007.79,2223.34,3033.79' href='#mc:0,bo:1,bo:10,bo:0'>
  <area shape='rect' coords='2137.24,3117.79,2223.34,3143.79' href='#mc:0,bo:1,bo:10,bo:1'>
  <area shape='rect' coords='1853.77,3035.79,2116.24,3087.79' href='#mc:0,bo:1,bo:10,bo:1,bo:0'>
  <area shape='rect' coords='1869.76,3089.79,2116.24,3115.79' href='#mc:0,bo:1,bo:10,bo:1,bo:1'>
  <area shape='rect' coords='1773.02,3089.79,1848.76,3115.79' href='#mc:0,bo:1,bo:10,bo:1,bo:1,bo:0'>
  <area shape='rect' coords='2044.93,3158.79,2116.24,3184.79' href='#mc:0,bo:1,bo:10,bo:1,bo:2'>
  <area shape='rect' coords='1808.99,3117.79,2023.93,3169.79' href='#mc:0,bo:1,bo:10,bo:1,bo:2,bo:0'>
  <area shape='rect' coords='1854.62,3171.79,2023.93,3197.79' href='#mc:0,bo:1,bo:10,bo:1,bo:2,bo:1'>
  <area shape='rect' coords='1842.65,3199.79,2023.93,3225.79' href='#mc:0,bo:1,bo:10,bo:1,bo:2,bo:2'>
  <area shape='rect' coords='2120.23,3227.79,2223.34,3253.79' href='#mc:0,bo:1,bo:10,bo:2'>
  <area shape='rect' coords='2128.43,3295.79,2223.34,3321.79' href='#mc:0,bo:1,bo:10,bo:3'>
  <area shape='rect' coords='1876.77,3255.79,2085.43,3281.79' href='#mc:0,bo:1,bo:10,bo:3,bo:0'>
  <area shape='rect' coords='1848.8,3283.79,2085.43,3361.79' href='#mc:0,bo:1,bo:10,bo:3,bo:1'>
  <area shape='rect' coords='1608.12,3296.79,1827.8,3348.79' href='#mc:0,bo:1,bo:10,bo:3,bo:1,bo:0'>
  <area shape='rect' coords='1981.88,3363.79,2223.34,3415.79' href='#mc:0,bo:1,bo:10,bo:4'>
  <area shape='rect' coords='1711.34,3363.79,1960.88,3415.79' href='#mc:0,bo:1,bo:10,bo:4,bo:0'>
  <area shape='rect' coords='3902,1682.56,4096.28,1716.56' href='#mc:0,bo:2'>
  <area shape='rect' coords='4117.28,493.556,4299.42,523.556' href='#mc:0,bo:2,bo:0'>
  <area shape='rect' coords='4320.42,454.556,4426,480.556' href='#mc:0,bo:2,bo:0,bo:0'>
  <area shape='rect' coords='4447,428.556,4676.62,506.556' href='#mc:0,bo:2,bo:0,bo:0,bo:0'>
  <area shape='rect' coords='4320.42,535.556,4406.21,561.556' href='#mc:0,bo:2,bo:0,bo:1'>
  <area shape='rect' coords='4427.21,508.556,4658.07,560.556' href='#mc:0,bo:2,bo:0,bo:1,bo:0'>
  <area shape='rect' coords='4427.21,562.556,4598.46,588.556' href='#mc:0,bo:2,bo:0,bo:1,bo:1'>
  <area shape='rect' coords='4117.28,740.556,4240.67,770.556' href='#mc:0,bo:2,bo:1'>
  <area shape='rect' coords='4261.67,590.556,4353.54,616.556' href='#mc:0,bo:2,bo:1,bo:0'>
  <area shape='rect' coords='4261.67,618.556,4351.59,644.556' href='#mc:0,bo:2,bo:1,bo:1'>
  <area shape='rect' coords='4261.67,770.556,4403.18,796.556' href='#mc:0,bo:2,bo:1,bo:2'>
  <area shape='rect' coords='4424.18,659.556,4496.18,685.556' href='#mc:0,bo:2,bo:1,bo:2,bo:0'>
  <area shape='rect' coords='4517.18,646.556,4741.29,698.556' href='#mc:0,bo:2,bo:1,bo:2,bo:0,bo:0'>
  <area shape='rect' coords='4424.18,713.556,4456.78,739.556' href='#mc:0,bo:2,bo:1,bo:2,bo:1'>
  <area shape='rect' coords='4477.78,700.556,4728.23,752.556' href='#mc:0,bo:2,bo:1,bo:2,bo:1,bo:0'>
  <area shape='rect' coords='4424.18,768.556,4482.32,794.556' href='#mc:0,bo:2,bo:1,bo:2,bo:2'>
  <area shape='rect' coords='4503.32,754.556,4536.73,780.556' href='#mc:0,bo:2,bo:1,bo:2,bo:2,bo:0'>
  <area shape='rect' coords='4503.32,782.556,4539.96,808.556' href='#mc:0,bo:2,bo:1,bo:2,bo:2,bo:1'>
  <area shape='rect' coords='4424.18,824.556,4483.9,850.556' href='#mc:0,bo:2,bo:1,bo:2,bo:3'>
  <area shape='rect' coords='4504.9,810.556,4648.43,836.556' href='#mc:0,bo:2,bo:1,bo:2,bo:3,bo:0'>
  <area shape='rect' coords='4504.9,838.556,4735.43,864.556' href='#mc:0,bo:2,bo:1,bo:2,bo:3,bo:1'>
  <area shape='rect' coords='4424.18,866.556,4468.71,892.556' href='#mc:0,bo:2,bo:1,bo:2,bo:4'>
  <area shape='rect' coords='4489.71,866.556,4597.73,892.556' href='#mc:0,bo:2,bo:1,bo:2,bo:4,bo:0'>
  <area shape='rect' coords='4424.18,894.556,4477.26,920.556' href='#mc:0,bo:2,bo:1,bo:2,bo:5'>
  <area shape='rect' coords='4498.26,894.556,4527.23,920.556' href='#mc:0,bo:2,bo:1,bo:2,bo:5,bo:0'>
  <area shape='rect' coords='4117.28,1056.56,4340.15,1086.56' href='#mc:0,bo:2,bo:2'>
  <area shape='rect' coords='4361.15,922.556,4547.1,974.556' href='#mc:0,bo:2,bo:2,bo:0'>
  <area shape='rect' coords='4361.15,976.556,4598.32,1028.56' href='#mc:0,bo:2,bo:2,bo:1'>
  <area shape='rect' coords='4361.15,1058.56,4427.15,1084.56' href='#mc:0,bo:2,bo:2,bo:2'>
  <area shape='rect' coords='4448.15,1030.56,4586.68,1056.56' href='#mc:0,bo:2,bo:2,bo:2,bo:0'>
  <area shape='rect' coords='4448.15,1058.56,4507.84,1084.56' href='#mc:0,bo:2,bo:2,bo:2,bo:1'>
  <area shape='rect' coords='4448.15,1086.56,4537.85,1112.56' href='#mc:0,bo:2,bo:2,bo:2,bo:2'>
  <area shape='rect' coords='4361.15,1114.56,4582.59,1166.56' href='#mc:0,bo:2,bo:2,bo:3'>
  <area shape='rect' coords='4361.15,1168.56,4584.85,1220.56' href='#mc:0,bo:2,bo:2,bo:4'>
  <area shape='rect' coords='4117.28,1383.56,4415.56,1413.56' href='#mc:0,bo:2,bo:3'>
  <area shape='rect' coords='4436.56,1250.56,4574.7,1276.56' href='#mc:0,bo:2,bo:3,bo:0'>
  <area shape='rect' coords='4595.7,1222.56,4800.54,1248.56' href='#mc:0,bo:2,bo:3,bo:0,bo:0'>
  <area shape='rect' coords='4595.7,1250.56,4752.75,1276.56' href='#mc:0,bo:2,bo:3,bo:0,bo:1'>
  <area shape='rect' coords='4595.7,1278.56,4848.73,1304.56' href='#mc:0,bo:2,bo:3,bo:0,bo:2'>
  <area shape='rect' coords='4436.56,1359.56,4578.54,1385.56' href='#mc:0,bo:2,bo:3,bo:1'>
  <area shape='rect' coords='4599.54,1306.56,4829.5,1358.56' href='#mc:0,bo:2,bo:3,bo:1,bo:0'>
  <area shape='rect' coords='4599.54,1360.56,4851.21,1438.56' href='#mc:0,bo:2,bo:3,bo:1,bo:1'>
  <area shape='rect' coords='4436.56,1440.56,4458.56,1462.56' href='file:///home/juxley/Documents/Websites/Operator-Precedence-In-Javascript.pdf'>
  <area shape='rect' coords='4458.56,1440.56,4954.32,1466.56' href='#mc:0,bo:2,bo:3,bo:2'>
  <area shape='rect' coords='4436.56,1468.56,4667.56,1520.56' href='#mc:0,bo:2,bo:3,bo:3'>
  <area shape='rect' coords='4436.56,1522.56,4656.03,1574.56' href='#mc:0,bo:2,bo:3,bo:4'>
  <area shape='rect' coords='4117.28,1765.56,4330.29,1795.56' href='#mc:0,bo:2,bo:4'>
  <area shape='rect' coords='4351.29,1576.56,4578.92,1628.56' href='#mc:0,bo:2,bo:4,bo:0'>
  <area shape='rect' coords='4351.29,1630.56,4466.04,1656.56' href='#mc:0,bo:2,bo:4,bo:1'>
  <area shape='rect' coords='4351.29,1658.56,4388.31,1684.56' href='#mc:0,bo:2,bo:4,bo:2'>
  <area shape='rect' coords='4409.31,1658.56,4424.73,1684.56' href='#mc:0,bo:2,bo:4,bo:2,bo:0'>
  <area shape='rect' coords='4351.29,1741.56,4398.9,1767.56' href='#mc:0,bo:2,bo:4,bo:3'>
  <area shape='rect' coords='4419.9,1686.56,4442.75,1712.56' href='#mc:0,bo:2,bo:4,bo:3,bo:0'>
  <area shape='rect' coords='4419.9,1714.56,4620.82,1740.56' href='#mc:0,bo:2,bo:4,bo:3,bo:1'>
  <area shape='rect' coords='4419.9,1742.56,4679.9,1794.56' href='#mc:0,bo:2,bo:4,bo:3,bo:2'>
  <area shape='rect' coords='4419.9,1796.56,4606.56,1822.56' href='#mc:0,bo:2,bo:4,bo:3,bo:3'>
  <area shape='rect' coords='4627.56,1796.56,4709.81,1822.56' href='#mc:0,bo:2,bo:4,bo:3,bo:3,bo:0'>
  <area shape='rect' coords='4351.29,1824.56,4577.46,1876.56' href='#mc:0,bo:2,bo:4,bo:4'>
  <area shape='rect' coords='4598.46,1837.56,4752.34,1863.56' href='#mc:0,bo:2,bo:4,bo:4,bo:0'>
  <area shape='rect' coords='4351.29,1878.56,4604.25,1930.56' href='#mc:0,bo:2,bo:4,bo:5'>
  <area shape='rect' coords='4351.29,1932.56,4590.12,1984.56' href='#mc:0,bo:2,bo:4,bo:6'>
  <area shape='rect' coords='4117.28,2150.56,4297.4,2180.56' href='#mc:0,bo:2,bo:5'>
  <area shape='rect' coords='4318.4,1986.56,4383.76,2012.56' href='#mc:0,bo:2,bo:5,bo:0'>
  <area shape='rect' coords='4404.76,1986.56,4438.17,2012.56' href='#mc:0,bo:2,bo:5,bo:0,bo:0'>
  <area shape='rect' coords='4318.4,2014.56,4377.01,2040.56' href='#mc:0,bo:2,bo:5,bo:1'>
  <area shape='rect' coords='4398.01,2014.56,4431.42,2040.56' href='#mc:0,bo:2,bo:5,bo:1,bo:0'>
  <area shape='rect' coords='4318.4,2042.56,4515.21,2068.56' href='#mc:0,bo:2,bo:5,bo:2'>
  <area shape='rect' coords='4318.4,2070.56,4349.15,2096.56' href='#mc:0,bo:2,bo:5,bo:3'>
  <area shape='rect' coords='4370.15,2070.56,4589.68,2096.56' href='#mc:0,bo:2,bo:5,bo:3,bo:0'>
  <area shape='rect' coords='4318.4,2098.56,4353.43,2124.56' href='#mc:0,bo:2,bo:5,bo:4'>
  <area shape='rect' coords='4374.43,2098.56,4501.34,2124.56' href='#mc:0,bo:2,bo:5,bo:4,bo:0'>
  <area shape='rect' coords='4318.4,2126.56,4378.17,2152.56' href='#mc:0,bo:2,bo:5,bo:5'>
  <area shape='rect' coords='4318.4,2209.56,4516.79,2261.56' href='#mc:0,bo:2,bo:5,bo:6'>
  <area shape='rect' coords='4537.79,2154.56,4751.42,2206.56' href='#mc:0,bo:2,bo:5,bo:6,bo:0'>
  <area shape='rect' coords='4537.79,2208.56,4644.6,2234.56' href='#mc:0,bo:2,bo:5,bo:6,bo:1'>
  <area shape='rect' coords='4537.79,2236.56,4652.03,2262.56' href='#mc:0,bo:2,bo:5,bo:6,bo:2'>
  <area shape='rect' coords='4537.79,2264.56,4774.34,2316.56' href='#mc:0,bo:2,bo:5,bo:6,bo:3'>
  <area shape='rect' coords='4318.4,2318.56,4340.4,2340.56' href='/home/juxley/Documents/Mind Maps/Equalty-Comparison-And-Sameness.pdf'>
  <area shape='rect' coords='4340.4,2318.56,4434.79,2344.56' href='#mc:0,bo:2,bo:5,bo:7'>
  <area shape='rect' coords='4117.28,2385.56,4277.51,2415.56' href='#mc:0,bo:2,bo:6'>
  <area shape='rect' coords='4298.51,2360.56,4537.15,2412.56' href='#mc:0,bo:2,bo:6,bo:0'>
  <area shape='rect' coords='4558.15,2346.56,4812.18,2398.56' href='#mc:0,bo:2,bo:6,bo:0,bo:0'>
  <area shape='rect' coords='4558.15,2400.56,4785.96,2426.56' href='#mc:0,bo:2,bo:6,bo:0,bo:1'>
  <area shape='rect' coords='4320.51,2428.56,4415.42,2454.56' href='#mc:0,bo:2,bo:6,bo:1'>
  <area shape='rect' coords='4117.28,2562.56,4233.46,2592.56' href='#mc:0,bo:2,bo:7'>
  <area shape='rect' coords='4276.46,2496.56,4371.37,2522.56' href='#mc:0,bo:2,bo:7,bo:0'>
  <area shape='rect' coords='4392.37,2456.56,4650.7,2508.56' href='#mc:0,bo:2,bo:7,bo:0,bo:0'>
  <area shape='rect' coords='4392.37,2510.56,4617.28,2562.56' href='#mc:0,bo:2,bo:7,bo:0,bo:1'>
  <area shape='rect' coords='4254.46,2564.56,4471.57,2616.56' href='#mc:0,bo:2,bo:7,bo:1'>
  <area shape='rect' coords='4254.46,2618.56,4458.18,2644.56' href='#mc:0,bo:2,bo:7,bo:2'>
  <area shape='rect' coords='4254.46,2659.56,4488.9,2685.56' href='#mc:0,bo:2,bo:7,bo:3'>
  <area shape='rect' coords='4509.9,2646.56,4733.48,2698.56' href='#mc:0,bo:2,bo:7,bo:3,bo:0'>
  <area shape='rect' coords='4117.28,2820.56,4255.23,2850.56' href='#mc:0,bo:2,bo:8'>
  <area shape='rect' coords='4276.23,2700.56,4508.56,2752.56' href='#mc:0,bo:2,bo:8,bo:0'>
  <area shape='rect' coords='4276.23,2795.56,4341.39,2821.56' href='#mc:0,bo:2,bo:8,bo:1'>
  <area shape='rect' coords='4362.39,2754.56,4598.15,2780.56' href='#mc:0,bo:2,bo:8,bo:1,bo:0'>
  <area shape='rect' coords='4362.39,2782.56,4539.7,2808.56' href='#mc:0,bo:2,bo:8,bo:1,bo:1'>
  <area shape='rect' coords='4362.39,2810.56,4580.87,2862.56' href='#mc:0,bo:2,bo:8,bo:1,bo:2'>
  <area shape='rect' coords='4276.23,2891.56,4529.34,2943.56' href='#mc:0,bo:2,bo:8,bo:2'>
  <area shape='rect' coords='4550.34,2864.56,4808.87,2916.56' href='#mc:0,bo:2,bo:8,bo:2,bo:0'>
  <area shape='rect' coords='4550.34,2918.56,4783.06,2970.56' href='#mc:0,bo:2,bo:8,bo:2,bo:1'>
  <area shape='rect' coords='1245.2,3683,1450.77,3717' href='#mc:0,bo:3'>
  <area shape='rect' coords='1069.5,148,1224.2,178' href='#mc:0,bo:3,bo:0'>
  <area shape='rect' coords='928.812,11,1048.5,37' href='#mc:0,bo:3,bo:0,bo:0'>
  <area shape='rect' coords='978.391,95,1048.5,121' href='#mc:0,bo:3,bo:0,bo:1'>
  <area shape='rect' coords='794.547,39,957.391,65' href='#mc:0,bo:3,bo:0,bo:1,bo:0'>
  <area shape='rect' coords='570.391,39,773.547,65' href='#mc:0,bo:3,bo:0,bo:1,bo:0,bo:0'>
  <area shape='rect' coords='719.703,67,957.391,93' href='#mc:0,bo:3,bo:0,bo:1,bo:1'>
  <area shape='rect' coords='807.078,95,957.391,121' href='#mc:0,bo:3,bo:0,bo:1,bo:2'>
  <area shape='rect' coords='733.297,123,957.391,149' href='#mc:0,bo:3,bo:0,bo:1,bo:3'>
  <area shape='rect' coords='733.234,151,957.391,177' href='#mc:0,bo:3,bo:0,bo:1,bo:4'>
  <area shape='rect' coords='983.625,234,1048.5,260' href='#mc:0,bo:3,bo:0,bo:2'>
  <area shape='rect' coords='786.5,179,962.625,205' href='#mc:0,bo:3,bo:0,bo:2,bo:0'>
  <area shape='rect' coords='575.672,179,765.5,205' href='#mc:0,bo:3,bo:0,bo:2,bo:0,bo:0'>
  <area shape='rect' coords='859.812,221,962.625,247' href='#mc:0,bo:3,bo:0,bo:2,bo:1'>
  <area shape='rect' coords='784.328,207,838.812,233' href='#mc:0,bo:3,bo:0,bo:2,bo:1,bo:0'>
  <area shape='rect' coords='725.688,235,838.812,261' href='#mc:0,bo:3,bo:0,bo:2,bo:1,bo:1'>
  <area shape='rect' coords='720.141,263,962.625,315' href='#mc:0,bo:3,bo:0,bo:2,bo:2'>
  <area shape='rect' coords='1108.66,397,1224.2,427' href='#mc:0,bo:3,bo:1'>
  <area shape='rect' coords='870.75,317,1087.66,369' href='#mc:0,bo:3,bo:1,bo:0'>
  <area shape='rect' coords='858.141,371,1087.66,397' href='#mc:0,bo:3,bo:1,bo:1'>
  <area shape='rect' coords='994.719,399,1087.66,425' href='#mc:0,bo:3,bo:1,bo:2'>
  <area shape='rect' coords='832.344,427,1087.66,453' href='#mc:0,bo:3,bo:1,bo:3'>
  <area shape='rect' coords='801.906,455,1043.66,507' href='#mc:0,bo:3,bo:1,bo:4'>
  <area shape='rect' coords='928.078,629,1224.2,659' href='#mc:0,bo:3,bo:2'>
  <area shape='rect' coords='821.188,509,907.078,535' href='#mc:0,bo:3,bo:2,bo:0'>
  <area shape='rect' coords='556.234,509,800.188,535' href='#mc:0,bo:3,bo:2,bo:0,bo:0'>
  <area shape='rect' coords='664.375,537,907.078,589' href='#mc:0,bo:3,bo:2,bo:1'>
  <area shape='rect' coords='657.516,591,907.078,643' href='#mc:0,bo:3,bo:2,bo:2'>
  <area shape='rect' coords='677.812,645,907.078,697' href='#mc:0,bo:3,bo:2,bo:3'>
  <area shape='rect' coords='563.875,658,656.812,684' href='#mc:0,bo:3,bo:2,bo:3,bo:0'>
  <area shape='rect' coords='528.125,658,542.875,684' href='#mc:0,bo:3,bo:2,bo:3,bo:0,bo:0'>
  <area shape='rect' coords='864.75,726,907.078,752' href='#mc:0,bo:3,bo:2,bo:4'>
  <area shape='rect' coords='626.688,713,843.75,765' href='#mc:0,bo:3,bo:2,bo:4,bo:0'>
  <area shape='rect' coords='348.406,699,605.688,751' href='#mc:0,bo:3,bo:2,bo:4,bo:0,bo:0'>
  <area shape='rect' coords='389.781,753,605.688,779' href='#mc:0,bo:3,bo:2,bo:4,bo:0,bo:1'>
  <area shape='rect' coords='1041.52,848,1224.2,878' href='#mc:0,bo:3,bo:3'>
  <area shape='rect' coords='865.391,781,1020.52,807' href='#mc:0,bo:3,bo:3,bo:0'>
  <area shape='rect' coords='652.359,781,844.391,807' href='#mc:0,bo:3,bo:3,bo:0,bo:0'>
  <area shape='rect' coords='848.297,809,1020.52,835' href='#mc:0,bo:3,bo:3,bo:1'>
  <area shape='rect' coords='765.641,837,1020.52,889' href='#mc:0,bo:3,bo:3,bo:2'>
  <area shape='rect' coords='927.578,891,1020.52,917' href='#mc:0,bo:3,bo:3,bo:3'>
  <area shape='rect' coords='899.047,919,1020.52,945' href='#mc:0,bo:3,bo:3,bo:4'>
  <area shape='rect' coords='1034.84,1095,1202.2,1125' href='#mc:0,bo:3,bo:4'>
  <area shape='rect' coords='872.562,1000,991.844,1026' href='#mc:0,bo:3,bo:4,bo:0'>
  <area shape='rect' coords='606.094,947,851.562,999' href='#mc:0,bo:3,bo:4,bo:0,bo:0'>
  <area shape='rect' coords='593.969,1001,851.562,1079' href='#mc:0,bo:3,bo:4,bo:0,bo:1'>
  <area shape='rect' coords='766.266,1164,991.844,1190' href='#mc:0,bo:3,bo:4,bo:1'>
  <area shape='rect' coords='480.922,1110,745.266,1162' href='#mc:0,bo:3,bo:4,bo:1,bo:0'>
  <area shape='rect' coords='393.984,1081,459.922,1107' href='#mc:0,bo:3,bo:4,bo:1,bo:0,bo:0'>
  <area shape='rect' coords='412.203,1109,459.922,1135' href='#mc:0,bo:3,bo:4,bo:1,bo:0,bo:1'>
  <area shape='rect' coords='392.75,1137,459.922,1163' href='#mc:0,bo:3,bo:4,bo:1,bo:0,bo:2'>
  <area shape='rect' coords='365.016,1165,459.922,1191' href='#mc:0,bo:3,bo:4,bo:1,bo:0,bo:3'>
  <area shape='rect' coords='659.719,1220,745.266,1246' href='#mc:0,bo:3,bo:4,bo:1,bo:1'>
  <area shape='rect' coords='587.875,1193,638.719,1219' href='#mc:0,bo:3,bo:4,bo:1,bo:1,bo:0'>
  <area shape='rect' coords='404.672,1193,566.875,1219' href='#mc:0,bo:3,bo:4,bo:1,bo:1,bo:0,bo:0'>
  <area shape='rect' coords='542.906,1234,638.719,1260' href='#mc:0,bo:3,bo:4,bo:1,bo:1,bo:1'>
  <area shape='rect' coords='454.859,1234,521.906,1260' href='#mc:0,bo:3,bo:4,bo:1,bo:1,bo:1,bo:0'>
  <area shape='rect' coords='230.219,1221,433.859,1273' href='#mc:0,bo:3,bo:4,bo:1,bo:1,bo:1,bo:0,bo:0'>
  <area shape='rect' coords='959.047,1543,1224.2,1603' href='#mc:0,bo:3,bo:5'>
  <area shape='rect' coords='701.156,1383,938.047,1435' href='#mc:0,bo:3,bo:5,bo:0'>
  <area shape='rect' coords='444.188,1275,680.156,1301' href='#mc:0,bo:3,bo:5,bo:0,bo:0'>
  <area shape='rect' coords='613.781,1303,680.156,1329' href='#mc:0,bo:3,bo:5,bo:0,bo:1'>
  <area shape='rect' coords='551.812,1357,680.156,1383' href='#mc:0,bo:3,bo:5,bo:0,bo:2'>
  <area shape='rect' coords='232.75,1331,508.812,1409' href='#mc:0,bo:3,bo:5,bo:0,bo:2,bo:0'>
  <area shape='rect' coords='439.469,1411,680.156,1515' href='#mc:0,bo:3,bo:5,bo:0,bo:3'>
  <area shape='rect' coords='491.672,1517,680.156,1543' href='#mc:0,bo:3,bo:5,bo:0,bo:4'>
  <area shape='rect' coords='794.719,1587,938.047,1613' href='#mc:0,bo:3,bo:5,bo:1'>
  <area shape='rect' coords='691.094,1545,773.719,1571' href='#mc:0,bo:3,bo:5,bo:1,bo:0'>
  <area shape='rect' coords='649.266,1601,773.719,1627' href='#mc:0,bo:3,bo:5,bo:1,bo:1'>
  <area shape='rect' coords='441.266,1573,606.266,1599' href='#mc:0,bo:3,bo:5,bo:1,bo:1,bo:0'>
  <area shape='rect' coords='473.891,1601,606.266,1627' href='#mc:0,bo:3,bo:5,bo:1,bo:1,bo:1'>
  <area shape='rect' coords='551.219,1629,606.266,1655' href='#mc:0,bo:3,bo:5,bo:1,bo:1,bo:2'>
  <area shape='rect' coords='683.922,1657,938.047,1709' href='#mc:0,bo:3,bo:5,bo:2'>
  <area shape='rect' coords='833.422,1711,938.047,1737' href='#mc:0,bo:3,bo:5,bo:3'>
  <area shape='rect' coords='684.141,1739,938.047,1817' href='#mc:0,bo:3,bo:5,bo:4'>
  <area shape='rect' coords='723.812,1819,938.047,1871' href='#mc:0,bo:3,bo:5,bo:5'>
  <area shape='rect' coords='1039.56,2036,1224.2,2066' href='#mc:0,bo:3,bo:6'>
  <area shape='rect' coords='958.469,1928,1018.56,1954' href='#mc:0,bo:3,bo:6,bo:0'>
  <area shape='rect' coords='900.031,1873,937.469,1899' href='#mc:0,bo:3,bo:6,bo:0,bo:0'>
  <area shape='rect' coords='869.172,1901,891.172,1923' href='/home/juxley/Pictures/byreferencebyvalue1.png'>
  <area shape='rect' coords='891.172,1901,937.469,1927' href='#mc:0,bo:3,bo:6,bo:0,bo:1'>
  <area shape='rect' coords='719.922,1929,937.469,1955' href='#mc:0,bo:3,bo:6,bo:0,bo:2'>
  <area shape='rect' coords='690.625,1957,937.469,2009' href='#mc:0,bo:3,bo:6,bo:0,bo:3'>
  <area shape='rect' coords='930.766,2065,1018.56,2091' href='#mc:0,bo:3,bo:6,bo:1'>
  <area shape='rect' coords='690.953,2011,909.766,2063' href='#mc:0,bo:3,bo:6,bo:1,bo:0'>
  <area shape='rect' coords='670.953,2065,909.766,2117' href='#mc:0,bo:3,bo:6,bo:1,bo:1'>
  <area shape='rect' coords='841.469,2119,863.469,2141' href='/home/juxley/Pictures/byreference.png'>
  <area shape='rect' coords='863.469,2119,909.766,2145' href='#mc:0,bo:3,bo:6,bo:1,bo:2'>
  <area shape='rect' coords='979.188,2147,1018.56,2173' href='#mc:0,bo:3,bo:6,bo:2'>
  <area shape='rect' coords='958.422,2175,1018.56,2201' href='#mc:0,bo:3,bo:6,bo:3'>
  <area shape='rect' coords='827.234,2175,937.422,2201' href='#mc:0,bo:3,bo:6,bo:3,bo:0'>
  <area shape='rect' coords='937,2203,1018.56,2229' href='#mc:0,bo:3,bo:6,bo:4'>
  <area shape='rect' coords='796.953,2203,916,2229' href='#mc:0,bo:3,bo:6,bo:4,bo:0'>
  <area shape='rect' coords='974.547,2404,996.547,2426' href='/home/juxley/Pictures/this.png'>
  <area shape='rect' coords='996.547,2404,1224.2,2434' href='#mc:0,bo:3,bo:7'>
  <area shape='rect' coords='700.922,2231,953.547,2283' href='#mc:0,bo:3,bo:7,bo:0'>
  <area shape='rect' coords='829.062,2433,953.547,2459' href='#mc:0,bo:3,bo:7,bo:1'>
  <area shape='rect' coords='582.688,2285,808.062,2337' href='#mc:0,bo:3,bo:7,bo:1,bo:0'>
  <area shape='rect' coords='713.156,2339,808.062,2365' href='#mc:0,bo:3,bo:7,bo:1,bo:1'>
  <area shape='rect' coords='575.625,2367,808.062,2445' href='#mc:0,bo:3,bo:7,bo:1,bo:2'>
  <area shape='rect' coords='554.75,2447,808.062,2499' href='#mc:0,bo:3,bo:7,bo:1,bo:3'>
  <area shape='rect' coords='574.328,2501,808.062,2553' href='#mc:0,bo:3,bo:7,bo:1,bo:4'>
  <area shape='rect' coords='587.328,2555,808.062,2607' href='#mc:0,bo:3,bo:7,bo:1,bo:5'>
  <area shape='rect' coords='890.359,2609,912.359,2631' href='/home/juxley/Pictures/collectionofanything.png'>
  <area shape='rect' coords='912.359,2609,1224.2,2639' href='#mc:0,bo:3,bo:8'>
  <area shape='rect' coords='1032.06,2830,1224.2,2860' href='#mc:0,bo:3,bo:9'>
  <area shape='rect' coords='996.312,2641,1011.06,2667' href='#mc:0,bo:3,bo:9,bo:0'>
  <area shape='rect' coords='770.391,2669,1011.06,2721' href='#mc:0,bo:3,bo:9,bo:1'>
  <area shape='rect' coords='753.062,2723,1011.06,2775' href='#mc:0,bo:3,bo:9,bo:2'>
  <area shape='rect' coords='785.484,2777,1011.06,2829' href='#mc:0,bo:3,bo:9,bo:3'>
  <area shape='rect' coords='950.906,2831,1011.06,2857' href='#mc:0,bo:3,bo:9,bo:4'>
  <area shape='rect' coords='846.766,2859,1011.06,2885' href='#mc:0,bo:3,bo:9,bo:5'>
  <area shape='rect' coords='780.219,2887,1011.06,2939' href='#mc:0,bo:3,bo:9,bo:6'>
  <area shape='rect' coords='640.156,2900,759.219,2926' href='#mc:0,bo:3,bo:9,bo:6,bo:0'>
  <area shape='rect' coords='837.984,2941,1011.06,2967' href='#mc:0,bo:3,bo:9,bo:7'>
  <area shape='rect' coords='956.641,2996,1011.06,3022' href='#mc:0,bo:3,bo:9,bo:8'>
  <area shape='rect' coords='882.922,2969,935.641,2995' href='#mc:0,bo:3,bo:9,bo:8,bo:0'>
  <area shape='rect' coords='694.797,2997,935.641,3049' href='#mc:0,bo:3,bo:9,bo:8,bo:1'>
  <area shape='rect' coords='917.359,3090,1224.2,3120' href='#mc:0,bo:3,bo:10'>
  <area shape='rect' coords='649.234,3051,874.359,3103' href='#mc:0,bo:3,bo:10,bo:0'>
  <area shape='rect' coords='699.812,3105,874.359,3131' href='#mc:0,bo:3,bo:10,bo:1'>
  <area shape='rect' coords='814.203,3133,874.359,3159' href='#mc:0,bo:3,bo:10,bo:2'>
  <area shape='rect' coords='998.078,3266,1224.2,3296' href='#mc:0,bo:3,bo:11'>
  <area shape='rect' coords='725.844,3161,977.078,3213' href='#mc:0,bo:3,bo:11,bo:0'>
  <area shape='rect' coords='791.25,3215,977.078,3241' href='#mc:0,bo:3,bo:11,bo:1'>
  <area shape='rect' coords='742.891,3243,977.078,3295' href='#mc:0,bo:3,bo:11,bo:2'>
  <area shape='rect' coords='714.734,3297,977.078,3401' href='#mc:0,bo:3,bo:11,bo:3'>
  <area shape='rect' coords='976.859,3508,1224.2,3568' href='#mc:0,bo:3,bo:12'>
  <area shape='rect' coords='718.125,3403,955.859,3455' href='#mc:0,bo:3,bo:12,bo:0'>
  <area shape='rect' coords='717.266,3457,955.859,3509' href='#mc:0,bo:3,bo:12,bo:1'>
  <area shape='rect' coords='689.953,3511,955.859,3563' href='#mc:0,bo:3,bo:12,bo:2'>
  <area shape='rect' coords='829.188,3565,955.859,3591' href='#mc:0,bo:3,bo:12,bo:3'>
  <area shape='rect' coords='839.641,3593,955.859,3619' href='#mc:0,bo:3,bo:12,bo:4'>
  <area shape='rect' coords='708.453,3621,955.859,3673' href='#mc:0,bo:3,bo:12,bo:5'>
  <area shape='rect' coords='978.953,3768,1224.2,3798' href='#mc:0,bo:3,bo:13'>
  <area shape='rect' coords='807.062,3675,957.953,3701' href='#mc:0,bo:3,bo:13,bo:0'>
  <area shape='rect' coords='691.766,3703,957.953,3755' href='#mc:0,bo:3,bo:13,bo:1'>
  <area shape='rect' coords='656.016,3716,670.766,3742' href='#mc:0,bo:3,bo:13,bo:1,bo:0'>
  <area shape='rect' coords='897.797,3757,957.953,3783' href='#mc:0,bo:3,bo:13,bo:2'>
  <area shape='rect' coords='711.469,3785,957.953,3837' href='#mc:0,bo:3,bo:13,bo:3'>
  <area shape='rect' coords='688.891,3839,957.953,3891' href='#mc:0,bo:3,bo:13,bo:4'>
  <area shape='rect' coords='903.531,4378,1224.2,4408' href='#mc:0,bo:3,bo:14'>
  <area shape='rect' coords='763.141,3893,882.531,3919' href='#mc:0,bo:3,bo:14,bo:0'>
  <area shape='rect' coords='751.906,3921,882.531,3947' href='#mc:0,bo:3,bo:14,bo:1'>
  <area shape='rect' coords='815.359,3963,882.531,3989' href='#mc:0,bo:3,bo:14,bo:2'>
  <area shape='rect' coords='616.219,3949,794.359,3975' href='#mc:0,bo:3,bo:14,bo:2,bo:0'>
  <area shape='rect' coords='749.734,3977,794.359,4003' href='#mc:0,bo:3,bo:14,bo:2,bo:1'>
  <area shape='rect' coords='691.859,4005,882.531,4031' href='#mc:0,bo:3,bo:14,bo:3'>
  <area shape='rect' coords='851.797,4073,882.531,4099' href='#mc:0,bo:3,bo:14,bo:4'>
  <area shape='rect' coords='570.594,4033,808.797,4085' href='#mc:0,bo:3,bo:14,bo:4,bo:0'>
  <area shape='rect' coords='569.297,4087,808.797,4139' href='#mc:0,bo:3,bo:14,bo:4,bo:1'>
  <area shape='rect' coords='621.891,4155,882.531,4233' href='#mc:0,bo:3,bo:14,bo:5'>
  <area shape='rect' coords='365.875,4141,600.891,4193' href='#mc:0,bo:3,bo:14,bo:5,bo:0'>
  <area shape='rect' coords='309.812,4195,600.891,4247' href='#mc:0,bo:3,bo:14,bo:5,bo:1'>
  <area shape='rect' coords='647.859,4249,882.531,4301' href='#mc:0,bo:3,bo:14,bo:6'>
  <area shape='rect' coords='717.75,4356,882.531,4382' href='#mc:0,bo:3,bo:14,bo:7'>
  <area shape='rect' coords='458.281,4303,696.75,4407' href='#mc:0,bo:3,bo:14,bo:7,bo:0'>
  <area shape='rect' coords='583.625,4409,696.75,4435' href='#mc:0,bo:3,bo:14,bo:7,bo:1'>
  <area shape='rect' coords='652.922,4652,882.531,4678' href='#mc:0,bo:3,bo:14,bo:8'>
  <area shape='rect' coords='565.781,4437,631.922,4463' href='#mc:0,bo:3,bo:14,bo:8,bo:0'>
  <area shape='rect' coords='528.812,4585,631.922,4611' href='#mc:0,bo:3,bo:14,bo:8,bo:1'>
  <area shape='rect' coords='262.641,4465,507.812,4517' href='#mc:0,bo:3,bo:14,bo:8,bo:1,bo:0'>
  <area shape='rect' coords='272.422,4519,507.812,4571' href='#mc:0,bo:3,bo:14,bo:8,bo:1,bo:1'>
  <area shape='rect' coords='279.547,4626,507.812,4678' href='#mc:0,bo:3,bo:14,bo:8,bo:1,bo:2'>
  <area shape='rect' coords='11.2344,4573,258.547,4651' href='#mc:0,bo:3,bo:14,bo:8,bo:1,bo:2,bo:0'>
  <area shape='rect' coords='11,4653,258.547,4731' href='#mc:0,bo:3,bo:14,bo:8,bo:1,bo:2,bo:1'>
  <area shape='rect' coords='562.797,4733,584.797,4755' href='/home/juxley/Pictures/safeiife.png'>
  <area shape='rect' coords='584.797,4733,631.922,4759' href='#mc:0,bo:3,bo:14,bo:8,bo:2'>
  <area shape='rect' coords='374.406,4761,631.922,4839' href='#mc:0,bo:3,bo:14,bo:8,bo:3'>
  <area shape='rect' coords='131.188,4787,353.406,4813' href='#mc:0,bo:3,bo:14,bo:8,bo:3,bo:0'>
  <area shape='rect' coords='389.203,4841,631.922,4893' href='#mc:0,bo:3,bo:14,bo:8,bo:4'>
  <area shape='rect' coords='117.812,4841,368.203,4893' href='#mc:0,bo:3,bo:14,bo:8,bo:4,bo:0'>
  <area shape='rect' coords='36.6562,4854,96.8125,4880' href='#mc:0,bo:3,bo:14,bo:8,bo:4,bo:0,bo:0'>
  <area shape='rect' coords='1034.44,5609,1224.2,5639' href='#mc:0,bo:3,bo:15'>
  <area shape='rect' coords='953.281,4895,1013.44,4921' href='#mc:0,bo:3,bo:15,bo:0'>
  <area shape='rect' coords='766.281,4923,1013.44,4975' href='#mc:0,bo:3,bo:15,bo:1'>
  <area shape='rect' coords='817.547,4977,1013.44,5003' href='#mc:0,bo:3,bo:15,bo:2'>
  <area shape='rect' coords='766.234,5005,1013.44,5083' href='#mc:0,bo:3,bo:15,bo:3'>
  <area shape='rect' coords='540.625,5018,745.234,5070' href='#mc:0,bo:3,bo:15,bo:3,bo:0'>
  <area shape='rect' coords='785.062,5125,1013.44,5177' href='#mc:0,bo:3,bo:15,bo:4'>
  <area shape='rect' coords='535.953,5085,764.062,5137' href='#mc:0,bo:3,bo:15,bo:4,bo:0'>
  <area shape='rect' coords='518.094,5139,764.062,5217' href='#mc:0,bo:3,bo:15,bo:4,bo:1'>
  <area shape='rect' coords='761.891,5273,1013.44,5325' href='#mc:0,bo:3,bo:15,bo:5'>
  <area shape='rect' coords='501.156,5219,740.891,5297' href='#mc:0,bo:3,bo:15,bo:5,bo:0'>
  <area shape='rect' coords='528.984,5299,740.891,5325' href='#mc:0,bo:3,bo:15,bo:5,bo:1'>
  <area shape='rect' coords='540.344,5327,740.891,5379' href='#mc:0,bo:3,bo:15,bo:5,bo:2'>
  <area shape='rect' coords='767.391,5381,789.391,5403' href='/home/juxley/Pictures/closures.png'>
  <area shape='rect' coords='789.391,5381,1013.44,5433' href='#mc:0,bo:3,bo:15,bo:6'>
  <area shape='rect' coords='570.266,5394,746.391,5420' href='#mc:0,bo:3,bo:15,bo:6,bo:0'>
  <area shape='rect' coords='769.828,5435,1013.44,5513' href='#mc:0,bo:3,bo:15,bo:7'>
  <area shape='rect' coords='909.062,5583,1013.44,5609' href='#mc:0,bo:3,bo:15,bo:8'>
  <area shape='rect' coords='818.5,5515,840.5,5537' href='/home/juxley/Pictures/closure2.png'>
  <area shape='rect' coords='840.5,5515,866.062,5541' href='#mc:0,bo:3,bo:15,bo:8,bo:0'>
  <area shape='rect' coords='590.406,5543,866.062,5621' href='#mc:0,bo:3,bo:15,bo:8,bo:1'>
  <area shape='rect' coords='762.594,5623,866.062,5649' href='#mc:0,bo:3,bo:15,bo:8,bo:2'>
  <area shape='rect' coords='786.141,5651,866.062,5677' href='#mc:0,bo:3,bo:15,bo:8,bo:3'>
  <area shape='rect' coords='781.688,5813,1013.44,5839' href='#mc:0,bo:3,bo:15,bo:9'>
  <area shape='rect' coords='520.453,5679,760.688,5757' href='#mc:0,bo:3,bo:15,bo:9,bo:0'>
  <area shape='rect' coords='523.875,5759,760.688,5837' href='#mc:0,bo:3,bo:15,bo:9,bo:1'>
  <area shape='rect' coords='700.531,5839,760.688,5865' href='#mc:0,bo:3,bo:15,bo:9,bo:2'>
  <area shape='rect' coords='507.641,5867,760.688,5945' href='#mc:0,bo:3,bo:15,bo:9,bo:3'>
  <area shape='rect' coords='691.562,5947,713.562,5969' href='/home/juxley/Pictures/closures_factorybuilding.png'>
  <area shape='rect' coords='713.562,5947,760.688,5973' href='#mc:0,bo:3,bo:15,bo:9,bo:4'>
  <area shape='rect' coords='857.922,6151,1013.44,6177' href='#mc:0,bo:3,bo:15,bo:10'>
  <area shape='rect' coords='776.766,5975,836.922,6001' href='#mc:0,bo:3,bo:15,bo:10,bo:0'>
  <area shape='rect' coords='591.844,6003,836.922,6055' href='#mc:0,bo:3,bo:15,bo:10,bo:1'>
  <area shape='rect' coords='578.172,6057,836.922,6109' href='#mc:0,bo:3,bo:15,bo:10,bo:2'>
  <area shape='rect' coords='670.375,6111,836.922,6137' href='#mc:0,bo:3,bo:15,bo:10,bo:3'>
  <area shape='rect' coords='611.453,6139,836.922,6191' href='#mc:0,bo:3,bo:15,bo:10,bo:4'>
  <area shape='rect' coords='581.906,6193,836.922,6271' href='#mc:0,bo:3,bo:15,bo:10,bo:5'>
  <area shape='rect' coords='603.469,6274,836.922,6352' href='#mc:0,bo:3,bo:15,bo:10,bo:6'>
  <area shape='rect' coords='331.656,6273,582.469,6325' href='#mc:0,bo:3,bo:15,bo:10,bo:6,bo:0'>
  <area shape='rect' coords='468.328,6327,582.469,6353' href='#mc:0,bo:3,bo:15,bo:10,bo:6,bo:1'>
  <area shape='rect' coords='1075.3,6596,1224.2,6626' href='#mc:0,bo:3,bo:16'>
  <area shape='rect' coords='808.297,6355,1054.3,6407' href='#mc:0,bo:3,bo:16,bo:0'>
  <area shape='rect' coords='574.234,6368,787.297,6394' href='#mc:0,bo:3,bo:16,bo:0,bo:0'>
  <area shape='rect' coords='851.141,6611,1054.3,6637' href='#mc:0,bo:3,bo:16,bo:1'>
  <area shape='rect' coords='794.797,6436,830.141,6462' href='#mc:0,bo:3,bo:16,bo:1,bo:0'>
  <area shape='rect' coords='486.453,6409,751.797,6461' href='#mc:0,bo:3,bo:16,bo:1,bo:0,bo:0'>
  <area shape='rect' coords='662.344,6463,751.797,6489' href='#mc:0,bo:3,bo:16,bo:1,bo:0,bo:1'>
  <area shape='rect' coords='801.938,6517,830.141,6543' href='#mc:0,bo:3,bo:16,bo:1,bo:1'>
  <area shape='rect' coords='518.891,6491,758.938,6569' href='#mc:0,bo:3,bo:16,bo:1,bo:1,bo:0'>
  <area shape='rect' coords='788.922,6692,830.141,6718' href='#mc:0,bo:3,bo:16,bo:1,bo:2'>
  <area shape='rect' coords='481.25,6571,745.922,6623' href='#mc:0,bo:3,bo:16,bo:1,bo:2,bo:0'>
  <area shape='rect' coords='624.609,6719,745.922,6745' href='#mc:0,bo:3,bo:16,bo:1,bo:2,bo:1'>
  <area shape='rect' coords='420.156,6625,581.609,6651' href='#mc:0,bo:3,bo:16,bo:1,bo:2,bo:1,bo:0'>
  <area shape='rect' coords='453.078,6666,581.609,6692' href='#mc:0,bo:3,bo:16,bo:1,bo:2,bo:1,bo:1'>
  <area shape='rect' coords='179.578,6653,410.078,6705' href='#mc:0,bo:3,bo:16,bo:1,bo:2,bo:1,bo:1,bo:0'>
  <area shape='rect' coords='425.844,6760,581.609,6786' href='#mc:0,bo:3,bo:16,bo:1,bo:2,bo:1,bo:2'>
  <area shape='rect' coords='137.781,6707,382.844,6759' href='#mc:0,bo:3,bo:16,bo:1,bo:2,bo:1,bo:2,bo:0'>
  <area shape='rect' coords='134.938,6761,382.844,6839' href='#mc:0,bo:3,bo:16,bo:1,bo:2,bo:1,bo:2,bo:1'>
  <area shape='rect' coords='985.172,6841,1007.17,6863' href='/home/juxley/Pictures/functionbreakdone.png'>
  <area shape='rect' coords='1007.17,6841,1054.3,6867' href='#mc:0,bo:3,bo:16,bo:2'>
  <area shape='rect' coords='1028.92,7114,1224.2,7144' href='#mc:0,bo:3,bo:17'>
  <area shape='rect' coords='779.359,6870,1007.92,6922' href='#mc:0,bo:3,bo:17,bo:0'>
  <area shape='rect' coords='743.609,6869,758.359,6895' href='#mc:0,bo:3,bo:17,bo:0,bo:0'>
  <area shape='rect' coords='743.609,6897,758.359,6923' href='#mc:0,bo:3,bo:17,bo:0,bo:1'>
  <area shape='rect' coords='777.062,6925,1007.92,6951' href='#mc:0,bo:3,bo:17,bo:1'>
  <area shape='rect' coords='748.953,6953,1007.92,7005' href='#mc:0,bo:3,bo:17,bo:2'>
  <area shape='rect' coords='868.281,7047,1007.92,7073' href='#mc:0,bo:3,bo:17,bo:3'>
  <area shape='rect' coords='573.078,7007,825.281,7059' href='#mc:0,bo:3,bo:17,bo:3,bo:0'>
  <area shape='rect' coords='579.031,7061,825.281,7113' href='#mc:0,bo:3,bo:17,bo:3,bo:1'>
  <area shape='rect' coords='740.422,7157,1007.92,7209' href='#mc:0,bo:3,bo:17,bo:4'>
  <area shape='rect' coords='571.078,7115,719.422,7141' href='#mc:0,bo:3,bo:17,bo:4,bo:0'>
  <area shape='rect' coords='572.297,7143,719.422,7169' href='#mc:0,bo:3,bo:17,bo:4,bo:1'>
  <area shape='rect' coords='510.844,7171,719.422,7197' href='#mc:0,bo:3,bo:17,bo:4,bo:2'>
  <area shape='rect' coords='478.281,7199,719.422,7251' href='#mc:0,bo:3,bo:17,bo:4,bo:3'>
  <area shape='rect' coords='963.938,7308,1007.92,7334' href='#mc:0,bo:3,bo:17,bo:5'>
  <area shape='rect' coords='787.734,7253,809.734,7275' href='http://underscorejs.org'>
  <area shape='rect' coords='809.734,7253,942.938,7279' href='#mc:0,bo:3,bo:17,bo:5,bo:0'>
  <area shape='rect' coords='751.984,7253,766.734,7279' href='#mc:0,bo:3,bo:17,bo:5,bo:0,bo:0'>
  <area shape='rect' coords='778.75,7308,942.938,7334' href='#mc:0,bo:3,bo:17,bo:5,bo:1'>
  <area shape='rect' coords='558.422,7281,757.75,7307' href='#mc:0,bo:3,bo:17,bo:5,bo:1,bo:0'>
  <area shape='rect' coords='498.562,7309,757.75,7361' href='#mc:0,bo:3,bo:17,bo:5,bo:1,bo:1'>
  <area shape='rect' coords='796.766,7363,942.938,7389' href='#mc:0,bo:3,bo:17,bo:5,bo:2'>
  <area shape='rect' coords='3854.12,3655.39,4135.19,3723.39' href='#mc:0,bo:4'>
  <area shape='rect' coords='4156.19,3252.39,4385.94,3312.39' href='#mc:0,bo:4,bo:0'>
  <area shape='rect' coords='4406.94,3160.39,4662.73,3238.39' href='#mc:0,bo:4,bo:0,bo:0'>
  <area shape='rect' coords='4406.94,3268.39,4466.41,3294.39' href='#mc:0,bo:4,bo:0,bo:1'>
  <area shape='rect' coords='4487.41,3240.39,4653.66,3266.39' href='#mc:0,bo:4,bo:0,bo:1,bo:0'>
  <area shape='rect' coords='4487.41,3268.39,4581.25,3294.39' href='#mc:0,bo:4,bo:0,bo:1,bo:1'>
  <area shape='rect' coords='4487.41,3296.39,4622.8,3322.39' href='#mc:0,bo:4,bo:0,bo:1,bo:2'>
  <area shape='rect' coords='4406.94,3351.39,4478.36,3377.39' href='#mc:0,bo:4,bo:0,bo:2'>
  <area shape='rect' coords='4499.36,3324.39,4725.26,3350.39' href='#mc:0,bo:4,bo:0,bo:2,bo:0'>
  <area shape='rect' coords='4499.36,3352.39,4747.23,3404.39' href='#mc:0,bo:4,bo:0,bo:2,bo:1'>
  <area shape='rect' coords='4156.19,3540.39,4384.22,3570.39' href='#mc:0,bo:4,bo:1'>
  <area shape='rect' coords='4405.22,3406.39,4627.91,3458.39' href='#mc:0,bo:4,bo:1,bo:0'>
  <area shape='rect' coords='4405.22,3460.39,4427.22,3482.39' href='/home/juxley/Pictures/proto.png'>
  <area shape='rect' coords='4427.22,3460.39,4474.34,3486.39' href='#mc:0,bo:4,bo:1,bo:1'>
  <area shape='rect' coords='4405.22,3488.39,4617.39,3514.39' href='#mc:0,bo:4,bo:1,bo:2'>
  <area shape='rect' coords='4405.22,3516.39,4646.09,3542.39' href='#mc:0,bo:4,bo:1,bo:3'>
  <area shape='rect' coords='4405.22,3544.39,4651.94,3596.39' href='#mc:0,bo:4,bo:1,bo:4'>
  <area shape='rect' coords='4672.94,3544.39,4874.69,3596.39' href='#mc:0,bo:4,bo:1,bo:4,bo:0'>
  <area shape='rect' coords='4427.22,3638.39,4522.12,3664.39' href='#mc:0,bo:4,bo:1,bo:5'>
  <area shape='rect' coords='4543.12,3598.39,4819.23,3650.39' href='#mc:0,bo:4,bo:1,bo:5,bo:0'>
  <area shape='rect' coords='4543.12,3652.39,4736.3,3704.39' href='#mc:0,bo:4,bo:1,bo:5,bo:1'>
  <area shape='rect' coords='4156.19,3852.39,4455.36,3882.39' href='#mc:0,bo:4,bo:2'>
  <area shape='rect' coords='4476.36,3706.39,4675.33,3758.39' href='#mc:0,bo:4,bo:2,bo:0'>
  <area shape='rect' coords='4476.36,3773.39,4628.3,3799.39' href='#mc:0,bo:4,bo:2,bo:1'>
  <area shape='rect' coords='4649.3,3760.39,4895.41,3812.39' href='#mc:0,bo:4,bo:2,bo:1,bo:0'>
  <area shape='rect' coords='4498.36,3814.39,4537.73,3840.39' href='#mc:0,bo:4,bo:2,bo:2'>
  <area shape='rect' coords='4476.36,3842.39,4719.81,3920.39' href='#mc:0,bo:4,bo:2,bo:3'>
  <area shape='rect' coords='4476.36,3922.39,4710.14,3974.39' href='#mc:0,bo:4,bo:2,bo:4'>
  <area shape='rect' coords='4476.36,3976.39,4718.19,4028.39' href='#mc:0,bo:4,bo:2,bo:5'>
  <area shape='rect' coords='4156.19,4109.39,4349.3,4139.39' href='#mc:0,bo:4,bo:3'>
  <area shape='rect' coords='4370.3,4030.39,4608,4108.39' href='#mc:0,bo:4,bo:3,bo:0'>
  <area shape='rect' coords='4392.3,4123.39,4452.45,4149.39' href='#mc:0,bo:4,bo:3,bo:1'>
  <area shape='rect' coords='4473.45,4110.39,4721.98,4162.39' href='#mc:0,bo:4,bo:3,bo:1,bo:0'>
  <area shape='rect' coords='4392.3,4178.39,4442.41,4204.39' href='#mc:0,bo:4,bo:3,bo:2'>
  <area shape='rect' coords='4463.41,4164.39,4640.06,4190.39' href='#mc:0,bo:4,bo:3,bo:2,bo:0'>
  <area shape='rect' coords='4661.06,4164.39,4675.81,4190.39' href='#mc:0,bo:4,bo:3,bo:2,bo:0,bo:0'>
  <area shape='rect' coords='4463.41,4192.39,4628.34,4218.39' href='#mc:0,bo:4,bo:3,bo:2,bo:1'>
  <area shape='rect' coords='2333.48,5278.72,2487.42,5312.72' href='#mc:0,bo:5'>
  <area shape='rect' coords='2025.15,4126.72,2312.48,4186.72' href='#mc:0,bo:5,bo:0'>
  <area shape='rect' coords='1952.44,3953.72,2004.15,3979.72' href='#mc:0,bo:5,bo:0,bo:0'>
  <area shape='rect' coords='1801.65,3912.72,1931.44,3938.72' href='#mc:0,bo:5,bo:0,bo:0,bo:0'>
  <area shape='rect' coords='1747.5,3940.72,1931.44,3992.72' href='#mc:0,bo:5,bo:0,bo:0,bo:1'>
  <area shape='rect' coords='1780.12,3994.72,1931.44,4020.72' href='#mc:0,bo:5,bo:0,bo:0,bo:2'>
  <area shape='rect' coords='1633.12,3994.72,1759.12,4020.72' href='#mc:0,bo:5,bo:0,bo:0,bo:2,bo:0'>
  <area shape='rect' coords='1909.25,4022.72,2004.15,4048.72' href='#mc:0,bo:5,bo:0,bo:1'>
  <area shape='rect' coords='1748.94,4050.72,2004.15,4128.72' href='#mc:0,bo:5,bo:0,bo:2'>
  <area shape='rect' coords='1873.12,4198.72,2004.15,4224.72' href='#mc:0,bo:5,bo:0,bo:3'>
  <area shape='rect' coords='1596.56,4130.72,1852.12,4156.72' href='#mc:0,bo:5,bo:0,bo:3,bo:0'>
  <area shape='rect' coords='1641.01,4198.72,1852.12,4224.72' href='#mc:0,bo:5,bo:0,bo:3,bo:1'>
  <area shape='rect' coords='1377.9,4158.72,1620.01,4210.72' href='#mc:0,bo:5,bo:0,bo:3,bo:1,bo:0'>
  <area shape='rect' coords='1386.73,4212.72,1620.01,4264.72' href='#mc:0,bo:5,bo:0,bo:3,bo:1,bo:1'>
  <area shape='rect' coords='1635.58,4266.72,1852.12,4292.72' href='#mc:0,bo:5,bo:0,bo:3,bo:2'>
  <area shape='rect' coords='1796.22,4334.72,2004.15,4360.72' href='#mc:0,bo:5,bo:0,bo:4'>
  <area shape='rect' coords='1521.31,4294.72,1775.22,4320.72' href='#mc:0,bo:5,bo:0,bo:4,bo:0'>
  <area shape='rect' coords='1538.26,4322.72,1775.22,4400.72' href='#mc:0,bo:5,bo:0,bo:4,bo:1'>
  <area shape='rect' coords='2022.67,4549.72,2312.48,4579.72' href='#mc:0,bo:5,bo:1'>
  <area shape='rect' coords='1932.55,4402.72,1954.55,4424.72' href='/home/juxley/Picture/funcproto.png'>
  <area shape='rect' coords='1954.55,4402.72,2001.67,4428.72' href='#mc:0,bo:5,bo:1,bo:0'>
  <area shape='rect' coords='1761.87,4430.72,2001.67,4482.72' href='#mc:0,bo:5,bo:1,bo:1'>
  <area shape='rect' coords='1780.09,4484.72,2001.67,4510.72' href='#mc:0,bo:5,bo:1,bo:2'>
  <area shape='rect' coords='1767.12,4512.72,2001.67,4564.72' href='#mc:0,bo:5,bo:1,bo:3'>
  <area shape='rect' coords='1751.89,4593.72,2001.67,4645.72' href='#mc:0,bo:5,bo:1,bo:4'>
  <area shape='rect' coords='1508.51,4566.72,1730.89,4618.72' href='#mc:0,bo:5,bo:1,bo:4,bo:0'>
  <area shape='rect' coords='1465.22,4620.72,1730.89,4672.72' href='#mc:0,bo:5,bo:1,bo:4,bo:1'>
  <area shape='rect' coords='1941.51,4687.72,2001.67,4713.72' href='#mc:0,bo:5,bo:1,bo:5'>
  <area shape='rect' coords='1675.47,4674.72,1898.51,4726.72' href='#mc:0,bo:5,bo:1,bo:5,bo:0'>
  <area shape='rect' coords='2037.22,4791.72,2312.48,4851.72' href='#mc:0,bo:5,bo:2'>
  <area shape='rect' coords='1769.81,4728.72,2016.22,4806.72' href='#mc:0,bo:5,bo:2,bo:0'>
  <area shape='rect' coords='1749.53,4808.72,2016.22,4860.72' href='#mc:0,bo:5,bo:2,bo:1'>
  <area shape='rect' coords='1763.12,4862.72,2016.22,4914.72' href='#mc:0,bo:5,bo:2,bo:2'>
  <area shape='rect' coords='2042.95,5156.72,2312.48,5216.72' href='#mc:0,bo:5,bo:3'>
  <area shape='rect' coords='1802.78,4916.72,2021.95,4968.72' href='#mc:0,bo:5,bo:3,bo:0'>
  <area shape='rect' coords='1852.58,4984.72,2021.95,5010.72' href='#mc:0,bo:5,bo:3,bo:1'>
  <area shape='rect' coords='1738.28,4970.72,1831.58,4996.72' href='#mc:0,bo:5,bo:3,bo:1,bo:0'>
  <area shape='rect' coords='1646,4998.72,1831.58,5024.72' href='#mc:0,bo:5,bo:3,bo:1,bo:1'>
  <area shape='rect' coords='1772.98,5026.72,2021.95,5078.72' href='#mc:0,bo:5,bo:3,bo:2'>
  <area shape='rect' coords='1927.59,5106.72,2021.95,5132.72' href='#mc:0,bo:5,bo:3,bo:3'>
  <area shape='rect' coords='1664.94,5080.72,1906.59,5158.72' href='#mc:0,bo:5,bo:3,bo:3,bo:0'>
  <area shape='rect' coords='1853.86,5160.72,2021.95,5186.72' href='#mc:0,bo:5,bo:3,bo:4'>
  <area shape='rect' coords='1793.53,5188.72,2021.95,5240.72' href='#mc:0,bo:5,bo:3,bo:5'>
  <area shape='rect' coords='1761.34,5242.72,2021.95,5294.72' href='#mc:0,bo:5,bo:3,bo:6'>
  <area shape='rect' coords='1802.61,5296.72,2021.95,5374.72' href='#mc:0,bo:5,bo:3,bo:7'>
  <area shape='rect' coords='1781.33,5376.72,2021.95,5428.72' href='#mc:0,bo:5,bo:3,bo:8'>
  <area shape='rect' coords='1787.36,5430.72,2021.95,5456.72' href='#mc:0,bo:5,bo:3,bo:9'>
  <area shape='rect' coords='2040.76,5564.72,2312.48,5624.72' href='#mc:0,bo:5,bo:4'>
  <area shape='rect' coords='1926.83,5458.72,2019.76,5484.72' href='#mc:0,bo:5,bo:4,bo:0'>
  <area shape='rect' coords='1769.31,5486.72,2019.76,5512.72' href='#mc:0,bo:5,bo:4,bo:1'>
  <area shape='rect' coords='1862.44,5514.72,2019.76,5540.72' href='#mc:0,bo:5,bo:4,bo:2'>
  <area shape='rect' coords='1772.95,5542.72,2019.76,5594.72' href='#mc:0,bo:5,bo:4,bo:3'>
  <area shape='rect' coords='1787.4,5596.72,2019.76,5622.72' href='#mc:0,bo:5,bo:4,bo:4'>
  <area shape='rect' coords='1829.34,5624.72,2019.76,5676.72' href='#mc:0,bo:5,bo:4,bo:5'>
  <area shape='rect' coords='1782.42,5678.72,2019.76,5730.72' href='#mc:0,bo:5,bo:4,bo:6'>
  <area shape='rect' coords='2042.81,5810.72,2312.48,5840.72' href='#mc:0,bo:5,bo:5'>
  <area shape='rect' coords='1901.06,5732.72,2021.81,5758.72' href='#mc:0,bo:5,bo:5,bo:0'>
  <area shape='rect' coords='1982.44,5760.72,2021.81,5786.72' href='#mc:0,bo:5,bo:5,bo:1'>
  <area shape='rect' coords='1765.81,5788.72,2021.81,5918.72' href='#mc:0,bo:5,bo:5,bo:2'>
  <area shape='rect' coords='2050.11,6039.72,2312.48,6099.72' href='#mc:0,bo:5,bo:6'>
  <area shape='rect' coords='1934.2,5920.72,2029.11,5946.72' href='#mc:0,bo:5,bo:6,bo:0'>
  <area shape='rect' coords='1782.53,5948.72,2029.11,6000.72' href='#mc:0,bo:5,bo:6,bo:1'>
  <area shape='rect' coords='1757.62,6002.72,2029.11,6054.72' href='#mc:0,bo:5,bo:6,bo:2'>
  <area shape='rect' coords='1948.9,6083.72,2029.11,6109.72' href='#mc:0,bo:5,bo:6,bo:3'>
  <area shape='rect' coords='1690.59,6056.72,1905.9,6108.72' href='#mc:0,bo:5,bo:6,bo:3,bo:0'>
  <area shape='rect' coords='1769.61,6110.72,1905.9,6136.72' href='#mc:0,bo:5,bo:6,bo:3,bo:1'>
  <area shape='rect' coords='1805.69,6138.72,2029.11,6190.72' href='#mc:0,bo:5,bo:6,bo:4'>
  <area shape='rect' coords='1787.09,6192.72,2029.11,6218.72' href='#mc:0,bo:5,bo:6,bo:5'>
  <area shape='rect' coords='2185.47,6434.72,2312.48,6464.72' href='#mc:0,bo:5,bo:7'>
  <area shape='rect' coords='1925.95,6220.72,2164.47,6246.72' href='#mc:0,bo:5,bo:7,bo:0'>
  <area shape='rect' coords='2069.56,6248.72,2164.47,6274.72' href='#mc:0,bo:5,bo:7,bo:1'>
  <area shape='rect' coords='1929.53,6276.72,2164.47,6328.72' href='#mc:0,bo:5,bo:7,bo:2'>
  <area shape='rect' coords='1948.56,6330.72,2164.47,6382.72' href='#mc:0,bo:5,bo:7,bo:3'>
  <area shape='rect' coords='1922.58,6384.72,2164.47,6410.72' href='#mc:0,bo:5,bo:7,bo:4'>
  <area shape='rect' coords='1917.81,6412.72,2164.47,6464.72' href='#mc:0,bo:5,bo:7,bo:5'>
  <area shape='rect' coords='1959.39,6466.72,2164.47,6518.72' href='#mc:0,bo:5,bo:7,bo:6'>
  <area shape='rect' coords='1697.4,6466.72,1938.39,6518.72' href='#mc:0,bo:5,bo:7,bo:6,bo:0'>
  <area shape='rect' coords='1926.15,6520.72,2164.47,6572.72' href='#mc:0,bo:5,bo:7,bo:7'>
  <area shape='rect' coords='1912.59,6574.72,2164.47,6678.72' href='#mc:0,bo:5,bo:7,bo:8'>
  <area shape='rect' coords='3846.61,5352.9,3988.91,5386.9' href='#mc:0,bo:6'>
  <area shape='rect' coords='4009.91,5052.9,4110.39,5082.9' href='#mc:0,bo:6,bo:0'>
  <area shape='rect' coords='4131.39,4986.9,4386.27,5038.9' href='#mc:0,bo:6,bo:0,bo:0'>
  <area shape='rect' coords='4407.27,4999.9,4537.07,5025.9' href='#mc:0,bo:6,bo:0,bo:0,bo:0'>
  <area shape='rect' coords='4131.39,5040.9,4379.97,5092.9' href='#mc:0,bo:6,bo:0,bo:1'>
  <area shape='rect' coords='4131.39,5094.9,4319.66,5120.9' href='#mc:0,bo:6,bo:0,bo:2'>
  <area shape='rect' coords='4153.39,5122.9,4213.55,5148.9' href='#mc:0,bo:6,bo:0,bo:3'>
  <area shape='rect' coords='4009.91,5244.9,4294.1,5304.9' href='#mc:0,bo:6,bo:1'>
  <area shape='rect' coords='4337.1,5150.9,4397.25,5176.9' href='#mc:0,bo:6,bo:1,bo:0'>
  <area shape='rect' coords='4315.1,5275.9,4513.88,5301.9' href='#mc:0,bo:6,bo:1,bo:1'>
  <area shape='rect' coords='4534.88,5178.9,4593.57,5204.9' href='#mc:0,bo:6,bo:1,bo:1,bo:0'>
  <area shape='rect' coords='4534.88,5206.9,4578.5,5232.9' href='#mc:0,bo:6,bo:1,bo:1,bo:1'>
  <area shape='rect' coords='4534.88,5234.9,4592.75,5260.9' href='#mc:0,bo:6,bo:1,bo:1,bo:2'>
  <area shape='rect' coords='4534.88,5262.9,4605.41,5288.9' href='#mc:0,bo:6,bo:1,bo:1,bo:3'>
  <area shape='rect' coords='4534.88,5290.9,4580.32,5316.9' href='#mc:0,bo:6,bo:1,bo:1,bo:4'>
  <area shape='rect' coords='4534.88,5318.9,4592.57,5344.9' href='#mc:0,bo:6,bo:1,bo:1,bo:5'>
  <area shape='rect' coords='4534.88,5359.9,4676.85,5385.9' href='#mc:0,bo:6,bo:1,bo:1,bo:6'>
  <area shape='rect' coords='4697.85,5346.9,4975.61,5398.9' href='#mc:0,bo:6,bo:1,bo:1,bo:6,bo:0'>
  <area shape='rect' coords='4009.91,5561.9,4103.83,5591.9' href='#mc:0,bo:6,bo:2'>
  <area shape='rect' coords='4124.83,5400.9,4146.83,5422.9' href='https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Strict_mode'>
  <area shape='rect' coords='4146.83,5400.9,4184.63,5426.9' href='#mc:0,bo:6,bo:2,bo:0'>
  <area shape='rect' coords='4124.83,5428.9,4339.5,5454.9' href='#mc:0,bo:6,bo:2,bo:1'>
  <area shape='rect' coords='4124.83,5456.9,4308.79,5508.9' href='#mc:0,bo:6,bo:2,bo:2'>
  <area shape='rect' coords='4146.83,5510.9,4206.99,5536.9' href='#mc:0,bo:6,bo:2,bo:3'>
  <area shape='rect' coords='4124.83,5538.9,4356.47,5590.9' href='#mc:0,bo:6,bo:2,bo:4'>
  <area shape='rect' coords='4377.47,5538.9,4610.64,5590.9' href='#mc:0,bo:6,bo:2,bo:4,bo:0'>
  <area shape='rect' coords='4124.83,5592.9,4316.85,5644.9' href='#mc:0,bo:6,bo:2,bo:5'>
  <area shape='rect' coords='4124.83,5646.9,4362.97,5698.9' href='#mc:0,bo:6,bo:2,bo:6'>
  <area shape='rect' coords='4124.83,5700.9,4358.43,5752.9' href='#mc:0,bo:6,bo:2,bo:7'>
  <area shape='rect' coords='3860.06,6608.64,4257.12,6642.64' href='#mc:0,bo:7'>
  <area shape='rect' coords='4278.12,5429.64,4452.79,5459.64' href='#mc:0,bo:7,bo:0'>
  <area shape='rect' coords='4473.79,5321.64,4633.82,5347.64' href='#mc:0,bo:7,bo:0,bo:0'>
  <area shape='rect' coords='4473.79,5349.64,4691.56,5375.64' href='#mc:0,bo:7,bo:0,bo:1'>
  <area shape='rect' coords='4473.79,5377.64,4647.7,5403.64' href='#mc:0,bo:7,bo:0,bo:2'>
  <area shape='rect' coords='4473.79,5405.64,4694.87,5457.64' href='#mc:0,bo:7,bo:0,bo:3'>
  <area shape='rect' coords='4473.79,5459.64,4667.92,5485.64' href='#mc:0,bo:7,bo:0,bo:4'>
  <area shape='rect' coords='4688.92,5459.64,4894.92,5485.64' href='#mc:0,bo:7,bo:0,bo:4,bo:0'>
  <area shape='rect' coords='4473.79,5487.64,4495.79,5509.64' href='https://code.jquery.com/jquery-3.3.1.js'>
  <area shape='rect' coords='4495.79,5487.64,4544.62,5513.64' href='#mc:0,bo:7,bo:0,bo:5'>
  <area shape='rect' coords='4473.79,5515.64,4716.59,5567.64' href='#mc:0,bo:7,bo:0,bo:6'>
  <area shape='rect' coords='4737.59,5528.64,4935.96,5554.64' href='#mc:0,bo:7,bo:0,bo:6,bo:0'>
  <area shape='rect' coords='4278.12,6719.64,4588.87,6779.64' href='#mc:0,bo:7,bo:1'>
  <area shape='rect' coords='4609.87,5569.64,4864.4,5647.64' href='#mc:0,bo:7,bo:1,bo:0'>
  <area shape='rect' coords='4609.87,5717.64,4707.09,5743.64' href='#mc:0,bo:7,bo:1,bo:1'>
  <area shape='rect' coords='4728.09,5649.64,4893.51,5675.64' href='#mc:0,bo:7,bo:1,bo:1,bo:0'>
  <area shape='rect' coords='4728.09,5677.64,4868.07,5703.64' href='#mc:0,bo:7,bo:1,bo:1,bo:1'>
  <area shape='rect' coords='4728.09,5745.64,4920.9,5771.64' href='#mc:0,bo:7,bo:1,bo:1,bo:2'>
  <area shape='rect' coords='4941.9,5705.64,5191.78,5757.64' href='#mc:0,bo:7,bo:1,bo:1,bo:2,bo:0'>
  <area shape='rect' coords='4941.9,5759.64,5172.24,5811.64' href='#mc:0,bo:7,bo:1,bo:1,bo:2,bo:1'>
  <area shape='rect' coords='4609.87,6557.64,4704.78,6583.64' href='#mc:0,bo:7,bo:1,bo:2'>
  <area shape='rect' coords='4725.78,5813.64,4769.2,5839.64' href='#mc:0,bo:7,bo:1,bo:2,bo:0'>
  <area shape='rect' coords='4725.78,5841.64,4801.99,5867.64' href='#mc:0,bo:7,bo:1,bo:2,bo:1'>
  <area shape='rect' coords='4725.78,5869.64,4747.78,5891.64' href='https://code.jquery.com/jquery-1.11.2.js'>
  <area shape='rect' coords='4747.78,5869.64,4807.24,5895.64' href='#mc:0,bo:7,bo:1,bo:2,bo:2'>
  <area shape='rect' coords='4828.24,5869.64,4921.01,5895.64' href='#mc:0,bo:7,bo:1,bo:2,bo:2,bo:0'>
  <area shape='rect' coords='4725.78,6017.64,4770.07,6043.64' href='#mc:0,bo:7,bo:1,bo:2,bo:3'>
  <area shape='rect' coords='4791.07,5897.64,5040.31,5949.64' href='#mc:0,bo:7,bo:1,bo:2,bo:3,bo:0'>
  <area shape='rect' coords='4791.07,5951.64,5044.31,6003.64' href='#mc:0,bo:7,bo:1,bo:2,bo:3,bo:1'>
  <area shape='rect' coords='4791.07,6044.64,5032.09,6096.64' href='#mc:0,bo:7,bo:1,bo:2,bo:3,bo:2'>
  <area shape='rect' coords='5053.09,6005.64,5314.63,6135.64' href='#mc:0,bo:7,bo:1,bo:2,bo:3,bo:2,bo:0'>
  <area shape='rect' coords='4791.07,6137.64,4947.76,6163.64' href='#mc:0,bo:7,bo:1,bo:2,bo:3,bo:3'>
  <area shape='rect' coords='4747.78,6165.64,4940.71,6217.64' href='#mc:0,bo:7,bo:1,bo:2,bo:4'>
  <area shape='rect' coords='4725.78,6219.64,4984.24,6245.64' href='#mc:0,bo:7,bo:1,bo:2,bo:5'>
  <area shape='rect' coords='4747.78,6273.64,4985.13,6299.64' href='#mc:0,bo:7,bo:1,bo:2,bo:6'>
  <area shape='rect' coords='5006.13,6247.64,5243.63,6325.64' href='#mc:0,bo:7,bo:1,bo:2,bo:6,bo:0'>
  <area shape='rect' coords='4747.78,6503.64,4841.93,6529.64' href='#mc:0,bo:7,bo:1,bo:2,bo:7'>
  <area shape='rect' coords='4862.93,6327.64,5114.13,6379.64' href='#mc:0,bo:7,bo:1,bo:2,bo:7,bo:0'>
  <area shape='rect' coords='4862.93,6381.64,5069.48,6407.64' href='#mc:0,bo:7,bo:1,bo:2,bo:7,bo:1'>
  <area shape='rect' coords='4862.93,6409.64,4935.01,6435.64' href='#mc:0,bo:7,bo:1,bo:2,bo:7,bo:2'>
  <area shape='rect' coords='4862.93,6437.64,5120.04,6515.64' href='#mc:0,bo:7,bo:1,bo:2,bo:7,bo:3'>
  <area shape='rect' coords='4862.93,6517.64,5077.37,6543.64' href='#mc:0,bo:7,bo:1,bo:2,bo:7,bo:4'>
  <area shape='rect' coords='4862.93,6545.64,5103.26,6571.64' href='#mc:0,bo:7,bo:1,bo:2,bo:7,bo:5'>
  <area shape='rect' coords='4862.93,6573.64,5110.65,6625.64' href='#mc:0,bo:7,bo:1,bo:2,bo:7,bo:6'>
  <area shape='rect' coords='4862.93,6640.64,5063.09,6692.64' href='#mc:0,bo:7,bo:1,bo:2,bo:7,bo:7'>
  <area shape='rect' coords='5084.09,6627.64,5344.85,6705.64' href='#mc:0,bo:7,bo:1,bo:2,bo:7,bo:7,bo:0'>
  <area shape='rect' coords='5365.85,6653.64,5416.21,6679.64' href='#mc:0,bo:7,bo:1,bo:2,bo:7,bo:7,bo:0,bo:0'>
  <area shape='rect' coords='4747.78,6734.64,4798.9,6760.64' href='#mc:0,bo:7,bo:1,bo:2,bo:8'>
  <area shape='rect' coords='4819.9,6707.64,5054.67,6759.64' href='#mc:0,bo:7,bo:1,bo:2,bo:8,bo:0'>
  <area shape='rect' coords='4819.9,6761.64,5016.37,6787.64' href='#mc:0,bo:7,bo:1,bo:2,bo:8,bo:1'>
  <area shape='rect' coords='4747.78,6856.64,4980.78,6908.64' href='#mc:0,bo:7,bo:1,bo:2,bo:9'>
  <area shape='rect' coords='5023.78,6789.64,5098.13,6815.64' href='#mc:0,bo:7,bo:1,bo:2,bo:9,bo:0'>
  <area shape='rect' coords='5001.78,6817.64,5252.78,6895.64' href='#mc:0,bo:7,bo:1,bo:2,bo:9,bo:1'>
  <area shape='rect' coords='5001.78,6897.64,5228.87,6975.64' href='#mc:0,bo:7,bo:1,bo:2,bo:9,bo:2'>
  <area shape='rect' coords='4725.78,6977.64,4904.09,7003.64' href='#mc:0,bo:7,bo:1,bo:2,bo:10'>
  <area shape='rect' coords='4747.78,7139.64,4838.92,7165.64' href='#mc:0,bo:7,bo:1,bo:2,bo:11'>
  <area shape='rect' coords='4859.92,7005.64,5005.04,7031.64' href='#mc:0,bo:7,bo:1,bo:2,bo:11,bo:0'>
  <area shape='rect' coords='5026.04,7005.64,5241.07,7031.64' href='#mc:0,bo:7,bo:1,bo:2,bo:11,bo:0,bo:0'>
  <area shape='rect' coords='4859.92,7033.64,5065.67,7085.64' href='#mc:0,bo:7,bo:1,bo:2,bo:11,bo:1'>
  <area shape='rect' coords='4859.92,7087.64,5029.18,7139.64' href='#mc:0,bo:7,bo:1,bo:2,bo:11,bo:2'>
  <area shape='rect' coords='4859.92,7141.64,5111.4,7245.64' href='#mc:0,bo:7,bo:1,bo:2,bo:11,bo:3'>
  <area shape='rect' coords='4859.92,7247.64,5115.34,7299.64' href='#mc:0,bo:7,bo:1,bo:2,bo:11,bo:4'>
  <area shape='rect' coords='4725.78,7301.64,4923.31,7327.64' href='#mc:0,bo:7,bo:1,bo:2,bo:12'>
  <area shape='rect' coords='4609.87,7329.64,4864.34,7381.64' href='#mc:0,bo:7,bo:1,bo:3'>
  <area shape='rect' coords='4609.87,7439.64,4770.18,7465.64' href='#mc:0,bo:7,bo:1,bo:4'>
  <area shape='rect' coords='4791.18,7383.64,4927.67,7409.64' href='#mc:0,bo:7,bo:1,bo:4,bo:0'>
  <area shape='rect' coords='4791.18,7411.64,4876.84,7437.64' href='#mc:0,bo:7,bo:1,bo:4,bo:1'>
  <area shape='rect' coords='4791.18,7439.64,5032.88,7465.64' href='#mc:0,bo:7,bo:1,bo:4,bo:2'>
  <area shape='rect' coords='4791.18,7467.64,4948.48,7493.64' href='#mc:0,bo:7,bo:1,bo:4,bo:3'>
  <area shape='rect' coords='4791.18,7495.64,4904.31,7521.64' href='#mc:0,bo:7,bo:1,bo:4,bo:4'>
  <area shape='rect' coords='4609.87,7523.64,4847.88,7601.64' href='#mc:0,bo:7,bo:1,bo:5'>
  <area shape='rect' coords='4868.88,7523.64,5119.23,7601.64' href='#mc:0,bo:7,bo:1,bo:5,bo:0'>
  <area shape='rect' coords='4609.87,7739.64,4723.17,7765.64' href='#mc:0,bo:7,bo:1,bo:6'>
  <area shape='rect' coords='4744.17,7603.64,5067.01,7655.64' href='#mc:0,bo:7,bo:1,bo:6,bo:0'>
  <area shape='rect' coords='4744.17,7657.64,4962.1,7709.64' href='#mc:0,bo:7,bo:1,bo:6,bo:1'>
  <area shape='rect' coords='4744.17,7711.64,4982.78,7763.64' href='#mc:0,bo:7,bo:1,bo:6,bo:2'>
  <area shape='rect' coords='4744.17,7765.64,4891.71,7791.64' href='#mc:0,bo:7,bo:1,bo:6,bo:3'>
  <area shape='rect' coords='4744.17,7793.64,4990.53,7845.64' href='#mc:0,bo:7,bo:1,bo:6,bo:4'>
  <area shape='rect' coords='4744.17,7847.64,4979.42,7873.64' href='#mc:0,bo:7,bo:1,bo:6,bo:5'>
  <area shape='rect' coords='4744.17,7875.64,4943.37,7901.64' href='#mc:0,bo:7,bo:1,bo:6,bo:6'>
  <area shape='rect' coords='4609.87,7903.64,4851.57,7929.64' href='#mc:0,bo:7,bo:1,bo:7'>
  <area shape='rect' coords='2794.53,7023.88,3140.17,7057.88' href='#mc:0,bo:8'>
  <area shape='rect' coords='2470.24,6506.88,2773.53,6566.88' href='#mc:0,bo:8,bo:0'>
  <area shape='rect' coords='2720.28,6675.88,2773.53,6705.88' href='#mc:0,bo:8,bo:1'>
  <area shape='rect' coords='2605.54,6677.88,2699.28,6703.88' href='#mc:0,bo:8,bo:1,bo:0'>
  <area shape='rect' coords='2330.15,6568.88,2584.54,6646.88' href='#mc:0,bo:8,bo:1,bo:0,bo:0'>
  <area shape='rect' coords='2401.9,6648.88,2584.54,6674.88' href='#mc:0,bo:8,bo:1,bo:0,bo:1'>
  <area shape='rect' coords='2340.12,6676.88,2584.54,6728.88' href='#mc:0,bo:8,bo:1,bo:0,bo:2'>
  <area shape='rect' coords='2452.24,6730.88,2584.54,6756.88' href='#mc:0,bo:8,bo:1,bo:0,bo:3'>
  <area shape='rect' coords='2406.37,6730.88,2431.24,6756.88' href='#mc:0,bo:8,bo:1,bo:0,bo:3,bo:0'>
  <area shape='rect' coords='2477.09,6772.88,2584.54,6798.88' href='#mc:0,bo:8,bo:1,bo:0,bo:4'>
  <area shape='rect' coords='2288.87,6758.88,2456.09,6784.88' href='#mc:0,bo:8,bo:1,bo:0,bo:4,bo:0'>
  <area shape='rect' coords='2328.49,6786.88,2456.09,6812.88' href='#mc:0,bo:8,bo:1,bo:0,bo:4,bo:1'>
  <area shape='rect' coords='2601.46,6826.88,2773.53,6856.88' href='#mc:0,bo:8,bo:2'>
  <area shape='rect' coords='2335.95,6814.88,2580.46,6840.88' href='#mc:0,bo:8,bo:2,bo:0'>
  <area shape='rect' coords='2520.31,6842.88,2580.46,6868.88' href='#mc:0,bo:8,bo:2,bo:1'>
  <area shape='rect' coords='2549.87,6936.88,2773.53,6966.88' href='#mc:0,bo:8,bo:3'>
  <area shape='rect' coords='2323.76,6870.88,2528.87,6896.88' href='#mc:0,bo:8,bo:3,bo:0'>
  <area shape='rect' coords='2368.57,6898.88,2528.87,6924.88' href='#mc:0,bo:8,bo:3,bo:1'>
  <area shape='rect' coords='2308.26,6926.88,2528.87,6978.88' href='#mc:0,bo:8,bo:3,bo:2'>
  <area shape='rect' coords='2285.99,6980.88,2528.87,7032.88' href='#mc:0,bo:8,bo:3,bo:3'>
  <area shape='rect' coords='2505.23,7085.88,2773.53,7115.88' href='#mc:0,bo:8,bo:4'>
  <area shape='rect' coords='2252.14,7034.88,2484.23,7112.88' href='#mc:0,bo:8,bo:4,bo:0'>
  <area shape='rect' coords='1978.28,7047.88,2231.14,7099.88' href='#mc:0,bo:8,bo:4,bo:0,bo:0'>
  <area shape='rect' coords='2235.56,7114.88,2484.23,7166.88' href='#mc:0,bo:8,bo:4,bo:1'>
  <area shape='rect' coords='1973.57,7114.88,2214.56,7166.88' href='#mc:0,bo:8,bo:4,bo:1,bo:0'>
  <area shape='rect' coords='2593.89,7220.88,2773.53,7250.88' href='#mc:0,bo:8,bo:5'>
  <area shape='rect' coords='2314.71,7168.88,2572.89,7220.88' href='#mc:0,bo:8,bo:5,bo:0'>
  <area shape='rect' coords='2332.45,7222.88,2572.89,7274.88' href='#mc:0,bo:8,bo:5,bo:1'>
  <area shape='rect' coords='2296.7,7235.88,2311.45,7261.88' href='#mc:0,bo:8,bo:5,bo:1,bo:0'>
  <area shape='rect' coords='2512.73,7276.88,2572.89,7302.88' href='#mc:0,bo:8,bo:5,bo:2'>
  <area shape='rect' coords='2622.32,7424.88,2773.53,7454.88' href='#mc:0,bo:8,bo:6'>
  <area shape='rect' coords='2376.65,7304.88,2601.32,7330.88' href='#mc:0,bo:8,bo:6,bo:0'>
  <area shape='rect' coords='2330.99,7332.88,2601.32,7384.88' href='#mc:0,bo:8,bo:6,bo:1'>
  <area shape='rect' coords='2343.59,7386.88,2601.32,7438.88' href='#mc:0,bo:8,bo:6,bo:2'>
  <area shape='rect' coords='2349.98,7440.88,2601.32,7492.88' href='#mc:0,bo:8,bo:6,bo:3'>
  <area shape='rect' coords='2331.98,7494.88,2601.32,7546.88' href='#mc:0,bo:8,bo:6,bo:4'>
  <area shape='rect' coords='2330.9,7548.88,2601.32,7574.88' href='#mc:0,bo:8,bo:6,bo:5'>
  <area shape='rect' coords='3606.5,3199.98,3669.38,3233.98' href='#mc:0,bo:9'>
  <area shape='rect' coords='3690.38,3185.98,3766.95,3215.98' href='#mc:0,bo:9,bo:0'>
  <area shape='rect' coords='3787.95,3119.98,4056.95,3171.98' href='#mc:0,bo:9,bo:0,bo:0'>
  <area shape='rect' coords='3787.95,3173.98,3858.81,3199.98' href='#mc:0,bo:9,bo:0,bo:1'>
  <area shape='rect' coords='3787.95,3201.98,4027.13,3253.98' href='#mc:0,bo:9,bo:0,bo:2'>
  <area shape='rect' coords='3787.95,3255.98,3843.33,3281.98' href='#mc:0,bo:9,bo:0,bo:3'>
  <area shape='rect' coords='3712.38,3283.98,3747.19,3313.98' href='#mc:0,bo:9,bo:1'>
</map>
<hr/>
<table class="vym-footer">   
        <tr> 
        <td class="vym-footerL">/var/www/html/vym/JavaScriptWeirdStuff/JavaScript the Weird Parts.html</td> 
            <td class="vym-footerC">2018-07-02</td> 
            <td class="vym-footerR"> <a href='http://www.insilmaril.de/vym'>vym 2.5.0</a></td> 
            </tr> 
             </table>
</body></html>