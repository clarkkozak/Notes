<html>
<meta http-equiv="content-type" content="text/html; charset=UTF-8"> 
<meta name="generator=" content=" vym - view your mind - http://www.insilmaril.de/vym">
<meta name="author" content=""> 
<meta name="description" content=""> 
<link rel='stylesheet' id='css.stylesheet' href='vym.css' />

<head><title>JavaScript the Weird Parts</title></head>
<body>
<center><img src="JavaScript the Weird Parts.png" usemap='#imagemap'></center>
<table class="vym-toc">
<tr><td class="vym-toc-title">
Contents:
</td></tr>
<tr><td>
<div class="vym-toc-branch-0"><a href="#mc:0">  JavaScript the Weird Parts</a></br>
</div><div class="vym-toc-branch-1"><a href="#mc:0,bo:0"> 1.  Introduction</a></br>
</div><div class="vym-toc-branch-2"><a href="#mc:0,bo:0,bo:0"> 1.1.  Understand, don't imediate</a></br>
</div><div class="vym-toc-branch-3"><a href="#mc:0,bo:0,bo:0,bo:0"> 1.1.1.  Type it out</a></br>
</div><div class="vym-toc-branch-2"><a href="#mc:0,bo:0,bo:1"> 1.2.  Frameworks</a></br>
</div><div class="vym-toc-branch-3"><a href="#mc:0,bo:0,bo:1,bo:0"> 1.2.1.  People who make the frameworks understand the weird parts</a></br>
</div><div class="vym-toc-branch-3"><a href="#mc:0,bo:0,bo:1,bo:1"> 1.2.2.  Angular</a></br>
</div><div class="vym-toc-branch-3"><a href="#mc:0,bo:0,bo:1,bo:2"> 1.2.3.  jQuery</a></br>
</div><div class="vym-toc-branch-2"><a href="#mc:0,bo:0,bo:2"> 1.3.  Weird Parts</a></br>
</div><div class="vym-toc-branch-3"><a href="#mc:0,bo:0,bo:2,bo:0"> 1.3.1.  Understanding the how JavaScript works will give you the bases of how to create
the frameworks</a></br>
</div><div class="vym-toc-branch-1"><a href="#mc:0,bo:1"> 2.  Execution Context and Lexical Enviroment</a></br>
</div><div class="vym-toc-branch-2"><a href="#mc:0,bo:1,bo:0"> 2.1.  Definitions</a></br>
</div><div class="vym-toc-branch-3"><a href="#mc:0,bo:1,bo:0,bo:0"> 2.1.1.  Name - Value Pair</a></br>
</div><div class="vym-toc-branch-4"><a href="#mc:0,bo:1,bo:0,bo:0,bo:0"> 2.1.1.1.  address = &quot;100 Miller Ct&quot;</a></br>
</div><div class="vym-toc-branch-4"><a href="#mc:0,bo:1,bo:0,bo:0,bo:1"> 2.1.1.2.  Object in JavaScript</a></br>
</div><div class="vym-toc-branch-5"><a href="#mc:0,bo:1,bo:0,bo:0,bo:1,bo:0"> 2.1.1.2.1.  Collection of name / value pairs</a></br>
</div><div class="vym-toc-branch-5"><a href="#mc:0,bo:1,bo:0,bo:0,bo:1,bo:1"> 2.1.1.2.2.  Name Values within name values within name values</a></br>
</div><div class="vym-toc-branch-4"><a href="#mc:0,bo:1,bo:0,bo:0,bo:2"> 2.1.1.3.  A name that maps to a unique value</a></br>
</div><div class="vym-toc-branch-4"><a href="#mc:0,bo:1,bo:0,bo:0,bo:3"> 2.1.1.4.  Only one value per context</a></br>
</div><div class="vym-toc-branch-3"><a href="#mc:0,bo:1,bo:0,bo:1"> 2.1.2.  Execution Context</a></br>
</div><div class="vym-toc-branch-4"><a href="#mc:0,bo:1,bo:0,bo:1,bo:0"> 2.1.2.1.  A wrapper that helps manage code that's running</a></br>
</div><div class="vym-toc-branch-4"><a href="#mc:0,bo:1,bo:0,bo:1,bo:1"> 2.1.2.2.  which lexical enviroment depends on execution context</a></br>
</div><div class="vym-toc-branch-4"><a href="#mc:0,bo:1,bo:0,bo:1,bo:2"> 2.1.2.3.  contains things beyond your code</a></br>
</div><div class="vym-toc-branch-3"><a href="#mc:0,bo:1,bo:0,bo:2"> 2.1.3.  Lexical Enviroment</a></br>
</div><div class="vym-toc-branch-4"><a href="#mc:0,bo:1,bo:0,bo:2,bo:0"> 2.1.3.1.  Lexical means having to do with language or grammar</a></br>
</div><div class="vym-toc-branch-4"><a href="#mc:0,bo:1,bo:0,bo:2,bo:1"> 2.1.3.2.  Where written code physically positioned</a></br>
</div><div class="vym-toc-branch-4"><a href="#mc:0,bo:1,bo:0,bo:2,bo:2"> 2.1.3.3.  Syntax parser cares on where things are placed</a></br>
</div><div class="vym-toc-branch-3"><a href="#mc:0,bo:1,bo:0,bo:3"> 2.1.4.  Syntax Parser</a></br>
</div><div class="vym-toc-branch-4"><a href="#mc:0,bo:1,bo:0,bo:3,bo:0"> 2.1.4.1.  A program that reads code and determines what to do with and if the grammar is
valid</a></br>
</div><div class="vym-toc-branch-4"><a href="#mc:0,bo:1,bo:0,bo:3,bo:1"> 2.1.4.2.  Translates it for a computer</a></br>
</div><div class="vym-toc-branch-2"><a href="#mc:0,bo:1,bo:1"> 2.2.  Global Enviroment and Global Object</a></br>
</div><div class="vym-toc-branch-3"><a href="#mc:0,bo:1,bo:1,bo:0"> 2.2.1.  Global Execution Context engine create 2 things</a></br>
</div><div class="vym-toc-branch-4"><a href="#mc:0,bo:1,bo:1,bo:0,bo:0"> 2.2.1.1.  this</a></br>
</div><div class="vym-toc-branch-4"><a href="#mc:0,bo:1,bo:1,bo:0,bo:1"> 2.2.1.2.  Global object</a></br>
</div><div class="vym-toc-branch-3"><a href="#mc:0,bo:1,bo:1,bo:1"> 2.2.2.  Nothing in JavaScript</a></br>
</div><div class="vym-toc-branch-4"><a href="#mc:0,bo:1,bo:1,bo:1,bo:0"> 2.2.2.1.  this</a></br>
</div><div class="vym-toc-branch-4"><a href="#mc:0,bo:1,bo:1,bo:1,bo:1"> 2.2.2.2.  window</a></br>
</div><div class="vym-toc-branch-4"><a href="#mc:0,bo:1,bo:1,bo:1,bo:2"> 2.2.2.3.  Both of these are the global object (while on a Browser)</a></br>
</div><div class="vym-toc-branch-5"><a href="#mc:0,bo:1,bo:1,bo:1,bo:2,bo:0"> 2.2.2.3.1.  At the global level, this = window</a></br>
</div><div class="vym-toc-branch-4"><a href="#mc:0,bo:1,bo:1,bo:1,bo:3"> 2.2.2.4.  JS still  creates variables</a></br>
</div><div class="vym-toc-branch-4"><a href="#mc:0,bo:1,bo:1,bo:1,bo:4"> 2.2.2.5.  YOU DIDN'T WRITE THIS STUFF</a></br>
</div><div class="vym-toc-branch-3"><a href="#mc:0,bo:1,bo:1,bo:2"> 2.2.3.  Global: Not inside a function</a></br>
</div><div class="vym-toc-branch-4"><a href="#mc:0,bo:1,bo:1,bo:2,bo:0"> 2.2.3.1.  When not in a function, the variables sit in the lexical enviroment.</a></br>
</div><div class="vym-toc-branch-4"><a href="#mc:0,bo:1,bo:1,bo:2,bo:1"> 2.2.3.2.  a = window.a</a></br>
</div><div class="vym-toc-branch-3"><a href="#mc:0,bo:1,bo:1,bo:3"> 2.2.4.  Review</a></br>
</div><div class="vym-toc-branch-4"><a href="#mc:0,bo:1,bo:1,bo:3,bo:0"> 2.2.4.1.  Execution Contxt</a></br>
</div><div class="vym-toc-branch-5"><a href="#mc:0,bo:1,bo:1,bo:3,bo:0,bo:0"> 2.2.4.1.1.  Global Object</a></br>
</div><div class="vym-toc-branch-5"><a href="#mc:0,bo:1,bo:1,bo:3,bo:0,bo:1"> 2.2.4.1.2.  this</a></br>
</div><div class="vym-toc-branch-5"><a href="#mc:0,bo:1,bo:1,bo:3,bo:0,bo:2"> 2.2.4.1.3.  window</a></br>
</div><div class="vym-toc-branch-5"><a href="#mc:0,bo:1,bo:1,bo:3,bo:0,bo:3"> 2.2.4.1.4.  Your code</a></br>
</div><div class="vym-toc-branch-2"><a href="#mc:0,bo:1,bo:2"> 2.3.  Execution Contenxt: Creation and Hoisting</a></br>
</div><div class="vym-toc-branch-3"><a href="#mc:0,bo:1,bo:2,bo:0"> 2.3.1.  Hoisting</a></br>
</div><div class="vym-toc-branch-3"><a href="#mc:0,bo:1,bo:2,bo:1"> 2.3.2.  WHAT EXECUTES ISN'T WHAT YOU'VE WRITTEN</a></br>
</div><div class="vym-toc-branch-4"><a href="#mc:0,bo:1,bo:2,bo:1,bo:0"> 2.3.2.1.  JavaScript Engine makes descisions</a></br>
</div><div class="vym-toc-branch-3"><a href="#mc:0,bo:1,bo:2,bo:2"> 2.3.3.  (1) Creation Phase</a></br>
</div><div class="vym-toc-branch-4"><a href="#mc:0,bo:1,bo:2,bo:2,bo:0"> 2.3.3.1.  Global Object</a></br>
</div><div class="vym-toc-branch-4"><a href="#mc:0,bo:1,bo:2,bo:2,bo:1"> 2.3.3.2.  this</a></br>
</div><div class="vym-toc-branch-4"><a href="#mc:0,bo:1,bo:2,bo:2,bo:2"> 2.3.3.3.  out enviroment</a></br>
</div><div class="vym-toc-branch-4"><a href="#mc:0,bo:1,bo:2,bo:2,bo:3"> 2.3.3.4.  Syntax parser recognizes where you've created variables and functions</a></br>
</div><div class="vym-toc-branch-5"><a href="#mc:0,bo:1,bo:2,bo:2,bo:3,bo:0"> 2.3.3.4.1.  Set ups memory space for functions and vvariables: &quot;Hoisting&quot;</a></br>
</div><div class="vym-toc-branch-3"><a href="#mc:0,bo:1,bo:2,bo:3"> 2.3.4.  Example Code</a></br>
</div><div class="vym-toc-branch-4"><a href="#mc:0,bo:1,bo:2,bo:3,bo:0"> 2.3.4.1.  Function in hosted in entirered</a></br>
</div><div class="vym-toc-branch-4"><a href="#mc:0,bo:1,bo:2,bo:3,bo:1"> 2.3.4.2.  variables doesn't until execution phase</a></br>
</div><div class="vym-toc-branch-4"><a href="#mc:0,bo:1,bo:2,bo:3,bo:2"> 2.3.4.3.  undefined is a placeholder</a></br>
</div><div class="vym-toc-branch-4"><a href="#mc:0,bo:1,bo:2,bo:3,bo:3"> 2.3.4.4.  Never rely on hoisting</a></br>
</div><div class="vym-toc-branch-3"><a href="#mc:0,bo:1,bo:2,bo:4"> 2.3.5.  Declare functions at the top of your code</a></br>
</div><div class="vym-toc-branch-2"><a href="#mc:0,bo:1,bo:3"> 2.4.  Exeution Content: Execution</a></br>
</div><div class="vym-toc-branch-3"><a href="#mc:0,bo:1,bo:3,bo:0"> 2.4.1.  Runs your code line by line</a></br>
</div><div class="vym-toc-branch-3"><a href="#mc:0,bo:1,bo:3,bo:1"> 2.4.2.  After hoisting, things are execution</a></br>
</div><div class="vym-toc-branch-2"><a href="#mc:0,bo:1,bo:4"> 2.5.  Conceptual Aside: JavaScript and Undeifined</a></br>
</div><div class="vym-toc-branch-3"><a href="#mc:0,bo:1,bo:4,bo:0"> 2.5.1.  not defined IS NOT undefined</a></br>
</div><div class="vym-toc-branch-3"><a href="#mc:0,bo:1,bo:4,bo:1"> 2.5.2.  Example Code</a></br>
</div><div class="vym-toc-branch-4"><a href="#mc:0,bo:1,bo:4,bo:1,bo:0"> 2.5.2.1.  When a variable isn't declared than the browser will say &quot;it's not in memory my
dude&quot;</a></br>
</div><div class="vym-toc-branch-4"><a href="#mc:0,bo:1,bo:4,bo:1,bo:1"> 2.5.2.2.  undefined takes up memory space</a></br>
</div><div class="vym-toc-branch-3"><a href="#mc:0,bo:1,bo:4,bo:2"> 2.5.3.  undefineid means it's  a value that JavaScript is creating</a></br>
</div><div class="vym-toc-branch-3"><a href="#mc:0,bo:1,bo:4,bo:3"> 2.5.4.  NEVER: a = undefined;</a></br>
</div><div class="vym-toc-branch-4"><a href="#mc:0,bo:1,bo:4,bo:3,bo:0"> 2.5.4.1.  Valid, yet dangerous</a></br>
</div><div class="vym-toc-branch-4"><a href="#mc:0,bo:1,bo:4,bo:3,bo:1"> 2.5.4.2.  Let JavaScript always set undefined</a></br>
</div><div class="vym-toc-branch-2"><a href="#mc:0,bo:1,bo:5"> 2.6.  Conceptual Aside: Single Threaded, Synchronous Execution</a></br>
</div><div class="vym-toc-branch-3"><a href="#mc:0,bo:1,bo:5,bo:0"> 2.6.1.  Single Threaded: Only one command at a time</a></br>
</div><div class="vym-toc-branch-4"><a href="#mc:0,bo:1,bo:5,bo:0,bo:0"> 2.6.1.1.  The browerser also runs</a></br>
</div><div class="vym-toc-branch-4"><a href="#mc:0,bo:1,bo:5,bo:0,bo:1"> 2.6.1.2.  JavaScript behaves as a single threaded message</a></br>
</div><div class="vym-toc-branch-3"><a href="#mc:0,bo:1,bo:5,bo:1"> 2.6.2.  Synchronous (in programming)</a></br>
</div><div class="vym-toc-branch-4"><a href="#mc:0,bo:1,bo:5,bo:1,bo:0"> 2.6.2.1.  One at a time</a></br>
</div><div class="vym-toc-branch-4"><a href="#mc:0,bo:1,bo:5,bo:1,bo:1"> 2.6.2.2.  One line of code at a time in order that it appears</a></br>
</div><div class="vym-toc-branch-2"><a href="#mc:0,bo:1,bo:6"> 2.7.  Function Invocation and Execution Stack</a></br>
</div><div class="vym-toc-branch-3"><a href="#mc:0,bo:1,bo:6,bo:0"> 2.7.1.  Innvocatoin: Calling a function or ()</a></br>
</div><div class="vym-toc-branch-3"><a href="#mc:0,bo:1,bo:6,bo:1"> 2.7.2.  Example Code</a></br>
</div><div class="vym-toc-branch-3"><a href="#mc:0,bo:1,bo:6,bo:2"> 2.7.3.  Execution Stack</a></br>
</div><div class="vym-toc-branch-4"><a href="#mc:0,bo:1,bo:6,bo:2,bo:0"> 2.7.3.1.  2) function a Execution Context</a></br>
</div><div class="vym-toc-branch-5"><a href="#mc:0,bo:1,bo:6,bo:2,bo:0,bo:0"> 2.7.3.1.1.  create</a></br>
</div><div class="vym-toc-branch-5"><a href="#mc:0,bo:1,bo:6,bo:2,bo:0,bo:1"> 2.7.3.1.2.  exeuction</a></br>
</div><div class="vym-toc-branch-4"><a href="#mc:0,bo:1,bo:6,bo:2,bo:1"> 2.7.3.2.  1) Global Execution Context</a></br>
</div><div class="vym-toc-branch-5"><a href="#mc:0,bo:1,bo:6,bo:2,bo:1,bo:0"> 2.7.3.2.1.  creates:</a></br>
</div><div class="vym-toc-branch-6"><a href="#mc:0,bo:1,bo:6,bo:2,bo:1,bo:0,bo:0"> 2.7.3.2.1.1.  Global object, this, window</a></br>
</div><div class="vym-toc-branch-6"><a href="#mc:0,bo:1,bo:6,bo:2,bo:1,bo:0,bo:1"> 2.7.3.2.1.2.  hoisting functions and setting variables to undefined</a></br>
</div><div class="vym-toc-branch-5"><a href="#mc:0,bo:1,bo:6,bo:2,bo:1,bo:1"> 2.7.3.2.2.  Executes</a></br>
</div><div class="vym-toc-branch-4"><a href="#mc:0,bo:1,bo:6,bo:2,bo:2"> 2.7.3.3.  3) When a Execution Context / Function is finshed executing, it's pop off the
stack</a></br>
</div><div class="vym-toc-branch-3"><a href="#mc:0,bo:1,bo:6,bo:3"> 2.7.4.  Even if a function invokes itself, a execution context is created</a></br>
</div><div class="vym-toc-branch-4"><a href="#mc:0,bo:1,bo:6,bo:3,bo:0"> 2.7.4.1.  Creation of this / global object  is creating within that funciton</a></br>
</div><div class="vym-toc-branch-2"><a href="#mc:0,bo:1,bo:7"> 2.8.  Functions, Context, Variable Enviroments</a></br>
</div><div class="vym-toc-branch-3"><a href="#mc:0,bo:1,bo:7,bo:0"> 2.8.1.  Variable Enviorment</a></br>
</div><div class="vym-toc-branch-4"><a href="#mc:0,bo:1,bo:7,bo:0,bo:0"> 2.8.1.1.  Where the varibales lives in the memory</a></br>
</div><div class="vym-toc-branch-4"><a href="#mc:0,bo:1,bo:7,bo:0,bo:1"> 2.8.1.2.  Where is the variable?</a></br>
</div><div class="vym-toc-branch-4"><a href="#mc:0,bo:1,bo:7,bo:0,bo:2"> 2.8.1.3.  Each execution context has a variable enviroment (it's own memory space)</a></br>
</div><div class="vym-toc-branch-4"><a href="#mc:0,bo:1,bo:7,bo:0,bo:3"> 2.8.1.4.  Code Example</a></br>
</div><div class="vym-toc-branch-5"><a href="#mc:0,bo:1,bo:7,bo:0,bo:3,bo:0"> 2.8.1.4.1.  Each varibales are in there own scope</a></br>
</div><div class="vym-toc-branch-2"><a href="#mc:0,bo:1,bo:8"> 2.9.  The Scope Chain</a></br>
</div><div class="vym-toc-branch-3"><a href="#mc:0,bo:1,bo:8,bo:0"> 2.9.1.  Example Code 1</a></br>
</div><div class="vym-toc-branch-3"><a href="#mc:0,bo:1,bo:8,bo:1"> 2.9.2.  JavaScript does more than look in the variable enviroment of the current
execution context</a></br>
</div><div class="vym-toc-branch-4"><a href="#mc:0,bo:1,bo:8,bo:1,bo:0"> 2.9.2.1.  variable this</a></br>
</div><div class="vym-toc-branch-4"><a href="#mc:0,bo:1,bo:8,bo:1,bo:1"> 2.9.2.2.  Each execution has a reference  to the outer enviroment</a></br>
</div><div class="vym-toc-branch-4"><a href="#mc:0,bo:1,bo:8,bo:1,bo:2"> 2.9.2.3.  Outer enviroment ~ Lexical Enviroment</a></br>
</div><div class="vym-toc-branch-5"><a href="#mc:0,bo:1,bo:8,bo:1,bo:2,bo:0"> 2.9.2.3.1.  Lexical Enviroment</a></br>
</div><div class="vym-toc-branch-6"><a href="#mc:0,bo:1,bo:8,bo:1,bo:2,bo:0,bo:0"> 2.9.2.3.1.1.  The physical location of where code is written</a></br>
</div><div class="vym-toc-branch-3"><a href="#mc:0,bo:1,bo:8,bo:2"> 2.9.3.  Execution stack is create by invocation, not locatoin</a></br>
</div><div class="vym-toc-branch-3"><a href="#mc:0,bo:1,bo:8,bo:3"> 2.9.4.  Finding the variable reference, it goes down the Scope Chain to find</a></br>
</div><div class="vym-toc-branch-3"><a href="#mc:0,bo:1,bo:8,bo:4"> 2.9.5.  &quot;Who created me?&quot;</a></br>
</div><div class="vym-toc-branch-4"><a href="#mc:0,bo:1,bo:8,bo:4,bo:0"> 2.9.5.1.  Example Code 2</a></br>
</div><div class="vym-toc-branch-3"><a href="#mc:0,bo:1,bo:8,bo:5"> 2.9.6.  Where a function sits lexically determines it's out reference</a></br>
</div><div class="vym-toc-branch-2"><a href="#mc:0,bo:1,bo:9"> 2.10.  Scope, ES6, let</a></br>
</div><div class="vym-toc-branch-3"><a href="#mc:0,bo:1,bo:9,bo:0"> 2.10.1.  Scope: Where code is avaiable in code</a></br>
</div><div class="vym-toc-branch-4"><a href="#mc:0,bo:1,bo:9,bo:0,bo:0"> 2.10.1.1.  And if it's the same variable or a copy (another innovcation / object)</a></br>
</div><div class="vym-toc-branch-5"><a href="#mc:0,bo:1,bo:9,bo:0,bo:0,bo:0"> 2.10.1.1.1.  </a></br>
</div><div class="vym-toc-branch-3"><a href="#mc:0,bo:1,bo:9,bo:1"> 2.10.2.  ECMAScript 6 / 2015</a></br>
</div><div class="vym-toc-branch-4"><a href="#mc:0,bo:1,bo:9,bo:1,bo:0"> 2.10.2.1.  let: a new way to declare variables</a></br>
</div><div class="vym-toc-branch-5"><a href="#mc:0,bo:1,bo:9,bo:1,bo:0,bo:0"> 2.10.2.1.1.  Block scoping</a></br>
</div><div class="vym-toc-branch-5"><a href="#mc:0,bo:1,bo:9,bo:1,bo:0,bo:1"> 2.10.2.1.2.  Only available within the block it's declared in</a></br>
</div><div class="vym-toc-branch-5"><a href="#mc:0,bo:1,bo:9,bo:1,bo:0,bo:2"> 2.10.2.1.3.  Cannot use the let variable until the code is ran</a></br>
</div><div class="vym-toc-branch-2"><a href="#mc:0,bo:1,bo:10"> 2.11.  Asynchronous Callbacks</a></br>
</div><div class="vym-toc-branch-3"><a href="#mc:0,bo:1,bo:10,bo:0"> 2.11.1.  More than one at a time</a></br>
</div><div class="vym-toc-branch-3"><a href="#mc:0,bo:1,bo:10,bo:1"> 2.11.2.  Event Queue</a></br>
</div><div class="vym-toc-branch-4"><a href="#mc:0,bo:1,bo:10,bo:1,bo:0"> 2.11.2.1.  Queues is looked at when execution stack is empty</a></br>
</div><div class="vym-toc-branch-4"><a href="#mc:0,bo:1,bo:10,bo:1,bo:1"> 2.11.2.2.  JavaScript looks at th queue perodically</a></br>
</div><div class="vym-toc-branch-5"><a href="#mc:0,bo:1,bo:10,bo:1,bo:1,bo:0"> 2.11.2.2.1.  Event Loop</a></br>
</div><div class="vym-toc-branch-4"><a href="#mc:0,bo:1,bo:10,bo:1,bo:2"> 2.11.2.3.  click event</a></br>
</div><div class="vym-toc-branch-5"><a href="#mc:0,bo:1,bo:10,bo:1,bo:2,bo:0"> 2.11.2.3.1.  exeuction context for the function happens,</a></br>
</div><div class="vym-toc-branch-5"><a href="#mc:0,bo:1,bo:10,bo:1,bo:2,bo:1"> 2.11.2.3.2.  The code is still line by line</a></br>
</div><div class="vym-toc-branch-5"><a href="#mc:0,bo:1,bo:10,bo:1,bo:2,bo:2"> 2.11.2.3.3.  *The stack has to be empty*</a></br>
</div><div class="vym-toc-branch-3"><a href="#mc:0,bo:1,bo:10,bo:2"> 2.11.3.  Exeuction Stack</a></br>
</div><div class="vym-toc-branch-3"><a href="#mc:0,bo:1,bo:10,bo:3"> 2.11.4.  Code Example</a></br>
</div><div class="vym-toc-branch-4"><a href="#mc:0,bo:1,bo:10,bo:3,bo:0"> 2.11.4.1.  The click event is consoled lasted</a></br>
</div><div class="vym-toc-branch-4"><a href="#mc:0,bo:1,bo:10,bo:3,bo:1"> 2.11.4.2.  How does JavaScript, a synchronoistic langauge, deal with asynchronistic events?</a></br>
</div><div class="vym-toc-branch-5"><a href="#mc:0,bo:1,bo:10,bo:3,bo:1,bo:0"> 2.11.4.2.1.  It will run it's code and place it into the event queue</a></br>
</div><div class="vym-toc-branch-3"><a href="#mc:0,bo:1,bo:10,bo:4"> 2.11.5.  The asynchrnous part is outside of the JavaScript engine</a></br>
</div><div class="vym-toc-branch-4"><a href="#mc:0,bo:1,bo:10,bo:4,bo:0"> 2.11.5.1.  These async events will then be process in order that they happen</a></br>
</div><div class="vym-toc-branch-1"><a href="#mc:0,bo:2"> 3.  Types and Operators</a></br>
</div><div class="vym-toc-branch-2"><a href="#mc:0,bo:2,bo:0"> 3.1.  Coneptual Aside: Types</a></br>
</div><div class="vym-toc-branch-3"><a href="#mc:0,bo:2,bo:0,bo:0"> 3.1.1.  Dynamic Typing</a></br>
</div><div class="vym-toc-branch-4"><a href="#mc:0,bo:2,bo:0,bo:0,bo:0"> 3.1.1.1.  You don't tell JavaScript engine what type, it'll figure it out while the code
is running</a></br>
</div><div class="vym-toc-branch-3"><a href="#mc:0,bo:2,bo:0,bo:1"> 3.1.2.  Static Typing</a></br>
</div><div class="vym-toc-branch-4"><a href="#mc:0,bo:2,bo:0,bo:1,bo:0"> 3.1.2.1.  Java, C++, you need to have a certain type into it</a></br>
</div><div class="vym-toc-branch-4"><a href="#mc:0,bo:2,bo:0,bo:1,bo:1"> 3.1.2.2.  You get an error otherwise</a></br>
</div><div class="vym-toc-branch-2"><a href="#mc:0,bo:2,bo:1"> 3.2.  Primiative Type</a></br>
</div><div class="vym-toc-branch-3"><a href="#mc:0,bo:2,bo:1,bo:0"> 3.2.1.  A single value</a></br>
</div><div class="vym-toc-branch-3"><a href="#mc:0,bo:2,bo:1,bo:1"> 3.2.2.  Not an object</a></br>
</div><div class="vym-toc-branch-3"><a href="#mc:0,bo:2,bo:1,bo:2"> 3.2.3.  Six Types in JavaScript</a></br>
</div><div class="vym-toc-branch-4"><a href="#mc:0,bo:2,bo:1,bo:2,bo:0"> 3.2.3.1.  Undefined</a></br>
</div><div class="vym-toc-branch-5"><a href="#mc:0,bo:2,bo:1,bo:2,bo:0,bo:0"> 3.2.3.1.1.  Let JavaScript say when this doesn't exists</a></br>
</div><div class="vym-toc-branch-4"><a href="#mc:0,bo:2,bo:1,bo:2,bo:1"> 3.2.3.2.  Null</a></br>
</div><div class="vym-toc-branch-5"><a href="#mc:0,bo:2,bo:1,bo:2,bo:1,bo:0"> 3.2.3.2.1.  Use this if you want sometihng to mean &quot;not in existence&quot;</a></br>
</div><div class="vym-toc-branch-4"><a href="#mc:0,bo:2,bo:1,bo:2,bo:2"> 3.2.3.3.  Boolean</a></br>
</div><div class="vym-toc-branch-5"><a href="#mc:0,bo:2,bo:1,bo:2,bo:2,bo:0"> 3.2.3.3.1.  true</a></br>
</div><div class="vym-toc-branch-5"><a href="#mc:0,bo:2,bo:1,bo:2,bo:2,bo:1"> 3.2.3.3.2.  false</a></br>
</div><div class="vym-toc-branch-4"><a href="#mc:0,bo:2,bo:1,bo:2,bo:3"> 3.2.3.4.  Number</a></br>
</div><div class="vym-toc-branch-5"><a href="#mc:0,bo:2,bo:1,bo:2,bo:3,bo:0"> 3.2.3.4.1.  floating point number</a></br>
</div><div class="vym-toc-branch-5"><a href="#mc:0,bo:2,bo:1,bo:2,bo:3,bo:1"> 3.2.3.4.2.  Always some decimal at the end of it</a></br>
</div><div class="vym-toc-branch-4"><a href="#mc:0,bo:2,bo:1,bo:2,bo:4"> 3.2.3.5.  String</a></br>
</div><div class="vym-toc-branch-5"><a href="#mc:0,bo:2,bo:1,bo:2,bo:4,bo:0"> 3.2.3.5.1.  list of chatacters</a></br>
</div><div class="vym-toc-branch-4"><a href="#mc:0,bo:2,bo:1,bo:2,bo:5"> 3.2.3.6.  Symbol</a></br>
</div><div class="vym-toc-branch-5"><a href="#mc:0,bo:2,bo:1,bo:2,bo:5,bo:0"> 3.2.3.6.1.  es6</a></br>
</div><div class="vym-toc-branch-2"><a href="#mc:0,bo:2,bo:2"> 3.3.  Conceptual Asdie: Operators</a></br>
</div><div class="vym-toc-branch-3"><a href="#mc:0,bo:2,bo:2,bo:0"> 3.3.1.  A function that is syntaxtcally different</a></br>
</div><div class="vym-toc-branch-3"><a href="#mc:0,bo:2,bo:2,bo:1"> 3.3.2.  Usually takes 2 inputs and results in 1 output</a></br>
</div><div class="vym-toc-branch-3"><a href="#mc:0,bo:2,bo:2,bo:2"> 3.3.3.  notations</a></br>
</div><div class="vym-toc-branch-4"><a href="#mc:0,bo:2,bo:2,bo:2,bo:0"> 3.3.3.1.  +(3, 4) Prefix notation</a></br>
</div><div class="vym-toc-branch-4"><a href="#mc:0,bo:2,bo:2,bo:2,bo:1"> 3.3.3.2.  3+4 infix</a></br>
</div><div class="vym-toc-branch-4"><a href="#mc:0,bo:2,bo:2,bo:2,bo:2"> 3.3.3.3.  (3,4)+ post fix</a></br>
</div><div class="vym-toc-branch-3"><a href="#mc:0,bo:2,bo:2,bo:3"> 3.3.4.  The operators are functions in infix notation</a></br>
</div><div class="vym-toc-branch-3"><a href="#mc:0,bo:2,bo:2,bo:4"> 3.3.5.  Operators are functions that return values</a></br>
</div><div class="vym-toc-branch-2"><a href="#mc:0,bo:2,bo:3"> 3.4.  Operator Precedence and Associativity</a></br>
</div><div class="vym-toc-branch-3"><a href="#mc:0,bo:2,bo:3,bo:0"> 3.4.1.  Operator Precedence</a></br>
</div><div class="vym-toc-branch-4"><a href="#mc:0,bo:2,bo:3,bo:0,bo:0"> 3.4.1.1.  Which operators gets called first</a></br>
</div><div class="vym-toc-branch-4"><a href="#mc:0,bo:2,bo:3,bo:0,bo:1"> 3.4.1.2.  Higher precendene wins</a></br>
</div><div class="vym-toc-branch-4"><a href="#mc:0,bo:2,bo:3,bo:0,bo:2"> 3.4.1.3.  JS engine picks the highest precendence</a></br>
</div><div class="vym-toc-branch-3"><a href="#mc:0,bo:2,bo:3,bo:1"> 3.4.2.  Operator Associativity</a></br>
</div><div class="vym-toc-branch-4"><a href="#mc:0,bo:2,bo:3,bo:1,bo:0"> 3.4.2.1.  What order a function/operator gets called in (right to left, left to right)</a></br>
</div><div class="vym-toc-branch-4"><a href="#mc:0,bo:2,bo:3,bo:1,bo:1"> 3.4.2.2.  When they have the same precendence, associativity determines what gets ccalled
first</a></br>
</div><div class="vym-toc-branch-3"><a href="#mc:0,bo:2,bo:3,bo:2"> 3.4.3.  file:///home/juxley/Documents/Websites/Operator-Precedence-In-Javascript.pdf</a></br>
</div><div class="vym-toc-branch-3"><a href="#mc:0,bo:2,bo:3,bo:3"> 3.4.4.  Helps us to tell what the order that a operator (function) is called</a></br>
</div><div class="vym-toc-branch-3"><a href="#mc:0,bo:2,bo:3,bo:4"> 3.4.5.  Why is this important? JavaScript is dynamically typed</a></br>
</div><div class="vym-toc-branch-2"><a href="#mc:0,bo:2,bo:4"> 3.5.  Conceptual Aside: Coercion</a></br>
</div><div class="vym-toc-branch-3"><a href="#mc:0,bo:2,bo:4,bo:0"> 3.5.1.  Converting a value from one type to another</a></br>
</div><div class="vym-toc-branch-3"><a href="#mc:0,bo:2,bo:4,bo:1"> 3.5.2.  &quot;helllo &quot; + &quot;world&quot;</a></br>
</div><div class="vym-toc-branch-3"><a href="#mc:0,bo:2,bo:4,bo:2"> 3.5.3.  1 + 2</a></br>
</div><div class="vym-toc-branch-4"><a href="#mc:0,bo:2,bo:4,bo:2,bo:0"> 3.5.3.1.  3</a></br>
</div><div class="vym-toc-branch-3"><a href="#mc:0,bo:2,bo:4,bo:3"> 3.5.4.  1 + &quot;2&quot;</a></br>
</div><div class="vym-toc-branch-4"><a href="#mc:0,bo:2,bo:4,bo:3,bo:0"> 3.5.4.1.  12</a></br>
</div><div class="vym-toc-branch-4"><a href="#mc:0,bo:2,bo:4,bo:3,bo:1"> 3.5.4.2.  The value is coercied as a string</a></br>
</div><div class="vym-toc-branch-4"><a href="#mc:0,bo:2,bo:4,bo:3,bo:2"> 3.5.4.3.  In the memory, string and number 1 look very different</a></br>
</div><div class="vym-toc-branch-4"><a href="#mc:0,bo:2,bo:4,bo:3,bo:3"> 3.5.4.4.  JS engine makes a best guess</a></br>
</div><div class="vym-toc-branch-5"><a href="#mc:0,bo:2,bo:4,bo:3,bo:3,bo:0"> 3.5.4.4.1.  THIS choice!</a></br>
</div><div class="vym-toc-branch-3"><a href="#mc:0,bo:2,bo:4,bo:4"> 3.5.5.  This happens since JS is dynmaically typed</a></br>
</div><div class="vym-toc-branch-4"><a href="#mc:0,bo:2,bo:4,bo:4,bo:0"> 3.5.5.1.  Happen in the JS engine</a></br>
</div><div class="vym-toc-branch-3"><a href="#mc:0,bo:2,bo:4,bo:5"> 3.5.6.  operators are function, they run code as well</a></br>
</div><div class="vym-toc-branch-3"><a href="#mc:0,bo:2,bo:4,bo:6"> 3.5.7.  Coercion is a fundalmental part of the language, don't forget it!</a></br>
</div><div class="vym-toc-branch-2"><a href="#mc:0,bo:2,bo:5"> 3.6.  Comparison Operators</a></br>
</div><div class="vym-toc-branch-3"><a href="#mc:0,bo:2,bo:5,bo:0"> 3.6.1.  3 &lt; 2  &lt;  1</a></br>
</div><div class="vym-toc-branch-4"><a href="#mc:0,bo:2,bo:5,bo:0,bo:0"> 3.6.1.1.  true</a></br>
</div><div class="vym-toc-branch-3"><a href="#mc:0,bo:2,bo:5,bo:1"> 3.6.2.  1 &lt; 2 &lt; 3</a></br>
</div><div class="vym-toc-branch-4"><a href="#mc:0,bo:2,bo:5,bo:1,bo:0"> 3.6.2.1.  true</a></br>
</div><div class="vym-toc-branch-3"><a href="#mc:0,bo:2,bo:5,bo:2"> 3.6.3.  Boolen left &amp; right associativity</a></br>
</div><div class="vym-toc-branch-3"><a href="#mc:0,bo:2,bo:5,bo:3"> 3.6.4.  null</a></br>
</div><div class="vym-toc-branch-4"><a href="#mc:0,bo:2,bo:5,bo:3,bo:0"> 3.6.4.1.  Coerced to a number results into 0</a></br>
</div><div class="vym-toc-branch-3"><a href="#mc:0,bo:2,bo:5,bo:4"> 3.6.5.  NaN</a></br>
</div><div class="vym-toc-branch-4"><a href="#mc:0,bo:2,bo:5,bo:4,bo:0"> 3.6.5.1.  Coericing undeified</a></br>
</div><div class="vym-toc-branch-3"><a href="#mc:0,bo:2,bo:5,bo:5"> 3.6.6.  null == 0</a></br>
</div><div class="vym-toc-branch-3"><a href="#mc:0,bo:2,bo:5,bo:6"> 3.6.7.  Strict equals solves these weird coercives issues</a></br>
</div><div class="vym-toc-branch-4"><a href="#mc:0,bo:2,bo:5,bo:6,bo:0"> 3.6.7.1.  use strict equals when comparing quanities</a></br>
</div><div class="vym-toc-branch-4"><a href="#mc:0,bo:2,bo:5,bo:6,bo:1"> 3.6.7.2.  function ==(a, b)</a></br>
</div><div class="vym-toc-branch-4"><a href="#mc:0,bo:2,bo:5,bo:6,bo:2"> 3.6.7.3.  function ===(a, b)</a></br>
</div><div class="vym-toc-branch-4"><a href="#mc:0,bo:2,bo:5,bo:6,bo:3"> 3.6.7.4.  These are only function with different outcomes</a></br>
</div><div class="vym-toc-branch-3"><a href="#mc:0,bo:2,bo:5,bo:7"> 3.6.8.  Equality Sheet</a></br>
</div><div class="vym-toc-branch-2"><a href="#mc:0,bo:2,bo:6"> 3.7.  Existence &amp; Boolean</a></br>
</div><div class="vym-toc-branch-3"><a href="#mc:0,bo:2,bo:6,bo:0"> 3.7.1.  Things that imply a lack of existence = false</a></br>
</div><div class="vym-toc-branch-4"><a href="#mc:0,bo:2,bo:6,bo:0,bo:0"> 3.7.1.1.  We can use this to our advantage with if statements</a></br>
</div><div class="vym-toc-branch-4"><a href="#mc:0,bo:2,bo:6,bo:0,bo:1"> 3.7.1.2.  if (a || a === 0) // if a has something</a></br>
</div><div class="vym-toc-branch-3"><a href="#mc:0,bo:2,bo:6,bo:1"> 3.7.2.  Code Example</a></br>
</div><div class="vym-toc-branch-2"><a href="#mc:0,bo:2,bo:7"> 3.8.  Default Values</a></br>
</div><div class="vym-toc-branch-3"><a href="#mc:0,bo:2,bo:7,bo:0"> 3.8.1.  Code Example</a></br>
</div><div class="vym-toc-branch-4"><a href="#mc:0,bo:2,bo:7,bo:0,bo:0"> 3.8.1.1.  JavaScript creates the memory for the name variable, which would be undeined</a></br>
</div><div class="vym-toc-branch-4"><a href="#mc:0,bo:2,bo:7,bo:0,bo:1"> 3.8.1.2.  Then, undefined got coericed into a string</a></br>
</div><div class="vym-toc-branch-3"><a href="#mc:0,bo:2,bo:7,bo:1"> 3.8.2.  JavaScript doesn't care if you don't pass in a paramater for a function</a></br>
</div><div class="vym-toc-branch-3"><a href="#mc:0,bo:2,bo:7,bo:2"> 3.8.3.  What if we want a default value/</a></br>
</div><div class="vym-toc-branch-3"><a href="#mc:0,bo:2,bo:7,bo:3"> 3.8.4.  || doesn't always return true or false</a></br>
</div><div class="vym-toc-branch-4"><a href="#mc:0,bo:2,bo:7,bo:3,bo:0"> 3.8.4.1.  Gives the first one that coerces into true</a></br>
</div><div class="vym-toc-branch-2"><a href="#mc:0,bo:2,bo:8"> 3.9.  Framework Aside</a></br>
</div><div class="vym-toc-branch-3"><a href="#mc:0,bo:2,bo:8,bo:0"> 3.9.1.  Framework / LIbaryary = same thing. Reusable code</a></br>
</div><div class="vym-toc-branch-3"><a href="#mc:0,bo:2,bo:8,bo:1"> 3.9.2.  scritp tag</a></br>
</div><div class="vym-toc-branch-4"><a href="#mc:0,bo:2,bo:8,bo:1,bo:0"> 3.9.2.1.  They get stacked ontop of each other</a></br>
</div><div class="vym-toc-branch-4"><a href="#mc:0,bo:2,bo:8,bo:1,bo:1"> 3.9.2.2.  JS is usually minfied anyway</a></br>
</div><div class="vym-toc-branch-4"><a href="#mc:0,bo:2,bo:8,bo:1,bo:2"> 3.9.2.3.  The code is stacked onto itself, like it's on the file</a></br>
</div><div class="vym-toc-branch-3"><a href="#mc:0,bo:2,bo:8,bo:2"> 3.9.3.  window.varName = window.varName || &quot;Another string&quot;;</a></br>
</div><div class="vym-toc-branch-4"><a href="#mc:0,bo:2,bo:8,bo:2,bo:0"> 3.9.3.1.  Oh, you already used that variable name, I'll excuse myself</a></br>
</div><div class="vym-toc-branch-4"><a href="#mc:0,bo:2,bo:8,bo:2,bo:1"> 3.9.3.2.  The window object checks the Global Execution Context</a></br>
</div><div class="vym-toc-branch-1"><a href="#mc:0,bo:3"> 4.  Objects and Functions</a></br>
</div><div class="vym-toc-branch-2"><a href="#mc:0,bo:3,bo:0"> 4.1.  objects and the Dot</a></br>
</div><div class="vym-toc-branch-3"><a href="#mc:0,bo:3,bo:0,bo:0"> 4.1.1.  Names and values</a></br>
</div><div class="vym-toc-branch-3"><a href="#mc:0,bo:3,bo:0,bo:1"> 4.1.2.  Object 0-1</a></br>
</div><div class="vym-toc-branch-4"><a href="#mc:0,bo:3,bo:0,bo:1,bo:0"> 4.1.2.1.  Primitave &quot;property&quot; 0-11</a></br>
</div><div class="vym-toc-branch-5"><a href="#mc:0,bo:3,bo:0,bo:1,bo:0,bo:0"> 4.1.2.1.1.  booleans, strings, numbers, etc.</a></br>
</div><div class="vym-toc-branch-4"><a href="#mc:0,bo:3,bo:0,bo:1,bo:1"> 4.1.2.2.  Another (child) Object &quot;property&quot; 0-12</a></br>
</div><div class="vym-toc-branch-4"><a href="#mc:0,bo:3,bo:0,bo:1,bo:2"> 4.1.2.3.  function &quot;method&quot; 0-13</a></br>
</div><div class="vym-toc-branch-4"><a href="#mc:0,bo:3,bo:0,bo:1,bo:3"> 4.1.2.4.  Numbers are related like addresses</a></br>
</div><div class="vym-toc-branch-4"><a href="#mc:0,bo:3,bo:0,bo:1,bo:4"> 4.1.2.5.  it knows where the other object are</a></br>
</div><div class="vym-toc-branch-3"><a href="#mc:0,bo:3,bo:0,bo:2"> 4.1.3.  Operator</a></br>
</div><div class="vym-toc-branch-4"><a href="#mc:0,bo:3,bo:0,bo:2,bo:0"> 4.1.3.1.  computed memeber access</a></br>
</div><div class="vym-toc-branch-5"><a href="#mc:0,bo:3,bo:0,bo:2,bo:0,bo:0"> 4.1.3.1.1.  person[&quot;firstname&quot;] = &quot;Jason&quot;;</a></br>
</div><div class="vym-toc-branch-4"><a href="#mc:0,bo:3,bo:0,bo:2,bo:1"> 4.1.3.2.  Member access</a></br>
</div><div class="vym-toc-branch-5"><a href="#mc:0,bo:3,bo:0,bo:2,bo:1,bo:0"> 4.1.3.2.1.  The dot</a></br>
</div><div class="vym-toc-branch-5"><a href="#mc:0,bo:3,bo:0,bo:2,bo:1,bo:1"> 4.1.3.2.2.  person.firstname</a></br>
</div><div class="vym-toc-branch-4"><a href="#mc:0,bo:3,bo:0,bo:2,bo:2"> 4.1.3.3.  just functoin / operators to FIND these properties</a></br>
</div><div class="vym-toc-branch-2"><a href="#mc:0,bo:3,bo:1"> 4.2.  Object Literals</a></br>
</div><div class="vym-toc-branch-3"><a href="#mc:0,bo:3,bo:1,bo:0"> 4.2.1.  var person = { name: &quot;Jason&quot;, sign: &quot;Leo&quot; };</a></br>
</div><div class="vym-toc-branch-3"><a href="#mc:0,bo:3,bo:1,bo:1"> 4.2.2.  JavaScript is liberal with whitespaces</a></br>
</div><div class="vym-toc-branch-3"><a href="#mc:0,bo:3,bo:1,bo:2"> 4.2.3.  Example code</a></br>
</div><div class="vym-toc-branch-3"><a href="#mc:0,bo:3,bo:1,bo:3"> 4.2.4.  Where ever I want, I can make an object!</a></br>
</div><div class="vym-toc-branch-3"><a href="#mc:0,bo:3,bo:1,bo:4"> 4.2.5.  The code that you're written isn't what is happening under the hood</a></br>
</div><div class="vym-toc-branch-2"><a href="#mc:0,bo:3,bo:2"> 4.3.  Framework Aside: Faking Namespaces</a></br>
</div><div class="vym-toc-branch-3"><a href="#mc:0,bo:3,bo:2,bo:0"> 4.3.1.  Namespaces</a></br>
</div><div class="vym-toc-branch-4"><a href="#mc:0,bo:3,bo:2,bo:0,bo:0"> 4.3.1.1.  A container for variables and functions</a></br>
</div><div class="vym-toc-branch-3"><a href="#mc:0,bo:3,bo:2,bo:1"> 4.3.2.  JavaScript doesn't have namespaces, it doesn't need to; it can fake it.</a></br>
</div><div class="vym-toc-branch-3"><a href="#mc:0,bo:3,bo:2,bo:2"> 4.3.3.  Problem: a case where a global variable needs 2 values</a></br>
</div><div class="vym-toc-branch-3"><a href="#mc:0,bo:3,bo:2,bo:3"> 4.3.4.  Solution: use an object to make sure there is not namespace collations</a></br>
</div><div class="vym-toc-branch-4"><a href="#mc:0,bo:3,bo:2,bo:3,bo:0"> 4.3.4.1.  Example code</a></br>
</div><div class="vym-toc-branch-5"><a href="#mc:0,bo:3,bo:2,bo:3,bo:0,bo:0"> 4.3.4.1.1.  </a></br>
</div><div class="vym-toc-branch-3"><a href="#mc:0,bo:3,bo:2,bo:4"> 4.3.5.  Pitfall</a></br>
</div><div class="vym-toc-branch-4"><a href="#mc:0,bo:3,bo:2,bo:4,bo:0"> 4.3.5.1.  var english = {}; english.greetings.greet1 = &quot;Hello&quot;;</a></br>
</div><div class="vym-toc-branch-5"><a href="#mc:0,bo:3,bo:2,bo:4,bo:0,bo:0"> 4.3.5.1.1.  Output:Uncaught type error: greetings is undefined</a></br>
</div><div class="vym-toc-branch-5"><a href="#mc:0,bo:3,bo:2,bo:4,bo:0,bo:1"> 4.3.5.1.2.  english.greeting will be undefined</a></br>
</div><div class="vym-toc-branch-2"><a href="#mc:0,bo:3,bo:3"> 4.4.  JSON and Object Literal</a></br>
</div><div class="vym-toc-branch-3"><a href="#mc:0,bo:3,bo:3,bo:0"> 4.4.1.  Inspired by object literal</a></br>
</div><div class="vym-toc-branch-4"><a href="#mc:0,bo:3,bo:3,bo:0,bo:0"> 4.4.1.1.  Not the same as object literals</a></br>
</div><div class="vym-toc-branch-3"><a href="#mc:0,bo:3,bo:3,bo:1"> 4.4.2.  JavaScript Object Nottation</a></br>
</div><div class="vym-toc-branch-3"><a href="#mc:0,bo:3,bo:3,bo:2"> 4.4.3.  Many formats were send across the wire (the internet)</a></br>
</div><div class="vym-toc-branch-3"><a href="#mc:0,bo:3,bo:3,bo:3"> 4.4.4.  Example code</a></br>
</div><div class="vym-toc-branch-3"><a href="#mc:0,bo:3,bo:3,bo:4"> 4.4.5.  JSON is more strict</a></br>
</div><div class="vym-toc-branch-2"><a href="#mc:0,bo:3,bo:4"> 4.5.  Functions are objects</a></br>
</div><div class="vym-toc-branch-3"><a href="#mc:0,bo:3,bo:4,bo:0"> 4.5.1.  1st class functions</a></br>
</div><div class="vym-toc-branch-4"><a href="#mc:0,bo:3,bo:4,bo:0,bo:0"> 4.5.1.1.  Everything you can do other types, you can do with functions</a></br>
</div><div class="vym-toc-branch-4"><a href="#mc:0,bo:3,bo:4,bo:0,bo:1"> 4.5.1.2.  You can have functions as paramerts, set them equal to variables, write them on
the fly</a></br>
</div><div class="vym-toc-branch-3"><a href="#mc:0,bo:3,bo:4,bo:1"> 4.5.2.  A function is a special type of object</a></br>
</div><div class="vym-toc-branch-4"><a href="#mc:0,bo:3,bo:4,bo:1,bo:0"> 4.5.2.1.  You can attach properties and methods to a function</a></br>
</div><div class="vym-toc-branch-5"><a href="#mc:0,bo:3,bo:4,bo:1,bo:0,bo:0"> 4.5.2.1.1.  Primative</a></br>
</div><div class="vym-toc-branch-5"><a href="#mc:0,bo:3,bo:4,bo:1,bo:0,bo:1"> 4.5.2.1.2.  Object</a></br>
</div><div class="vym-toc-branch-5"><a href="#mc:0,bo:3,bo:4,bo:1,bo:0,bo:2"> 4.5.2.1.3.  Functions</a></br>
</div><div class="vym-toc-branch-5"><a href="#mc:0,bo:3,bo:4,bo:1,bo:0,bo:3"> 4.5.2.1.4.  Example Code</a></br>
</div><div class="vym-toc-branch-4"><a href="#mc:0,bo:3,bo:4,bo:1,bo:1"> 4.5.2.2.  Special parts</a></br>
</div><div class="vym-toc-branch-5"><a href="#mc:0,bo:3,bo:4,bo:1,bo:1,bo:0"> 4.5.2.2.1.  Names</a></br>
</div><div class="vym-toc-branch-6"><a href="#mc:0,bo:3,bo:4,bo:1,bo:1,bo:0,bo:0"> 4.5.2.2.1.1.  Doesn't have to have one</a></br>
</div><div class="vym-toc-branch-5"><a href="#mc:0,bo:3,bo:4,bo:1,bo:1,bo:1"> 4.5.2.2.2.  Code property</a></br>
</div><div class="vym-toc-branch-6"><a href="#mc:0,bo:3,bo:4,bo:1,bo:1,bo:1,bo:0"> 4.5.2.2.2.1.  Invocable</a></br>
</div><div class="vym-toc-branch-7"><a href="#mc:0,bo:3,bo:4,bo:1,bo:1,bo:1,bo:0,bo:0"> 4.5.2.2.2.1.1.  Run this code please! (execution context, exeuction, etc.)</a></br>
</div><div class="vym-toc-branch-2"><a href="#mc:0,bo:3,bo:5"> 4.6.  Function Statements and Function Expressions</a></br>
</div><div class="vym-toc-branch-3"><a href="#mc:0,bo:3,bo:5,bo:0"> 4.6.1.  Expression: a unit of code that results in a value</a></br>
</div><div class="vym-toc-branch-4"><a href="#mc:0,bo:3,bo:5,bo:0,bo:0"> 4.6.1.1.  Doesn't have to save inside a variable</a></br>
</div><div class="vym-toc-branch-4"><a href="#mc:0,bo:3,bo:5,bo:0,bo:1"> 4.6.1.2.  Examples</a></br>
</div><div class="vym-toc-branch-4"><a href="#mc:0,bo:3,bo:5,bo:0,bo:2"> 4.6.1.3.  function expression</a></br>
</div><div class="vym-toc-branch-5"><a href="#mc:0,bo:3,bo:5,bo:0,bo:2,bo:0"> 4.6.1.3.1.  It doesn't have a name, it's an anonymous function stored in memory with the
name of anaoymous greet</a></br>
</div><div class="vym-toc-branch-4"><a href="#mc:0,bo:3,bo:5,bo:0,bo:3"> 4.6.1.4.  Returns an object, while a function statement will say &quot;yeah there's a function
there&quot; and won't execute it in any way</a></br>
</div><div class="vym-toc-branch-4"><a href="#mc:0,bo:3,bo:5,bo:0,bo:4"> 4.6.1.5.  Variable set to undefined first</a></br>
</div><div class="vym-toc-branch-3"><a href="#mc:0,bo:3,bo:5,bo:1"> 4.6.2.  STatement: does work</a></br>
</div><div class="vym-toc-branch-4"><a href="#mc:0,bo:3,bo:5,bo:1,bo:0"> 4.6.2.1.  If statement</a></br>
</div><div class="vym-toc-branch-4"><a href="#mc:0,bo:3,bo:5,bo:1,bo:1"> 4.6.2.2.  function statement</a></br>
</div><div class="vym-toc-branch-5"><a href="#mc:0,bo:3,bo:5,bo:1,bo:1,bo:0"> 4.6.2.2.1.  It doesn't result in a value</a></br>
</div><div class="vym-toc-branch-5"><a href="#mc:0,bo:3,bo:5,bo:1,bo:1,bo:1"> 4.6.2.2.2.  Available in memory</a></br>
</div><div class="vym-toc-branch-5"><a href="#mc:0,bo:3,bo:5,bo:1,bo:1,bo:2"> 4.6.2.2.3.  Hoisted</a></br>
</div><div class="vym-toc-branch-3"><a href="#mc:0,bo:3,bo:5,bo:2"> 4.6.3.  Good good is being understandable and consie</a></br>
</div><div class="vym-toc-branch-3"><a href="#mc:0,bo:3,bo:5,bo:3"> 4.6.4.  function log(a) {</a></br>
</div><div class="vym-toc-branch-3"><a href="#mc:0,bo:3,bo:5,bo:4"> 4.6.5.  Passing function around, give function to function as parameters, use them like
variables = functional programming</a></br>
</div><div class="vym-toc-branch-3"><a href="#mc:0,bo:3,bo:5,bo:5"> 4.6.6.  first class function'; functions in JS are objects</a></br>
</div><div class="vym-toc-branch-2"><a href="#mc:0,bo:3,bo:6"> 4.7.  By Reference / By Value</a></br>
</div><div class="vym-toc-branch-3"><a href="#mc:0,bo:3,bo:6,bo:0"> 4.7.1.  By Value</a></br>
</div><div class="vym-toc-branch-4"><a href="#mc:0,bo:3,bo:6,bo:0,bo:0"> 4.7.1.1.  b = a</a></br>
</div><div class="vym-toc-branch-4"><a href="#mc:0,bo:3,bo:6,bo:0,bo:1"> 4.7.1.2.  Model</a></br>
</div><div class="vym-toc-branch-4"><a href="#mc:0,bo:3,bo:6,bo:0,bo:2"> 4.7.1.3.  Primitve types! (all, except objects)</a></br>
</div><div class="vym-toc-branch-4"><a href="#mc:0,bo:3,bo:6,bo:0,bo:3"> 4.7.1.4.  After copying, the variables can stay on their own.</a></br>
</div><div class="vym-toc-branch-3"><a href="#mc:0,bo:3,bo:6,bo:1"> 4.7.2.  By Reference</a></br>
</div><div class="vym-toc-branch-4"><a href="#mc:0,bo:3,bo:6,bo:1,bo:0"> 4.7.2.1.  Objects (all objects, which includes functions)</a></br>
</div><div class="vym-toc-branch-4"><a href="#mc:0,bo:3,bo:6,bo:1,bo:1"> 4.7.2.2.  Two names point to the same place in memory</a></br>
</div><div class="vym-toc-branch-4"><a href="#mc:0,bo:3,bo:6,bo:1,bo:2"> 4.7.2.3.  Model</a></br>
</div><div class="vym-toc-branch-3"><a href="#mc:0,bo:3,bo:6,bo:2"> 4.7.3.  Code</a></br>
</div><div class="vym-toc-branch-3"><a href="#mc:0,bo:3,bo:6,bo:3"> 4.7.4.  mutated</a></br>
</div><div class="vym-toc-branch-4"><a href="#mc:0,bo:3,bo:6,bo:3,bo:0"> 4.7.4.1.  To chang a avlue</a></br>
</div><div class="vym-toc-branch-3"><a href="#mc:0,bo:3,bo:6,bo:4"> 4.7.5.  immuatable</a></br>
</div><div class="vym-toc-branch-4"><a href="#mc:0,bo:3,bo:6,bo:4,bo:0"> 4.7.5.1.  Cannot be change</a></br>
</div><div class="vym-toc-branch-2"><a href="#mc:0,bo:3,bo:7"> 4.8.  Objects, Functions, and &quot;this&quot;</a></br>
</div><div class="vym-toc-branch-3"><a href="#mc:0,bo:3,bo:7,bo:0"> 4.8.1.  Each time an execution context is made, JavaScript makes the 'this' object</a></br>
</div><div class="vym-toc-branch-3"><a href="#mc:0,bo:3,bo:7,bo:1"> 4.8.2.  3 Execution Conext</a></br>
</div><div class="vym-toc-branch-4"><a href="#mc:0,bo:3,bo:7,bo:1,bo:0"> 4.8.2.1.  All 3 'this' point to the global object, the Window object</a></br>
</div><div class="vym-toc-branch-4"><a href="#mc:0,bo:3,bo:7,bo:1,bo:1"> 4.8.2.2.  Code Example</a></br>
</div><div class="vym-toc-branch-4"><a href="#mc:0,bo:3,bo:7,bo:1,bo:2"> 4.8.2.3.  'this' will point to the ojbect is attached to. It will point to the object it
contains to.</a></br>
</div><div class="vym-toc-branch-4"><a href="#mc:0,bo:3,bo:7,bo:1,bo:3"> 4.8.2.4.  You can access the properties within the object using 'this'</a></br>
</div><div class="vym-toc-branch-4"><a href="#mc:0,bo:3,bo:7,bo:1,bo:4"> 4.8.2.5.  when just invocating a funciton, 'this' points to the global object</a></br>
</div><div class="vym-toc-branch-4"><a href="#mc:0,bo:3,bo:7,bo:1,bo:5"> 4.8.2.6.  when in a object, 'this points to the object itself</a></br>
</div><div class="vym-toc-branch-2"><a href="#mc:0,bo:3,bo:8"> 4.9.  Conceptual Aside: Collection of Anything</a></br>
</div><div class="vym-toc-branch-2"><a href="#mc:0,bo:3,bo:9"> 4.10.  arguments and &quot;spread&quot;</a></br>
</div><div class="vym-toc-branch-3"><a href="#mc:0,bo:3,bo:9,bo:0"> 4.10.1.  </a></br>
</div><div class="vym-toc-branch-3"><a href="#mc:0,bo:3,bo:9,bo:1"> 4.10.2.  arguments hold all the values of all of the parameters passed into a function</a></br>
</div><div class="vym-toc-branch-3"><a href="#mc:0,bo:3,bo:9,bo:2"> 4.10.3.  Arguments =&gt; The parameters yyou pass into a function</a></br>
</div><div class="vym-toc-branch-3"><a href="#mc:0,bo:3,bo:9,bo:3"> 4.10.4.  JavaScript gives you a key word that stores tthem in</a></br>
</div><div class="vym-toc-branch-3"><a href="#mc:0,bo:3,bo:9,bo:4"> 4.10.5.  Example</a></br>
</div><div class="vym-toc-branch-3"><a href="#mc:0,bo:3,bo:9,bo:5"> 4.10.6.  Hving default parameters</a></br>
</div><div class="vym-toc-branch-3"><a href="#mc:0,bo:3,bo:9,bo:6"> 4.10.7.  arguments keyword IS NOT really an array.</a></br>
</div><div class="vym-toc-branch-4"><a href="#mc:0,bo:3,bo:9,bo:6,bo:0"> 4.10.7.1.  Know as array-like</a></br>
</div><div class="vym-toc-branch-3"><a href="#mc:0,bo:3,bo:9,bo:7"> 4.10.8.  Arguments are depreeated</a></br>
</div><div class="vym-toc-branch-3"><a href="#mc:0,bo:3,bo:9,bo:8"> 4.10.9.  Spread!</a></br>
</div><div class="vym-toc-branch-4"><a href="#mc:0,bo:3,bo:9,bo:8,bo:0"> 4.10.9.1.  ...other</a></br>
</div><div class="vym-toc-branch-4"><a href="#mc:0,bo:3,bo:9,bo:8,bo:1"> 4.10.9.2.  Take the paramets and put them in an array called other</a></br>
</div><div class="vym-toc-branch-2"><a href="#mc:0,bo:3,bo:10"> 4.11.  Framework Aside : function overloading</a></br>
</div><div class="vym-toc-branch-3"><a href="#mc:0,bo:3,bo:10,bo:0"> 4.11.1.  JavaScript doesn't have this, and we don't care</a></br>
</div><div class="vym-toc-branch-3"><a href="#mc:0,bo:3,bo:10,bo:1"> 4.11.2.  We have 1st class functions</a></br>
</div><div class="vym-toc-branch-3"><a href="#mc:0,bo:3,bo:10,bo:2"> 4.11.3.  Example</a></br>
</div><div class="vym-toc-branch-2"><a href="#mc:0,bo:3,bo:11"> 4.12.  Concept Aside: Syntax Parser</a></br>
</div><div class="vym-toc-branch-3"><a href="#mc:0,bo:3,bo:11,bo:0"> 4.12.1.  The computer transflate it into what the computer can understand</a></br>
</div><div class="vym-toc-branch-3"><a href="#mc:0,bo:3,bo:11,bo:1"> 4.12.2.  A browser is on for JavaScript</a></br>
</div><div class="vym-toc-branch-3"><a href="#mc:0,bo:3,bo:11,bo:2"> 4.12.3.  if it see proper syntax, it'll know what you tend to do</a></br>
</div><div class="vym-toc-branch-3"><a href="#mc:0,bo:3,bo:11,bo:3"> 4.12.4.  character by  character making assumptions, rules, and might even make changes
to your code; trying to determine what you intend to do</a></br>
</div><div class="vym-toc-branch-2"><a href="#mc:0,bo:3,bo:12"> 4.13.  Dangerous Aside!!!!!!! Automatic Semicolin Insertation</a></br>
</div><div class="vym-toc-branch-3"><a href="#mc:0,bo:3,bo:12,bo:0"> 4.13.1.  The JavaScript syntax parser will put a ; where it expects it to be.</a></br>
</div><div class="vym-toc-branch-3"><a href="#mc:0,bo:3,bo:12,bo:1"> 4.13.2.  Put the semicolons, as you don't want JavaScript to guess for you.</a></br>
</div><div class="vym-toc-branch-3"><a href="#mc:0,bo:3,bo:12,bo:2"> 4.13.3.  Returns (enter) may cause some problems in your code</a></br>
</div><div class="vym-toc-branch-3"><a href="#mc:0,bo:3,bo:12,bo:3"> 4.13.4.  Example (Incorrect)</a></br>
</div><div class="vym-toc-branch-3"><a href="#mc:0,bo:3,bo:12,bo:4"> 4.13.5.  Example (Correct)</a></br>
</div><div class="vym-toc-branch-3"><a href="#mc:0,bo:3,bo:12,bo:5"> 4.13.6.  Put { on the same line as the statement (object, function, if, etc.)</a></br>
</div><div class="vym-toc-branch-2"><a href="#mc:0,bo:3,bo:13"> 4.14.  Conceptual Aside :WhitespacesJ</a></br>
</div><div class="vym-toc-branch-3"><a href="#mc:0,bo:3,bo:13,bo:0"> 4.14.1.  JavaScript is very liberal</a></br>
</div><div class="vym-toc-branch-3"><a href="#mc:0,bo:3,bo:13,bo:1"> 4.14.2.  Make comments! You add one using white spaces</a></br>
</div><div class="vym-toc-branch-4"><a href="#mc:0,bo:3,bo:13,bo:1,bo:0"> 4.14.2.1.  </a></br>
</div><div class="vym-toc-branch-3"><a href="#mc:0,bo:3,bo:13,bo:2"> 4.14.3.  Example</a></br>
</div><div class="vym-toc-branch-3"><a href="#mc:0,bo:3,bo:13,bo:3"> 4.14.4.  Programming will be happy to put a lot of coments to take adventage of this</a></br>
</div><div class="vym-toc-branch-3"><a href="#mc:0,bo:3,bo:13,bo:4"> 4.14.5.  When coming back to your own code you'll be happy</a></br>
</div><div class="vym-toc-branch-2"><a href="#mc:0,bo:3,bo:14"> 4.15.  Immeditaly Invoked Function Expressions</a></br>
</div><div class="vym-toc-branch-3"><a href="#mc:0,bo:3,bo:14,bo:0"> 4.15.1.  Function statment</a></br>
</div><div class="vym-toc-branch-3"><a href="#mc:0,bo:3,bo:14,bo:1"> 4.15.2.  Function Expression</a></br>
</div><div class="vym-toc-branch-3"><a href="#mc:0,bo:3,bo:14,bo:2"> 4.15.3.  Functoins</a></br>
</div><div class="vym-toc-branch-4"><a href="#mc:0,bo:3,bo:14,bo:2,bo:0"> 4.15.3.1.  Code property (innovcation)</a></br>
</div><div class="vym-toc-branch-4"><a href="#mc:0,bo:3,bo:14,bo:2,bo:1"> 4.15.3.2.  Name</a></br>
</div><div class="vym-toc-branch-3"><a href="#mc:0,bo:3,bo:14,bo:3"> 4.15.4.  Invoking something on the fly</a></br>
</div><div class="vym-toc-branch-3"><a href="#mc:0,bo:3,bo:14,bo:4"> 4.15.5.  IIFE</a></br>
</div><div class="vym-toc-branch-4"><a href="#mc:0,bo:3,bo:14,bo:4,bo:0"> 4.15.5.1.  Invocate a function immeditably after creating it</a></br>
</div><div class="vym-toc-branch-4"><a href="#mc:0,bo:3,bo:14,bo:4,bo:1"> 4.15.5.2.  The variable holds the returned value, not the function</a></br>
</div><div class="vym-toc-branch-3"><a href="#mc:0,bo:3,bo:14,bo:5"> 4.15.6.  We can put strings, numbers, and objects anywhere, that's not doing anything; we
can do so.</a></br>
</div><div class="vym-toc-branch-4"><a href="#mc:0,bo:3,bo:14,bo:5,bo:0"> 4.15.6.1.  We can't do it with functions; it wants to be a function STATEMENT</a></br>
</div><div class="vym-toc-branch-4"><a href="#mc:0,bo:3,bo:14,bo:5,bo:1"> 4.15.6.2.  UNLESS we have a function expression, by WRAPPING YOUR FUNCTION IN PARENTHESES</a></br>
</div><div class="vym-toc-branch-3"><a href="#mc:0,bo:3,bo:14,bo:6"> 4.15.7.  Expression: Something that returns a value</a></br>
</div><div class="vym-toc-branch-3"><a href="#mc:0,bo:3,bo:14,bo:7"> 4.15.8.  What's special about this?</a></br>
</div><div class="vym-toc-branch-4"><a href="#mc:0,bo:3,bo:14,bo:7,bo:0"> 4.15.8.1.  we can have a function expression (wrapped in parens to trick the syntax
paratex, then we can write a function and run it at the same time</a></br>
</div><div class="vym-toc-branch-4"><a href="#mc:0,bo:3,bo:14,bo:7,bo:1"> 4.15.8.2.  Another Example</a></br>
</div><div class="vym-toc-branch-3"><a href="#mc:0,bo:3,bo:14,bo:8"> 4.15.9.  Framework aside IIFE and Safe Code</a></br>
</div><div class="vym-toc-branch-4"><a href="#mc:0,bo:3,bo:14,bo:8,bo:0"> 4.15.9.1.  Ran Code</a></br>
</div><div class="vym-toc-branch-4"><a href="#mc:0,bo:3,bo:14,bo:8,bo:1"> 4.15.9.2.  Execution Stack</a></br>
</div><div class="vym-toc-branch-5"><a href="#mc:0,bo:3,bo:14,bo:8,bo:1,bo:0"> 4.15.9.2.1.  Hits the function expression, create an object with code (anynomous function)</a></br>
</div><div class="vym-toc-branch-5"><a href="#mc:0,bo:3,bo:14,bo:8,bo:1,bo:1"> 4.15.9.2.2.  Hits the parentheses that invokes the funciton</a></br>
</div><div class="vym-toc-branch-5"><a href="#mc:0,bo:3,bo:14,bo:8,bo:1,bo:2"> 4.15.9.2.3.  Execution Conext of the anynomous function</a></br>
</div><div class="vym-toc-branch-6"><a href="#mc:0,bo:3,bo:14,bo:8,bo:1,bo:2,bo:0"> 4.15.9.2.3.1.  The parameter goes into the Execution Conext of the anyonmous function, it is
not touching the global enviroment.</a></br>
</div><div class="vym-toc-branch-6"><a href="#mc:0,bo:3,bo:14,bo:8,bo:1,bo:2,bo:1"> 4.15.9.2.3.2.  This allows us to have 2 variable names in JavaScript; esecially when usng
frameworks.</a></br>
</div><div class="vym-toc-branch-4"><a href="#mc:0,bo:3,bo:14,bo:8,bo:2"> 4.15.9.3.  Image</a></br>
</div><div class="vym-toc-branch-4"><a href="#mc:0,bo:3,bo:14,bo:8,bo:3"> 4.15.9.4.  The entire framework wll be in an IIFE to prevent code from crashing into other
code</a></br>
</div><div class="vym-toc-branch-5"><a href="#mc:0,bo:3,bo:14,bo:8,bo:3,bo:0"> 4.15.9.4.1.  This will also create reuseable code</a></br>
</div><div class="vym-toc-branch-4"><a href="#mc:0,bo:3,bo:14,bo:8,bo:4"> 4.15.9.5.  What if we want someting inthe global object?</a></br>
</div><div class="vym-toc-branch-5"><a href="#mc:0,bo:3,bo:14,bo:8,bo:4,bo:0"> 4.15.9.5.1.  Pass the global object (window) into the IIFE</a></br>
</div><div class="vym-toc-branch-6"><a href="#mc:0,bo:3,bo:14,bo:8,bo:4,bo:0,bo:0"> 4.15.9.5.1.1.  Example</a></br>
</div><div class="vym-toc-branch-2"><a href="#mc:0,bo:3,bo:15"> 4.16.  Understanding Closures</a></br>
</div><div class="vym-toc-branch-3"><a href="#mc:0,bo:3,bo:15,bo:0"> 4.16.1.  Example</a></br>
</div><div class="vym-toc-branch-3"><a href="#mc:0,bo:3,bo:15,bo:1"> 4.16.2.  How does the sayhey varable still know the whattosay value?</a></br>
</div><div class="vym-toc-branch-3"><a href="#mc:0,bo:3,bo:15,bo:2"> 4.16.3.  This is possible due to closures</a></br>
</div><div class="vym-toc-branch-3"><a href="#mc:0,bo:3,bo:15,bo:3"> 4.16.4.  The greet function needs to &quot;end&quot; after the execution is complete. How does it
work?</a></br>
</div><div class="vym-toc-branch-4"><a href="#mc:0,bo:3,bo:15,bo:3,bo:0"> 4.16.4.1.  It's pop off the stack when greet finshes reading &quot;return&quot;</a></br>
</div><div class="vym-toc-branch-3"><a href="#mc:0,bo:3,bo:15,bo:4"> 4.16.5.  The Execution Conext has a space in memory where the variables live.</a></br>
</div><div class="vym-toc-branch-4"><a href="#mc:0,bo:3,bo:15,bo:4,bo:0"> 4.16.5.1.  Using it cleans out, due to garabage collection</a></br>
</div><div class="vym-toc-branch-4"><a href="#mc:0,bo:3,bo:15,bo:4,bo:1"> 4.16.5.2.  However, when the execution conext is complete, the vairables in memory are
still there</a></br>
</div><div class="vym-toc-branch-3"><a href="#mc:0,bo:3,bo:15,bo:5"> 4.16.6.  When sayHey hits whatstosay, it'll go up the Scope Chain</a></br>
</div><div class="vym-toc-branch-4"><a href="#mc:0,bo:3,bo:15,bo:5,bo:0"> 4.16.6.1.  What's in memoery for the &quot;lost&quot; execution conext, the variable can still go
down the scope chain.</a></br>
</div><div class="vym-toc-branch-4"><a href="#mc:0,bo:3,bo:15,bo:5,bo:1"> 4.16.6.2.  It's &quot;closed it&quot; the outer variables.</a></br>
</div><div class="vym-toc-branch-4"><a href="#mc:0,bo:3,bo:15,bo:5,bo:2"> 4.16.6.3.  Closing in the variables that are needed.</a></br>
</div><div class="vym-toc-branch-4"><a href="#mc:0,bo:3,bo:15,bo:5,bo:3"> 4.16.6.4.  </a></br>
</div><div class="vym-toc-branch-5"><a href="#mc:0,bo:3,bo:15,bo:5,bo:3,bo:0"> 4.16.6.4.1.  </a></br>
</div><div class="vym-toc-branch-3"><a href="#mc:0,bo:3,bo:15,bo:6"> 4.16.7.  Clousres are a feature of JavaScript; it'll do it for you.</a></br>
</div><div class="vym-toc-branch-4"><a href="#mc:0,bo:3,bo:15,bo:6,bo:0"> 4.16.7.1.  &quot;You&quot; don't create a clousre</a></br>
</div><div class="vym-toc-branch-3"><a href="#mc:0,bo:3,bo:15,bo:7"> 4.16.8.  You don't need to worry that the outer execution conext is running; it'll have
the variables within scope</a></br>
</div><div class="vym-toc-branch-3"><a href="#mc:0,bo:3,bo:15,bo:8"> 4.16.9.  Classic Example</a></br>
</div><div class="vym-toc-branch-4"><a href="#mc:0,bo:3,bo:15,bo:8,bo:0"> 4.16.9.1.  pic</a></br>
</div><div class="vym-toc-branch-4"><a href="#mc:0,bo:3,bo:15,bo:8,bo:1"> 4.16.9.2.  What is the value of the PARENT, what is the value of the memory RIGHT NOW, when
the code is being executed.</a></br>
</div><div class="vym-toc-branch-4"><a href="#mc:0,bo:3,bo:15,bo:8,bo:2"> 4.16.9.3.  Buildfunctions2</a></br>
</div><div class="vym-toc-branch-4"><a href="#mc:0,bo:3,bo:15,bo:8,bo:3"> 4.16.9.4.  IIFE Version</a></br>
</div></td></tr>
</table>


<h1><span class='vym-branch-0' style='color:#000000' id='mc:0'>JavaScript the Weird Parts</span></h1>
  
  <h2><span class='vym-branch-1' style='color:#000000' id='mc:0,bo:0'>Introduction</span></h2>
    <ul class="vym-list-ul-2">
      <li><span class='vym-branch-2' style='color:#000000' id='mc:0,bo:0,bo:0'>Understand, don't imediate</span>
      <ul class="vym-list-ul-3">
        <li><span class='vym-branch-3' style='color:#000000' id='mc:0,bo:0,bo:0,bo:0'>Type it out</span>  </li>
      </ul>  </li>
      <li><span class='vym-branch-2' style='color:#000000' id='mc:0,bo:0,bo:1'>Frameworks</span>
      <ul class="vym-list-ul-3">
        <li><span class='vym-branch-3' style='color:#000000' id='mc:0,bo:0,bo:1,bo:0'>People who make the frameworks understand the weird parts</span>  </li>
        <li><span class='vym-branch-3' style='color:#000000' id='mc:0,bo:0,bo:1,bo:1'>Angular</span>  </li>
        <li><span class='vym-branch-3' style='color:#000000' id='mc:0,bo:0,bo:1,bo:2'>jQuery</span>  </li>
      </ul>  </li>
      <li><span class='vym-branch-2' style='color:#000000' id='mc:0,bo:0,bo:2'>Weird Parts</span>
      <ul class="vym-list-ul-3">
        <li><span class='vym-branch-3' style='color:#000000' id='mc:0,bo:0,bo:2,bo:0'>Understanding the how JavaScript works will give you the bases of how to create
the frameworks</span>  </li>
      </ul>  </li>
    </ul>
  <h2><span class='vym-branch-1' style='color:#000000' id='mc:0,bo:1'>Execution Context and Lexical Enviroment</span></h2>
    <ul class="vym-list-ul-2">
      <li><span class='vym-branch-2' style='color:#000000' id='mc:0,bo:1,bo:0'>Definitions</span>
      <ul class="vym-list-ul-3">
        <li><span class='vym-branch-3' style='color:#000000' id='mc:0,bo:1,bo:0,bo:0'>Name - Value Pair</span>
        <ul class="vym-list-ul-4">
          <li><span class='vym-branch-4' style='color:#000000' id='mc:0,bo:1,bo:0,bo:0,bo:0'>address = &quot;100 Miller Ct&quot;</span>  </li>
          <li><span class='vym-branch-4' style='color:#000000' id='mc:0,bo:1,bo:0,bo:0,bo:1'>Object in JavaScript</span>
          <ul class="vym-list-ul-5">
            <li><span class='vym-branch-5' style='color:#000000' id='mc:0,bo:1,bo:0,bo:0,bo:1,bo:0'>Collection of name / value pairs</span>  </li>
            <li><span class='vym-branch-5' style='color:#000000' id='mc:0,bo:1,bo:0,bo:0,bo:1,bo:1'>Name Values within name values within name values</span>  </li>
          </ul>  </li>
          <li><span class='vym-branch-4' style='color:#000000' id='mc:0,bo:1,bo:0,bo:0,bo:2'>A name that maps to a unique value</span>  </li>
          <li><span class='vym-branch-4' style='color:#000000' id='mc:0,bo:1,bo:0,bo:0,bo:3'>Only one value per context</span>  </li>
        </ul>  </li>
        <li><span class='vym-branch-3' style='color:#000000' id='mc:0,bo:1,bo:0,bo:1'>Execution Context</span>
        <ul class="vym-list-ul-4">
          <li><span class='vym-branch-4' style='color:#000000' id='mc:0,bo:1,bo:0,bo:1,bo:0'>A wrapper that helps manage code that's running</span>  </li>
          <li><span class='vym-branch-4' style='color:#000000' id='mc:0,bo:1,bo:0,bo:1,bo:1'>which lexical enviroment depends on execution context</span>  </li>
          <li><span class='vym-branch-4' style='color:#000000' id='mc:0,bo:1,bo:0,bo:1,bo:2'>contains things beyond your code</span>  </li>
        </ul>  </li>
        <li><span class='vym-branch-3' style='color:#000000' id='mc:0,bo:1,bo:0,bo:2'>Lexical Enviroment</span>
        <ul class="vym-list-ul-4">
          <li><span class='vym-branch-4' style='color:#000000' id='mc:0,bo:1,bo:0,bo:2,bo:0'>Lexical means having to do with language or grammar</span>  </li>
          <li><span class='vym-branch-4' style='color:#000000' id='mc:0,bo:1,bo:0,bo:2,bo:1'>Where written code physically positioned</span>  </li>
          <li><span class='vym-branch-4' style='color:#000000' id='mc:0,bo:1,bo:0,bo:2,bo:2'>Syntax parser cares on where things are placed</span>  </li>
        </ul>  </li>
        <li><span class='vym-branch-3' style='color:#000000' id='mc:0,bo:1,bo:0,bo:3'>Syntax Parser</span>
        <ul class="vym-list-ul-4">
          <li><span class='vym-branch-4' style='color:#000000' id='mc:0,bo:1,bo:0,bo:3,bo:0'>A program that reads code and determines what to do with and if the grammar is
valid</span>  </li>
          <li><span class='vym-branch-4' style='color:#000000' id='mc:0,bo:1,bo:0,bo:3,bo:1'>Translates it for a computer</span>  </li>
        </ul>  </li>
      </ul>  </li>
      <li><span class='vym-branch-2' style='color:#000000' id='mc:0,bo:1,bo:1'>Global Enviroment and Global Object</span>
      <ul class="vym-list-ul-3">
        <li><span class='vym-branch-3' style='color:#000000' id='mc:0,bo:1,bo:1,bo:0'>Global Execution Context engine create 2 things</span>
        <ul class="vym-list-ul-4">
          <li><span class='vym-branch-4' style='color:#000000' id='mc:0,bo:1,bo:1,bo:0,bo:0'>this</span>  </li>
          <li><span class='vym-branch-4' style='color:#000000' id='mc:0,bo:1,bo:1,bo:0,bo:1'>Global object</span>  </li>
        </ul>  </li>
        <li><span class='vym-branch-3' style='color:#000000' id='mc:0,bo:1,bo:1,bo:1'>Nothing in JavaScript</span>
        <ul class="vym-list-ul-4">
          <li><span class='vym-branch-4' style='color:#000000' id='mc:0,bo:1,bo:1,bo:1,bo:0'>this</span>  </li>
          <li><span class='vym-branch-4' style='color:#000000' id='mc:0,bo:1,bo:1,bo:1,bo:1'>window</span>  </li>
          <li><span class='vym-branch-4' style='color:#000000' id='mc:0,bo:1,bo:1,bo:1,bo:2'>Both of these are the global object (while on a Browser)</span>
          <ul class="vym-list-ul-5">
            <li><span class='vym-branch-5' style='color:#000000' id='mc:0,bo:1,bo:1,bo:1,bo:2,bo:0'>At the global level, this = window</span>  </li>
          </ul>  </li>
          <li><span class='vym-branch-4' style='color:#000000' id='mc:0,bo:1,bo:1,bo:1,bo:3'>JS still  creates variables</span>  </li>
          <li><span class='vym-branch-4' style='color:#000000' id='mc:0,bo:1,bo:1,bo:1,bo:4'>YOU DIDN'T WRITE THIS STUFF</span>  </li>
        </ul>  </li>
        <li><span class='vym-branch-3' style='color:#000000' id='mc:0,bo:1,bo:1,bo:2'>Global: Not inside a function</span>
        <ul class="vym-list-ul-4">
          <li><span class='vym-branch-4' style='color:#000000' id='mc:0,bo:1,bo:1,bo:2,bo:0'>When not in a function, the variables sit in the lexical enviroment.</span>  </li>
          <li><span class='vym-branch-4' style='color:#000000' id='mc:0,bo:1,bo:1,bo:2,bo:1'>a = window.a</span>  </li>
        </ul>  </li>
        <li><span class='vym-branch-3' style='color:#000000' id='mc:0,bo:1,bo:1,bo:3'>Review</span>
        <ul class="vym-list-ul-4">
          <li><span class='vym-branch-4' style='color:#000000' id='mc:0,bo:1,bo:1,bo:3,bo:0'>Execution Contxt</span>
          <ul class="vym-list-ul-5">
            <li><span class='vym-branch-5' style='color:#000000' id='mc:0,bo:1,bo:1,bo:3,bo:0,bo:0'>Global Object</span>  </li>
            <li><span class='vym-branch-5' style='color:#000000' id='mc:0,bo:1,bo:1,bo:3,bo:0,bo:1'>this</span>  </li>
            <li><span class='vym-branch-5' style='color:#000000' id='mc:0,bo:1,bo:1,bo:3,bo:0,bo:2'>window</span>  </li>
            <li><span class='vym-branch-5' style='color:#000000' id='mc:0,bo:1,bo:1,bo:3,bo:0,bo:3'>Your code</span>  </li>
          </ul>  </li>
        </ul>  </li>
      </ul>  </li>
      <li><span class='vym-branch-2' style='color:#000000' id='mc:0,bo:1,bo:2'>Execution Contenxt: Creation and Hoisting</span>
      <ul class="vym-list-ul-3">
        <li><span class='vym-branch-3' style='color:#000000' id='mc:0,bo:1,bo:2,bo:0'>Hoisting</span>  </li>
        <li><span class='vym-branch-3' style='color:#000000' id='mc:0,bo:1,bo:2,bo:1'>WHAT EXECUTES ISN'T WHAT YOU'VE WRITTEN</span>
        <ul class="vym-list-ul-4">
          <li><span class='vym-branch-4' style='color:#000000' id='mc:0,bo:1,bo:2,bo:1,bo:0'>JavaScript Engine makes descisions</span>  </li>
        </ul>  </li>
        <li><span class='vym-branch-3' style='color:#000000' id='mc:0,bo:1,bo:2,bo:2'>(1) Creation Phase</span>
        <ul class="vym-list-ul-4">
          <li><span class='vym-branch-4' style='color:#000000' id='mc:0,bo:1,bo:2,bo:2,bo:0'>Global Object</span>  </li>
          <li><span class='vym-branch-4' style='color:#000000' id='mc:0,bo:1,bo:2,bo:2,bo:1'>this</span>  </li>
          <li><span class='vym-branch-4' style='color:#000000' id='mc:0,bo:1,bo:2,bo:2,bo:2'>out enviroment</span>  </li>
          <li><span class='vym-branch-4' style='color:#000000' id='mc:0,bo:1,bo:2,bo:2,bo:3'>Syntax parser recognizes where you've created variables and functions</span>
          <ul class="vym-list-ul-5">
            <li><span class='vym-branch-5' style='color:#000000' id='mc:0,bo:1,bo:2,bo:2,bo:3,bo:0'>Set ups memory space for functions and vvariables: &quot;Hoisting&quot;</span>  </li>
          </ul>  </li>
        </ul>  </li>
        <li><span class='vym-branch-3' style='color:#000000' id='mc:0,bo:1,bo:2,bo:3'>Example Code</span>
<table class="vym-note"><tr><td class="vym-note-flag">
<td>
b();<br/>console.log(a);<br/><br/>var a = "a";<br/><br/>function b() {<br/>  console.log("Called b");<br/>}<br/><br/>Here the function b call is logged, yet a gets logs "undefinied".
</td></tr></table>

        <ul class="vym-list-ul-4">
          <li><span class='vym-branch-4' style='color:#000000' id='mc:0,bo:1,bo:2,bo:3,bo:0'>Function in hosted in entirered</span>  </li>
          <li><span class='vym-branch-4' style='color:#000000' id='mc:0,bo:1,bo:2,bo:3,bo:1'>variables doesn't until execution phase</span>  </li>
          <li><span class='vym-branch-4' style='color:#000000' id='mc:0,bo:1,bo:2,bo:3,bo:2'>undefined is a placeholder</span>  </li>
          <li><span class='vym-branch-4' style='color:#000000' id='mc:0,bo:1,bo:2,bo:3,bo:3'>Never rely on hoisting</span>  </li>
        </ul>  </li>
        <li><span class='vym-branch-3' style='color:#000000' id='mc:0,bo:1,bo:2,bo:4'>Declare functions at the top of your code</span>  </li>
      </ul>  </li>
      <li><span class='vym-branch-2' style='color:#000000' id='mc:0,bo:1,bo:3'>Exeution Content: Execution</span>
      <ul class="vym-list-ul-3">
        <li><span class='vym-branch-3' style='color:#000000' id='mc:0,bo:1,bo:3,bo:0'>Runs your code line by line</span>  </li>
        <li><span class='vym-branch-3' style='color:#000000' id='mc:0,bo:1,bo:3,bo:1'>After hoisting, things are execution</span>  </li>
      </ul>  </li>
      <li><span class='vym-branch-2' style='color:#000000' id='mc:0,bo:1,bo:4'>Conceptual Aside: JavaScript and Undeifined</span>
      <ul class="vym-list-ul-3">
        <li><span class='vym-branch-3' style='color:#000000' id='mc:0,bo:1,bo:4,bo:0'>not defined IS NOT undefined</span>  </li>
        <li><span class='vym-branch-3' style='color:#000000' id='mc:0,bo:1,bo:4,bo:1'>Example Code</span>
<table class="vym-note"><tr><td class="vym-note-flag">
<td>
<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.0//EN" "http://www.w3.org/TR/REC-html40/strict.dtd">

<p class="vym-note-paragraph"><span style=" color:#29003e;">var a; // var a = &quot;hello&quot;; or nothing -&gt; What's the out put?</span></p>
<p class="vym-note-paragraph"><span style=" color:#29003e;">console.log(a);</span></p>
<p class="vym-note-paragraph"><br /></p>
<p class="vym-note-paragraph"><span style=" color:#29003e;">if (a === undefined) {</span></p>
<p class="vym-note-paragraph"><span style=" color:#29003e;">   console.log(&quot;a is undefined&quot;);</span></p>
<p class="vym-note-paragraph"><span style=" color:#29003e;">}</span></p>
<p class="vym-note-paragraph"><span style=" color:#29003e;">else {</span></p>
<p class="vym-note-paragraph"><span style=" color:#29003e;">  console.log(&quot;a is defined&quot;);</span></p>
<p class="vym-note-paragraph"><span style=" color:#29003e;">}</span></p>
<p class="vym-note-paragraph"><br /></p>
<p class="vym-note-paragraph"><span style=" color:#29003e;">// Output</span></p>
<p class="vym-note-paragraph"><span style=" color:#29003e;">// undefined</span></p>
<p class="vym-note-paragraph"><span style=" color:#29003e;">// a is undefined</span></p>
<p class="vym-note-paragraph"><br /></p>
</td></tr></table>

        <ul class="vym-list-ul-4">
          <li><span class='vym-branch-4' style='color:#000000' id='mc:0,bo:1,bo:4,bo:1,bo:0'>When a variable isn't declared than the browser will say &quot;it's not in memory my
dude&quot;</span>  </li>
          <li><span class='vym-branch-4' style='color:#000000' id='mc:0,bo:1,bo:4,bo:1,bo:1'>undefined takes up memory space</span>  </li>
        </ul>  </li>
        <li><span class='vym-branch-3' style='color:#000000' id='mc:0,bo:1,bo:4,bo:2'>undefineid means it's  a value that JavaScript is creating</span>  </li>
        <li><span class='vym-branch-3' style='color:#000000' id='mc:0,bo:1,bo:4,bo:3'>NEVER: a = undefined;</span>
        <ul class="vym-list-ul-4">
          <li><span class='vym-branch-4' style='color:#000000' id='mc:0,bo:1,bo:4,bo:3,bo:0'>Valid, yet dangerous</span>  </li>
          <li><span class='vym-branch-4' style='color:#000000' id='mc:0,bo:1,bo:4,bo:3,bo:1'>Let JavaScript always set undefined</span>  </li>
        </ul>  </li>
      </ul>  </li>
      <li><span class='vym-branch-2' style='color:#000000' id='mc:0,bo:1,bo:5'>Conceptual Aside: Single Threaded, Synchronous Execution</span>
      <ul class="vym-list-ul-3">
        <li><span class='vym-branch-3' style='color:#000000' id='mc:0,bo:1,bo:5,bo:0'>Single Threaded: Only one command at a time</span>
        <ul class="vym-list-ul-4">
          <li><span class='vym-branch-4' style='color:#000000' id='mc:0,bo:1,bo:5,bo:0,bo:0'>The browerser also runs</span>  </li>
          <li><span class='vym-branch-4' style='color:#000000' id='mc:0,bo:1,bo:5,bo:0,bo:1'>JavaScript behaves as a single threaded message</span>  </li>
        </ul>  </li>
        <li><span class='vym-branch-3' style='color:#000000' id='mc:0,bo:1,bo:5,bo:1'>Synchronous (in programming)</span>
        <ul class="vym-list-ul-4">
          <li><span class='vym-branch-4' style='color:#000000' id='mc:0,bo:1,bo:5,bo:1,bo:0'>One at a time</span>  </li>
          <li><span class='vym-branch-4' style='color:#000000' id='mc:0,bo:1,bo:5,bo:1,bo:1'>One line of code at a time in order that it appears</span>  </li>
        </ul>  </li>
      </ul>  </li>
      <li><span class='vym-branch-2' style='color:#000000' id='mc:0,bo:1,bo:6'>Function Invocation and Execution Stack</span>
      <ul class="vym-list-ul-3">
        <li><span class='vym-branch-3' style='color:#000000' id='mc:0,bo:1,bo:6,bo:0'>Innvocatoin: Calling a function or ()</span>  </li>
        <li><span class='vym-branch-3' style='color:#000000' id='mc:0,bo:1,bo:6,bo:1'>Example Code</span>
<table class="vym-note"><tr><td class="vym-note-flag">
<td>
function a() {<br/>  b();<br/>  var c;<br/>}<br/><br/>function b() {<br/>  var d;<br/>}<br/><br/>a();<br/>var d; // this isn't complete until a() is done with execution = synchrous
</td></tr></table>
  </li>
        <li><span class='vym-branch-3' style='color:#000000' id='mc:0,bo:1,bo:6,bo:2'><a href="file:///home/juxley/Pictures/executionstack.png"><img src="flags/flag-url-16x16.png">Execution Stack</a></span>
        <ul class="vym-list-ul-4">
          <li><span class='vym-branch-4' style='color:#000000' id='mc:0,bo:1,bo:6,bo:2,bo:0'>2) function a Execution Context</span>
          <ul class="vym-list-ul-5">
            <li><span class='vym-branch-5' style='color:#000000' id='mc:0,bo:1,bo:6,bo:2,bo:0,bo:0'>create</span>  </li>
            <li><span class='vym-branch-5' style='color:#000000' id='mc:0,bo:1,bo:6,bo:2,bo:0,bo:1'>exeuction</span>  </li>
          </ul>  </li>
          <li><span class='vym-branch-4' style='color:#000000' id='mc:0,bo:1,bo:6,bo:2,bo:1'>1) Global Execution Context</span>
          <ul class="vym-list-ul-5">
            <li><span class='vym-branch-5' style='color:#000000' id='mc:0,bo:1,bo:6,bo:2,bo:1,bo:0'>creates:</span>
            <ul class="vym-list-ul-6">
              <li><span class='vym-branch-6' style='color:#000000' id='mc:0,bo:1,bo:6,bo:2,bo:1,bo:0,bo:0'>Global object, this, window</span>  </li>
              <li><span class='vym-branch-6' style='color:#000000' id='mc:0,bo:1,bo:6,bo:2,bo:1,bo:0,bo:1'>hoisting functions and setting variables to undefined</span>  </li>
            </ul>  </li>
            <li><span class='vym-branch-5' style='color:#000000' id='mc:0,bo:1,bo:6,bo:2,bo:1,bo:1'>Executes</span>  </li>
          </ul>  </li>
          <li><span class='vym-branch-4' style='color:#000000' id='mc:0,bo:1,bo:6,bo:2,bo:2'>3) When a Execution Context / Function is finshed executing, it's pop off the
stack</span>  </li>
        </ul>  </li>
        <li><span class='vym-branch-3' style='color:#000000' id='mc:0,bo:1,bo:6,bo:3'>Even if a function invokes itself, a execution context is created</span>
        <ul class="vym-list-ul-4">
          <li><span class='vym-branch-4' style='color:#000000' id='mc:0,bo:1,bo:6,bo:3,bo:0'>Creation of this / global object  is creating within that funciton</span>  </li>
        </ul>  </li>
      </ul>  </li>
      <li><span class='vym-branch-2' style='color:#000000' id='mc:0,bo:1,bo:7'>Functions, Context, Variable Enviroments</span>
      <ul class="vym-list-ul-3">
        <li><span class='vym-branch-3' style='color:#000000' id='mc:0,bo:1,bo:7,bo:0'>Variable Enviorment</span>
        <ul class="vym-list-ul-4">
          <li><span class='vym-branch-4' style='color:#000000' id='mc:0,bo:1,bo:7,bo:0,bo:0'>Where the varibales lives in the memory</span>  </li>
          <li><span class='vym-branch-4' style='color:#000000' id='mc:0,bo:1,bo:7,bo:0,bo:1'>Where is the variable?</span>  </li>
          <li><span class='vym-branch-4' style='color:#000000' id='mc:0,bo:1,bo:7,bo:0,bo:2'>Each execution context has a variable enviroment (it's own memory space)</span>  </li>
          <li><span class='vym-branch-4' style='color:#000000' id='mc:0,bo:1,bo:7,bo:0,bo:3'>Code Example</span>
<table class="vym-note"><tr><td class="vym-note-flag">
<td>
function b() {<br/>        var myVar;<br/>    console.log(myVar); //<br/>}<br/><br/>function a() {<br/>        var myVar = 2;<br/>    console.log(myVar);<br/>        b();<br/>}<br/><br/>var myVar = 1;<br/>console.log(myVar); //<br/>a();<br/>console.log(myVar);<br/><br/>Output//<br/>1<br/>2<br/>undefined<br/>1
</td></tr></table>

          <ul class="vym-list-ul-5">
            <li><span class='vym-branch-5' style='color:#000000' id='mc:0,bo:1,bo:7,bo:0,bo:3,bo:0'>Each varibales are in there own scope</span>  </li>
          </ul>  </li>
        </ul>  </li>
      </ul>  </li>
      <li><span class='vym-branch-2' style='color:#000000' id='mc:0,bo:1,bo:8'>The Scope Chain</span>
      <ul class="vym-list-ul-3">
        <li><span class='vym-branch-3' style='color:#000000' id='mc:0,bo:1,bo:8,bo:0'>Example Code 1</span>
<table class="vym-note"><tr><td class="vym-note-flag">
<td>
function b() {<br/>console.log(myVar);<br/>}<br/><br/>function a() {<br/>var myVar = 2;<br/>b();<br/>}<br/><br/>var myVar = 1;<br/>a();<br/><br/>//output<br/>//1
</td></tr></table>
  </li>
        <li><span class='vym-branch-3' style='color:#000000' id='mc:0,bo:1,bo:8,bo:1'><a href="file:///home/juxley/Pictures/scopechain1.png"><img src="flags/flag-url-16x16.png">JavaScript does more than look in the variable enviroment of the current
execution context</a></span>
        <ul class="vym-list-ul-4">
          <li><span class='vym-branch-4' style='color:#000000' id='mc:0,bo:1,bo:8,bo:1,bo:0'>variable this</span>  </li>
          <li><span class='vym-branch-4' style='color:#000000' id='mc:0,bo:1,bo:8,bo:1,bo:1'>Each execution has a reference  to the outer enviroment</span>  </li>
          <li><span class='vym-branch-4' style='color:#000000' id='mc:0,bo:1,bo:8,bo:1,bo:2'>Outer enviroment ~ Lexical Enviroment</span>
          <ul class="vym-list-ul-5">
            <li><span class='vym-branch-5' style='color:#000000' id='mc:0,bo:1,bo:8,bo:1,bo:2,bo:0'>Lexical Enviroment</span>
            <ul class="vym-list-ul-6">
              <li><span class='vym-branch-6' style='color:#000000' id='mc:0,bo:1,bo:8,bo:1,bo:2,bo:0,bo:0'>The physical location of where code is written</span>  </li>
            </ul>  </li>
          </ul>  </li>
        </ul>  </li>
        <li><span class='vym-branch-3' style='color:#000000' id='mc:0,bo:1,bo:8,bo:2'>Execution stack is create by invocation, not locatoin</span>  </li>
        <li><span class='vym-branch-3' style='color:#000000' id='mc:0,bo:1,bo:8,bo:3'>Finding the variable reference, it goes down the Scope Chain to find</span>  </li>
        <li><span class='vym-branch-3' style='color:#000000' id='mc:0,bo:1,bo:8,bo:4'>&quot;Who created me?&quot;</span>
        <ul class="vym-list-ul-4">
          <li><span class='vym-branch-4' style='color:#000000' id='mc:0,bo:1,bo:8,bo:4,bo:0'>Example Code 2</span>
<table class="vym-note"><tr><td class="vym-note-flag">
<td>
function a() {<br/><br/>	function b() {<br/>		console.log(myVar);<br/>	}<br/><br/>var myVar = 2;<br/>b();<br/>}<br/><br/>var myVar = 1;<br/>a();<br/>//cannot call b() as it's in the global execution context<br/><br/>//output<br/>//1
</td></tr></table>
  </li>
        </ul>  </li>
        <li><span class='vym-branch-3' style='color:#000000' id='mc:0,bo:1,bo:8,bo:5'>Where a function sits lexically determines it's out reference</span>  </li>
      </ul>  </li>
      <li><span class='vym-branch-2' style='color:#000000' id='mc:0,bo:1,bo:9'>Scope, ES6, let</span>
      <ul class="vym-list-ul-3">
        <li><span class='vym-branch-3' style='color:#000000' id='mc:0,bo:1,bo:9,bo:0'>Scope: Where code is avaiable in code</span>
        <ul class="vym-list-ul-4">
          <li><span class='vym-branch-4' style='color:#000000' id='mc:0,bo:1,bo:9,bo:0,bo:0'>And if it's the same variable or a copy (another innovcation / object)</span>
          <ul class="vym-list-ul-5">
            <li><span class='vym-branch-5' style='color:#000000' id='mc:0,bo:1,bo:9,bo:0,bo:0,bo:0'></span>  </li>
          </ul>  </li>
        </ul>  </li>
        <li><span class='vym-branch-3' style='color:#000000' id='mc:0,bo:1,bo:9,bo:1'>ECMAScript 6 / 2015</span>
        <ul class="vym-list-ul-4">
          <li><span class='vym-branch-4' style='color:#000000' id='mc:0,bo:1,bo:9,bo:1,bo:0'>let: a new way to declare variables</span>
          <ul class="vym-list-ul-5">
            <li><span class='vym-branch-5' style='color:#000000' id='mc:0,bo:1,bo:9,bo:1,bo:0,bo:0'>Block scoping</span>  </li>
            <li><span class='vym-branch-5' style='color:#000000' id='mc:0,bo:1,bo:9,bo:1,bo:0,bo:1'>Only available within the block it's declared in</span>  </li>
            <li><span class='vym-branch-5' style='color:#000000' id='mc:0,bo:1,bo:9,bo:1,bo:0,bo:2'>Cannot use the let variable until the code is ran</span>  </li>
          </ul>  </li>
        </ul>  </li>
      </ul>  </li>
      <li><span class='vym-branch-2' style='color:#000000' id='mc:0,bo:1,bo:10'>Asynchronous Callbacks</span>
      <ul class="vym-list-ul-3">
        <li><span class='vym-branch-3' style='color:#000000' id='mc:0,bo:1,bo:10,bo:0'>More than one at a time</span>  </li>
        <li><span class='vym-branch-3' style='color:#000000' id='mc:0,bo:1,bo:10,bo:1'>Event Queue</span>
        <ul class="vym-list-ul-4">
          <li><span class='vym-branch-4' style='color:#000000' id='mc:0,bo:1,bo:10,bo:1,bo:0'>Queues is looked at when execution stack is empty</span>  </li>
          <li><span class='vym-branch-4' style='color:#000000' id='mc:0,bo:1,bo:10,bo:1,bo:1'>JavaScript looks at th queue perodically</span>
          <ul class="vym-list-ul-5">
            <li><span class='vym-branch-5' style='color:#000000' id='mc:0,bo:1,bo:10,bo:1,bo:1,bo:0'>Event Loop</span>  </li>
          </ul>  </li>
          <li><span class='vym-branch-4' style='color:#000000' id='mc:0,bo:1,bo:10,bo:1,bo:2'>click event</span>
          <ul class="vym-list-ul-5">
            <li><span class='vym-branch-5' style='color:#000000' id='mc:0,bo:1,bo:10,bo:1,bo:2,bo:0'>exeuction context for the function happens,</span>  </li>
            <li><span class='vym-branch-5' style='color:#000000' id='mc:0,bo:1,bo:10,bo:1,bo:2,bo:1'>The code is still line by line</span>  </li>
            <li><span class='vym-branch-5' style='color:#000000' id='mc:0,bo:1,bo:10,bo:1,bo:2,bo:2'>*The stack has to be empty*</span>  </li>
          </ul>  </li>
        </ul>  </li>
        <li><span class='vym-branch-3' style='color:#000000' id='mc:0,bo:1,bo:10,bo:2'>Exeuction Stack</span>  </li>
        <li><span class='vym-branch-3' style='color:#000000' id='mc:0,bo:1,bo:10,bo:3'>Code Example</span>
<table class="vym-note"><tr><td class="vym-note-flag">
<td>
function waitThreeSeconds() {<br/> var ms = 3000 + new Date().getTime();<br/> while(new Date() &lt; ms){}<br/> console.log('finshed function'); <br/>}<br/><br/>function clickHandler() {<br/> console.log('click event');<br/>}<br/><br/>document.addEventListener('',  clickHandler();<br/><br/>waitThreeSeconds();<br/>console.log('finshes execution');<br/><br/>//log<br/>finshed function<br/>finshes exeuction<br/>click event
</td></tr></table>

        <ul class="vym-list-ul-4">
          <li><span class='vym-branch-4' style='color:#000000' id='mc:0,bo:1,bo:10,bo:3,bo:0'>The click event is consoled lasted</span>  </li>
          <li><span class='vym-branch-4' style='color:#000000' id='mc:0,bo:1,bo:10,bo:3,bo:1'>How does JavaScript, a synchronoistic langauge, deal with asynchronistic events?</span>
          <ul class="vym-list-ul-5">
            <li><span class='vym-branch-5' style='color:#000000' id='mc:0,bo:1,bo:10,bo:3,bo:1,bo:0'>It will run it's code and place it into the event queue</span>  </li>
          </ul>  </li>
        </ul>  </li>
        <li><span class='vym-branch-3' style='color:#000000' id='mc:0,bo:1,bo:10,bo:4'>The asynchrnous part is outside of the JavaScript engine</span>
        <ul class="vym-list-ul-4">
          <li><span class='vym-branch-4' style='color:#000000' id='mc:0,bo:1,bo:10,bo:4,bo:0'>These async events will then be process in order that they happen</span>  </li>
        </ul>  </li>
      </ul>  </li>
    </ul>
  <h2><span class='vym-branch-1' style='color:#000000' id='mc:0,bo:2'>Types and Operators</span></h2>
    <ul class="vym-list-ul-2">
      <li><span class='vym-branch-2' style='color:#000000' id='mc:0,bo:2,bo:0'>Coneptual Aside: Types</span>
      <ul class="vym-list-ul-3">
        <li><span class='vym-branch-3' style='color:#000000' id='mc:0,bo:2,bo:0,bo:0'>Dynamic Typing</span>
        <ul class="vym-list-ul-4">
          <li><span class='vym-branch-4' style='color:#000000' id='mc:0,bo:2,bo:0,bo:0,bo:0'>You don't tell JavaScript engine what type, it'll figure it out while the code
is running</span>  </li>
        </ul>  </li>
        <li><span class='vym-branch-3' style='color:#000000' id='mc:0,bo:2,bo:0,bo:1'>Static Typing</span>
        <ul class="vym-list-ul-4">
          <li><span class='vym-branch-4' style='color:#000000' id='mc:0,bo:2,bo:0,bo:1,bo:0'>Java, C++, you need to have a certain type into it</span>  </li>
          <li><span class='vym-branch-4' style='color:#000000' id='mc:0,bo:2,bo:0,bo:1,bo:1'>You get an error otherwise</span>  </li>
        </ul>  </li>
      </ul>  </li>
      <li><span class='vym-branch-2' style='color:#000000' id='mc:0,bo:2,bo:1'>Primiative Type</span>
      <ul class="vym-list-ul-3">
        <li><span class='vym-branch-3' style='color:#000000' id='mc:0,bo:2,bo:1,bo:0'>A single value</span>  </li>
        <li><span class='vym-branch-3' style='color:#000000' id='mc:0,bo:2,bo:1,bo:1'>Not an object</span>  </li>
        <li><span class='vym-branch-3' style='color:#000000' id='mc:0,bo:2,bo:1,bo:2'>Six Types in JavaScript</span>
        <ul class="vym-list-ul-4">
          <li><span class='vym-branch-4' style='color:#000000' id='mc:0,bo:2,bo:1,bo:2,bo:0'>Undefined</span>
          <ul class="vym-list-ul-5">
            <li><span class='vym-branch-5' style='color:#000000' id='mc:0,bo:2,bo:1,bo:2,bo:0,bo:0'>Let JavaScript say when this doesn't exists</span>  </li>
          </ul>  </li>
          <li><span class='vym-branch-4' style='color:#000000' id='mc:0,bo:2,bo:1,bo:2,bo:1'>Null</span>
          <ul class="vym-list-ul-5">
            <li><span class='vym-branch-5' style='color:#000000' id='mc:0,bo:2,bo:1,bo:2,bo:1,bo:0'>Use this if you want sometihng to mean &quot;not in existence&quot;</span>  </li>
          </ul>  </li>
          <li><span class='vym-branch-4' style='color:#000000' id='mc:0,bo:2,bo:1,bo:2,bo:2'>Boolean</span>
          <ul class="vym-list-ul-5">
            <li><span class='vym-branch-5' style='color:#000000' id='mc:0,bo:2,bo:1,bo:2,bo:2,bo:0'>true</span>  </li>
            <li><span class='vym-branch-5' style='color:#000000' id='mc:0,bo:2,bo:1,bo:2,bo:2,bo:1'>false</span>  </li>
          </ul>  </li>
          <li><span class='vym-branch-4' style='color:#000000' id='mc:0,bo:2,bo:1,bo:2,bo:3'>Number</span>
          <ul class="vym-list-ul-5">
            <li><span class='vym-branch-5' style='color:#000000' id='mc:0,bo:2,bo:1,bo:2,bo:3,bo:0'>floating point number</span>  </li>
            <li><span class='vym-branch-5' style='color:#000000' id='mc:0,bo:2,bo:1,bo:2,bo:3,bo:1'>Always some decimal at the end of it</span>  </li>
          </ul>  </li>
          <li><span class='vym-branch-4' style='color:#000000' id='mc:0,bo:2,bo:1,bo:2,bo:4'>String</span>
          <ul class="vym-list-ul-5">
            <li><span class='vym-branch-5' style='color:#000000' id='mc:0,bo:2,bo:1,bo:2,bo:4,bo:0'>list of chatacters</span>  </li>
          </ul>  </li>
          <li><span class='vym-branch-4' style='color:#000000' id='mc:0,bo:2,bo:1,bo:2,bo:5'>Symbol</span>
          <ul class="vym-list-ul-5">
            <li><span class='vym-branch-5' style='color:#000000' id='mc:0,bo:2,bo:1,bo:2,bo:5,bo:0'>es6</span>  </li>
          </ul>  </li>
        </ul>  </li>
      </ul>  </li>
      <li><span class='vym-branch-2' style='color:#000000' id='mc:0,bo:2,bo:2'>Conceptual Asdie: Operators</span>
      <ul class="vym-list-ul-3">
        <li><span class='vym-branch-3' style='color:#000000' id='mc:0,bo:2,bo:2,bo:0'>A function that is syntaxtcally different</span>  </li>
        <li><span class='vym-branch-3' style='color:#000000' id='mc:0,bo:2,bo:2,bo:1'>Usually takes 2 inputs and results in 1 output</span>  </li>
        <li><span class='vym-branch-3' style='color:#000000' id='mc:0,bo:2,bo:2,bo:2'>notations</span>
        <ul class="vym-list-ul-4">
          <li><span class='vym-branch-4' style='color:#000000' id='mc:0,bo:2,bo:2,bo:2,bo:0'>+(3, 4) Prefix notation</span>  </li>
          <li><span class='vym-branch-4' style='color:#000000' id='mc:0,bo:2,bo:2,bo:2,bo:1'>3+4 infix</span>  </li>
          <li><span class='vym-branch-4' style='color:#000000' id='mc:0,bo:2,bo:2,bo:2,bo:2'>(3,4)+ post fix</span>  </li>
        </ul>  </li>
        <li><span class='vym-branch-3' style='color:#000000' id='mc:0,bo:2,bo:2,bo:3'>The operators are functions in infix notation</span>  </li>
        <li><span class='vym-branch-3' style='color:#000000' id='mc:0,bo:2,bo:2,bo:4'>Operators are functions that return values</span>  </li>
      </ul>  </li>
      <li><span class='vym-branch-2' style='color:#000000' id='mc:0,bo:2,bo:3'>Operator Precedence and Associativity</span>
      <ul class="vym-list-ul-3">
        <li><span class='vym-branch-3' style='color:#000000' id='mc:0,bo:2,bo:3,bo:0'>Operator Precedence</span>
        <ul class="vym-list-ul-4">
          <li><span class='vym-branch-4' style='color:#000000' id='mc:0,bo:2,bo:3,bo:0,bo:0'>Which operators gets called first</span>  </li>
          <li><span class='vym-branch-4' style='color:#000000' id='mc:0,bo:2,bo:3,bo:0,bo:1'>Higher precendene wins</span>  </li>
          <li><span class='vym-branch-4' style='color:#000000' id='mc:0,bo:2,bo:3,bo:0,bo:2'>JS engine picks the highest precendence</span>  </li>
        </ul>  </li>
        <li><span class='vym-branch-3' style='color:#000000' id='mc:0,bo:2,bo:3,bo:1'>Operator Associativity</span>
        <ul class="vym-list-ul-4">
          <li><span class='vym-branch-4' style='color:#000000' id='mc:0,bo:2,bo:3,bo:1,bo:0'>What order a function/operator gets called in (right to left, left to right)</span>  </li>
          <li><span class='vym-branch-4' style='color:#000000' id='mc:0,bo:2,bo:3,bo:1,bo:1'>When they have the same precendence, associativity determines what gets ccalled
first</span>  </li>
        </ul>  </li>
        <li><span class='vym-branch-3' style='color:#000000' id='mc:0,bo:2,bo:3,bo:2'><a href="file:///home/juxley/Documents/Websites/Operator-Precedence-In-Javascript.pdf"><img src="flags/flag-url-16x16.png">file:///home/juxley/Documents/Websites/Operator-Precedence-In-Javascript.pdf</a></span>  </li>
        <li><span class='vym-branch-3' style='color:#000000' id='mc:0,bo:2,bo:3,bo:3'>Helps us to tell what the order that a operator (function) is called</span>  </li>
        <li><span class='vym-branch-3' style='color:#000000' id='mc:0,bo:2,bo:3,bo:4'>Why is this important? JavaScript is dynamically typed</span>  </li>
      </ul>  </li>
      <li><span class='vym-branch-2' style='color:#000000' id='mc:0,bo:2,bo:4'>Conceptual Aside: Coercion</span>
      <ul class="vym-list-ul-3">
        <li><span class='vym-branch-3' style='color:#000000' id='mc:0,bo:2,bo:4,bo:0'>Converting a value from one type to another</span>  </li>
        <li><span class='vym-branch-3' style='color:#000000' id='mc:0,bo:2,bo:4,bo:1'>&quot;helllo &quot; + &quot;world&quot;</span>  </li>
        <li><span class='vym-branch-3' style='color:#000000' id='mc:0,bo:2,bo:4,bo:2'>1 + 2</span>
        <ul class="vym-list-ul-4">
          <li><span class='vym-branch-4' style='color:#000000' id='mc:0,bo:2,bo:4,bo:2,bo:0'>3</span>  </li>
        </ul>  </li>
        <li><span class='vym-branch-3' style='color:#000000' id='mc:0,bo:2,bo:4,bo:3'>1 + &quot;2&quot;</span>
        <ul class="vym-list-ul-4">
          <li><span class='vym-branch-4' style='color:#000000' id='mc:0,bo:2,bo:4,bo:3,bo:0'>12</span>  </li>
          <li><span class='vym-branch-4' style='color:#000000' id='mc:0,bo:2,bo:4,bo:3,bo:1'>The value is coercied as a string</span>  </li>
          <li><span class='vym-branch-4' style='color:#000000' id='mc:0,bo:2,bo:4,bo:3,bo:2'>In the memory, string and number 1 look very different</span>  </li>
          <li><span class='vym-branch-4' style='color:#000000' id='mc:0,bo:2,bo:4,bo:3,bo:3'>JS engine makes a best guess</span>
          <ul class="vym-list-ul-5">
            <li><span class='vym-branch-5' style='color:#000000' id='mc:0,bo:2,bo:4,bo:3,bo:3,bo:0'>THIS choice!</span>  </li>
          </ul>  </li>
        </ul>  </li>
        <li><span class='vym-branch-3' style='color:#000000' id='mc:0,bo:2,bo:4,bo:4'>This happens since JS is dynmaically typed</span>
        <ul class="vym-list-ul-4">
          <li><span class='vym-branch-4' style='color:#000000' id='mc:0,bo:2,bo:4,bo:4,bo:0'>Happen in the JS engine</span>  </li>
        </ul>  </li>
        <li><span class='vym-branch-3' style='color:#000000' id='mc:0,bo:2,bo:4,bo:5'>operators are function, they run code as well</span>  </li>
        <li><span class='vym-branch-3' style='color:#000000' id='mc:0,bo:2,bo:4,bo:6'>Coercion is a fundalmental part of the language, don't forget it!</span>  </li>
      </ul>  </li>
      <li><span class='vym-branch-2' style='color:#000000' id='mc:0,bo:2,bo:5'>Comparison Operators</span>
      <ul class="vym-list-ul-3">
        <li><span class='vym-branch-3' style='color:#000000' id='mc:0,bo:2,bo:5,bo:0'>3 &lt; 2  &lt;  1</span>
        <ul class="vym-list-ul-4">
          <li><span class='vym-branch-4' style='color:#000000' id='mc:0,bo:2,bo:5,bo:0,bo:0'>true</span>  </li>
        </ul>  </li>
        <li><span class='vym-branch-3' style='color:#000000' id='mc:0,bo:2,bo:5,bo:1'>1 &lt; 2 &lt; 3</span>
        <ul class="vym-list-ul-4">
          <li><span class='vym-branch-4' style='color:#000000' id='mc:0,bo:2,bo:5,bo:1,bo:0'>true</span>  </li>
        </ul>  </li>
        <li><span class='vym-branch-3' style='color:#000000' id='mc:0,bo:2,bo:5,bo:2'>Boolen left &amp; right associativity</span>  </li>
        <li><span class='vym-branch-3' style='color:#000000' id='mc:0,bo:2,bo:5,bo:3'>null</span>
        <ul class="vym-list-ul-4">
          <li><span class='vym-branch-4' style='color:#000000' id='mc:0,bo:2,bo:5,bo:3,bo:0'>Coerced to a number results into 0</span>  </li>
        </ul>  </li>
        <li><span class='vym-branch-3' style='color:#000000' id='mc:0,bo:2,bo:5,bo:4'>NaN</span>
        <ul class="vym-list-ul-4">
          <li><span class='vym-branch-4' style='color:#000000' id='mc:0,bo:2,bo:5,bo:4,bo:0'>Coericing undeified</span>  </li>
        </ul>  </li>
        <li><span class='vym-branch-3' style='color:#000000' id='mc:0,bo:2,bo:5,bo:5'>null == 0</span>  </li>
        <li><span class='vym-branch-3' style='color:#000000' id='mc:0,bo:2,bo:5,bo:6'>Strict equals solves these weird coercives issues</span>
        <ul class="vym-list-ul-4">
          <li><span class='vym-branch-4' style='color:#000000' id='mc:0,bo:2,bo:5,bo:6,bo:0'>use strict equals when comparing quanities</span>  </li>
          <li><span class='vym-branch-4' style='color:#000000' id='mc:0,bo:2,bo:5,bo:6,bo:1'>function ==(a, b)</span>  </li>
          <li><span class='vym-branch-4' style='color:#000000' id='mc:0,bo:2,bo:5,bo:6,bo:2'>function ===(a, b)</span>  </li>
          <li><span class='vym-branch-4' style='color:#000000' id='mc:0,bo:2,bo:5,bo:6,bo:3'>These are only function with different outcomes</span>  </li>
        </ul>  </li>
        <li><span class='vym-branch-3' style='color:#000000' id='mc:0,bo:2,bo:5,bo:7'><a href="/home/juxley/Documents/Mind Maps/Equalty-Comparison-And-Sameness.pdf"><img src="flags/flag-url-16x16.png">Equality Sheet</a></span>  </li>
      </ul>  </li>
      <li><span class='vym-branch-2' style='color:#000000' id='mc:0,bo:2,bo:6'>Existence &amp; Boolean</span>
      <ul class="vym-list-ul-3">
        <li><span class='vym-branch-3' style='color:#000000' id='mc:0,bo:2,bo:6,bo:0'>Things that imply a lack of existence = false</span>
        <ul class="vym-list-ul-4">
          <li><span class='vym-branch-4' style='color:#000000' id='mc:0,bo:2,bo:6,bo:0,bo:0'>We can use this to our advantage with if statements</span>  </li>
          <li><span class='vym-branch-4' style='color:#000000' id='mc:0,bo:2,bo:6,bo:0,bo:1'>if (a || a === 0) // if a has something</span>  </li>
        </ul>  </li>
        <li><span class='vym-branch-3' style='color:#000000' id='mc:0,bo:2,bo:6,bo:1'>Code Example</span>
<table class="vym-note"><tr><td class="vym-note-flag">
<td>
let a;<br/><br/>// a gets data from remote<br/><br/>if (a) {<br/>  <br/>}<br/><br/>//if a is nothing, it will be undefined, which will get coercied  to false.
</td></tr></table>
  </li>
      </ul>  </li>
      <li><span class='vym-branch-2' style='color:#000000' id='mc:0,bo:2,bo:7'>Default Values</span>
      <ul class="vym-list-ul-3">
        <li><span class='vym-branch-3' style='color:#000000' id='mc:0,bo:2,bo:7,bo:0'>Code Example</span>
<table class="vym-note"><tr><td class="vym-note-flag">
<td>
function greet(name) {<br/>  console.log("Hello " + name);<br/>}<br/><br/>greet("Jason");<br/>// Hello Jason<br/><br/>greet();<br/>// Hello undefined<br/><br/><br/>function greet2(name) {<br/>  name = name || &lt;Your name here&gt;;<br/>  console.log("Hello " + name);<br/>}
</td></tr></table>

        <ul class="vym-list-ul-4">
          <li><span class='vym-branch-4' style='color:#000000' id='mc:0,bo:2,bo:7,bo:0,bo:0'>JavaScript creates the memory for the name variable, which would be undeined</span>  </li>
          <li><span class='vym-branch-4' style='color:#000000' id='mc:0,bo:2,bo:7,bo:0,bo:1'>Then, undefined got coericed into a string</span>  </li>
        </ul>  </li>
        <li><span class='vym-branch-3' style='color:#000000' id='mc:0,bo:2,bo:7,bo:1'>JavaScript doesn't care if you don't pass in a paramater for a function</span>  </li>
        <li><span class='vym-branch-3' style='color:#000000' id='mc:0,bo:2,bo:7,bo:2'>What if we want a default value/</span>  </li>
        <li><span class='vym-branch-3' style='color:#000000' id='mc:0,bo:2,bo:7,bo:3'>|| doesn't always return true or false</span>
        <ul class="vym-list-ul-4">
          <li><span class='vym-branch-4' style='color:#000000' id='mc:0,bo:2,bo:7,bo:3,bo:0'>Gives the first one that coerces into true</span>  </li>
        </ul>  </li>
      </ul>  </li>
      <li><span class='vym-branch-2' style='color:#000000' id='mc:0,bo:2,bo:8'>Framework Aside</span>
      <ul class="vym-list-ul-3">
        <li><span class='vym-branch-3' style='color:#000000' id='mc:0,bo:2,bo:8,bo:0'>Framework / LIbaryary = same thing. Reusable code</span>  </li>
        <li><span class='vym-branch-3' style='color:#000000' id='mc:0,bo:2,bo:8,bo:1'>scritp tag</span>
        <ul class="vym-list-ul-4">
          <li><span class='vym-branch-4' style='color:#000000' id='mc:0,bo:2,bo:8,bo:1,bo:0'>They get stacked ontop of each other</span>  </li>
          <li><span class='vym-branch-4' style='color:#000000' id='mc:0,bo:2,bo:8,bo:1,bo:1'>JS is usually minfied anyway</span>  </li>
          <li><span class='vym-branch-4' style='color:#000000' id='mc:0,bo:2,bo:8,bo:1,bo:2'>The code is stacked onto itself, like it's on the file</span>  </li>
        </ul>  </li>
        <li><span class='vym-branch-3' style='color:#000000' id='mc:0,bo:2,bo:8,bo:2'>window.varName = window.varName || &quot;Another string&quot;;</span>
        <ul class="vym-list-ul-4">
          <li><span class='vym-branch-4' style='color:#000000' id='mc:0,bo:2,bo:8,bo:2,bo:0'>Oh, you already used that variable name, I'll excuse myself</span>  </li>
          <li><span class='vym-branch-4' style='color:#000000' id='mc:0,bo:2,bo:8,bo:2,bo:1'>The window object checks the Global Execution Context</span>  </li>
        </ul>  </li>
      </ul>  </li>
    </ul>
  <h2><span class='vym-branch-1' style='color:#000000' id='mc:0,bo:3'>Objects and Functions</span></h2>
    <ul class="vym-list-ul-2">
      <li><span class='vym-branch-2' style='color:#000000' id='mc:0,bo:3,bo:0'>objects and the Dot</span>
      <ul class="vym-list-ul-3">
        <li><span class='vym-branch-3' style='color:#000000' id='mc:0,bo:3,bo:0,bo:0'>Names and values</span>  </li>
        <li><span class='vym-branch-3' style='color:#000000' id='mc:0,bo:3,bo:0,bo:1'>Object 0-1</span>
        <ul class="vym-list-ul-4">
          <li><span class='vym-branch-4' style='color:#000000' id='mc:0,bo:3,bo:0,bo:1,bo:0'>Primitave &quot;property&quot; 0-11</span>
          <ul class="vym-list-ul-5">
            <li><span class='vym-branch-5' style='color:#000000' id='mc:0,bo:3,bo:0,bo:1,bo:0,bo:0'>booleans, strings, numbers, etc.</span>  </li>
          </ul>  </li>
          <li><span class='vym-branch-4' style='color:#000000' id='mc:0,bo:3,bo:0,bo:1,bo:1'>Another (child) Object &quot;property&quot; 0-12</span>  </li>
          <li><span class='vym-branch-4' style='color:#000000' id='mc:0,bo:3,bo:0,bo:1,bo:2'>function &quot;method&quot; 0-13</span>  </li>
          <li><span class='vym-branch-4' style='color:#000000' id='mc:0,bo:3,bo:0,bo:1,bo:3'>Numbers are related like addresses</span>  </li>
          <li><span class='vym-branch-4' style='color:#000000' id='mc:0,bo:3,bo:0,bo:1,bo:4'>it knows where the other object are</span>  </li>
        </ul>  </li>
        <li><span class='vym-branch-3' style='color:#000000' id='mc:0,bo:3,bo:0,bo:2'>Operator</span>
        <ul class="vym-list-ul-4">
          <li><span class='vym-branch-4' style='color:#000000' id='mc:0,bo:3,bo:0,bo:2,bo:0'>computed memeber access</span>
          <ul class="vym-list-ul-5">
            <li><span class='vym-branch-5' style='color:#000000' id='mc:0,bo:3,bo:0,bo:2,bo:0,bo:0'>person[&quot;firstname&quot;] = &quot;Jason&quot;;</span>  </li>
          </ul>  </li>
          <li><span class='vym-branch-4' style='color:#000000' id='mc:0,bo:3,bo:0,bo:2,bo:1'>Member access</span>
          <ul class="vym-list-ul-5">
            <li><span class='vym-branch-5' style='color:#000000' id='mc:0,bo:3,bo:0,bo:2,bo:1,bo:0'>The dot</span>  </li>
            <li><span class='vym-branch-5' style='color:#000000' id='mc:0,bo:3,bo:0,bo:2,bo:1,bo:1'>person.firstname</span>  </li>
          </ul>  </li>
          <li><span class='vym-branch-4' style='color:#000000' id='mc:0,bo:3,bo:0,bo:2,bo:2'>just functoin / operators to FIND these properties</span>  </li>
        </ul>  </li>
      </ul>  </li>
      <li><span class='vym-branch-2' style='color:#000000' id='mc:0,bo:3,bo:1'>Object Literals</span>
      <ul class="vym-list-ul-3">
        <li><span class='vym-branch-3' style='color:#000000' id='mc:0,bo:3,bo:1,bo:0'>var person = { name: &quot;Jason&quot;, sign: &quot;Leo&quot; };</span>  </li>
        <li><span class='vym-branch-3' style='color:#000000' id='mc:0,bo:3,bo:1,bo:1'>JavaScript is liberal with whitespaces</span>  </li>
        <li><span class='vym-branch-3' style='color:#000000' id='mc:0,bo:3,bo:1,bo:2'>Example code</span>
<table class="vym-note"><tr><td class="vym-note-flag">
<td>
var jason = {<br/>  firstname : "Jason",<br/>  lastname : "Ribbe",<br/>  address : {<br/>		street: "12 Fake St",<br/>		city: "Lalaland",<br/>		state: "Colorado"<br/>  }<br/>};<br/><br/>function greet(person) {<br/>	console.log("Hello " + person.firstname);<br/>}<br/><br/>greet(jason);<br/><br/>greet({<br/>  firstname: "Herbit",<br/>  lastname: "MagicJS"<br/>});<br/><br/>console.log(person);
</td></tr></table>
  </li>
        <li><span class='vym-branch-3' style='color:#000000' id='mc:0,bo:3,bo:1,bo:3'>Where ever I want, I can make an object!</span>  </li>
        <li><span class='vym-branch-3' style='color:#000000' id='mc:0,bo:3,bo:1,bo:4'>The code that you're written isn't what is happening under the hood<img src="flags/flag-flash.png"><img src="flags/flag-exclamationmark.png"></span>  </li>
      </ul>  </li>
      <li><span class='vym-branch-2' style='color:#000000' id='mc:0,bo:3,bo:2'>Framework Aside: Faking Namespaces</span>
      <ul class="vym-list-ul-3">
        <li><span class='vym-branch-3' style='color:#000000' id='mc:0,bo:3,bo:2,bo:0'>Namespaces</span>
        <ul class="vym-list-ul-4">
          <li><span class='vym-branch-4' style='color:#000000' id='mc:0,bo:3,bo:2,bo:0,bo:0'>A container for variables and functions</span>  </li>
        </ul>  </li>
        <li><span class='vym-branch-3' style='color:#000000' id='mc:0,bo:3,bo:2,bo:1'>JavaScript doesn't have namespaces, it doesn't need to; it can fake it.</span>  </li>
        <li><span class='vym-branch-3' style='color:#000000' id='mc:0,bo:3,bo:2,bo:2'>Problem: a case where a global variable needs 2 values</span>  </li>
        <li><span class='vym-branch-3' style='color:#000000' id='mc:0,bo:3,bo:2,bo:3'>Solution: use an object to make sure there is not namespace collations</span>
        <ul class="vym-list-ul-4">
          <li><span class='vym-branch-4' style='color:#000000' id='mc:0,bo:3,bo:2,bo:3,bo:0'>Example code</span>
          <ul class="vym-list-ul-5">
            <li><span class='vym-branch-5' style='color:#000000' id='mc:0,bo:3,bo:2,bo:3,bo:0,bo:0'></span>  </li>
          </ul>  </li>
        </ul>  </li>
        <li><span class='vym-branch-3' style='color:#000000' id='mc:0,bo:3,bo:2,bo:4'>Pitfall</span>
        <ul class="vym-list-ul-4">
          <li><span class='vym-branch-4' style='color:#000000' id='mc:0,bo:3,bo:2,bo:4,bo:0'>var english = {}; english.greetings.greet1 = &quot;Hello&quot;;</span>
          <ul class="vym-list-ul-5">
            <li><span class='vym-branch-5' style='color:#000000' id='mc:0,bo:3,bo:2,bo:4,bo:0,bo:0'>Output:Uncaught type error: greetings is undefined</span>  </li>
            <li><span class='vym-branch-5' style='color:#000000' id='mc:0,bo:3,bo:2,bo:4,bo:0,bo:1'>english.greeting will be undefined</span>  </li>
          </ul>  </li>
        </ul>  </li>
      </ul>  </li>
      <li><span class='vym-branch-2' style='color:#000000' id='mc:0,bo:3,bo:3'>JSON and Object Literal</span>
      <ul class="vym-list-ul-3">
        <li><span class='vym-branch-3' style='color:#000000' id='mc:0,bo:3,bo:3,bo:0'>Inspired by object literal</span>
        <ul class="vym-list-ul-4">
          <li><span class='vym-branch-4' style='color:#000000' id='mc:0,bo:3,bo:3,bo:0,bo:0'>Not the same as object literals</span>  </li>
        </ul>  </li>
        <li><span class='vym-branch-3' style='color:#000000' id='mc:0,bo:3,bo:3,bo:1'>JavaScript Object Nottation</span>  </li>
        <li><span class='vym-branch-3' style='color:#000000' id='mc:0,bo:3,bo:3,bo:2'>Many formats were send across the wire (the internet)</span>  </li>
        <li><span class='vym-branch-3' style='color:#000000' id='mc:0,bo:3,bo:3,bo:3'>Example code</span>
<table class="vym-note"><tr><td class="vym-note-flag">
<td>
var objectLiteral = {<br/>    firstname: 'Mary',<br/>    isAProgrammer: true<br/>}<br/><br/>console.log(JSON.stringify(objectLiteral));<br/><br/>var jsonValue = JSON.parse('{ "firstname": "Mary", "isAProgrammer": true }');<br/><br/>console.log(jsonValue);
</td></tr></table>
  </li>
        <li><span class='vym-branch-3' style='color:#000000' id='mc:0,bo:3,bo:3,bo:4'>JSON is more strict</span>  </li>
      </ul>  </li>
      <li><span class='vym-branch-2' style='color:#000000' id='mc:0,bo:3,bo:4'>Functions are objects<img src="flags/flag-info.png"></span>
<table class="vym-note"><tr><td class="vym-note-flag">
<td>
nb
</td></tr></table>

      <ul class="vym-list-ul-3">
        <li><span class='vym-branch-3' style='color:#000000' id='mc:0,bo:3,bo:4,bo:0'>1st class functions</span>
        <ul class="vym-list-ul-4">
          <li><span class='vym-branch-4' style='color:#000000' id='mc:0,bo:3,bo:4,bo:0,bo:0'>Everything you can do other types, you can do with functions</span>  </li>
          <li><span class='vym-branch-4' style='color:#000000' id='mc:0,bo:3,bo:4,bo:0,bo:1'>You can have functions as paramerts, set them equal to variables, write them on
the fly</span>  </li>
        </ul>  </li>
        <li><span class='vym-branch-3' style='color:#000000' id='mc:0,bo:3,bo:4,bo:1'>A function is a special type of object</span>
        <ul class="vym-list-ul-4">
          <li><span class='vym-branch-4' style='color:#000000' id='mc:0,bo:3,bo:4,bo:1,bo:0'>You can attach properties and methods to a function</span>
          <ul class="vym-list-ul-5">
            <li><span class='vym-branch-5' style='color:#000000' id='mc:0,bo:3,bo:4,bo:1,bo:0,bo:0'>Primative</span>  </li>
            <li><span class='vym-branch-5' style='color:#000000' id='mc:0,bo:3,bo:4,bo:1,bo:0,bo:1'>Object</span>  </li>
            <li><span class='vym-branch-5' style='color:#000000' id='mc:0,bo:3,bo:4,bo:1,bo:0,bo:2'>Functions</span>  </li>
            <li><span class='vym-branch-5' style='color:#000000' id='mc:0,bo:3,bo:4,bo:1,bo:0,bo:3'>Example Code</span>
<table class="vym-note"><tr><td class="vym-note-flag">
<td>
function greet() {<br/>  console.log("Hello");<br/>}<br/><br/>greet.lang = "english";<br/><br/>console.log(greet);<br/>console.log(greet.language);<br/><br/>//output<br/>/*<br/>function greet() {<br/>  console.log("Hello");<br/>}<br/>"english"<br/>*/
</td></tr></table>
  </li>
          </ul>  </li>
          <li><span class='vym-branch-4' style='color:#000000' id='mc:0,bo:3,bo:4,bo:1,bo:1'>Special parts</span>
          <ul class="vym-list-ul-5">
            <li><span class='vym-branch-5' style='color:#000000' id='mc:0,bo:3,bo:4,bo:1,bo:1,bo:0'>Names</span>
            <ul class="vym-list-ul-6">
              <li><span class='vym-branch-6' style='color:#000000' id='mc:0,bo:3,bo:4,bo:1,bo:1,bo:0,bo:0'>Doesn't have to have one</span>  </li>
            </ul>  </li>
            <li><span class='vym-branch-5' style='color:#000000' id='mc:0,bo:3,bo:4,bo:1,bo:1,bo:1'>Code property</span>
            <ul class="vym-list-ul-6">
              <li><span class='vym-branch-6' style='color:#000000' id='mc:0,bo:3,bo:4,bo:1,bo:1,bo:1,bo:0'>Invocable</span>
              <ul class="vym-list-ul-7">
                <li><span class='vym-branch-7' style='color:#000000' id='mc:0,bo:3,bo:4,bo:1,bo:1,bo:1,bo:0,bo:0'>Run this code please! (execution context, exeuction, etc.)</span>  </li>
              </ul>  </li>
            </ul>  </li>
          </ul>  </li>
        </ul>  </li>
      </ul>  </li>
      <li><span class='vym-branch-2' style='color:#000000' id='mc:0,bo:3,bo:5'>Function Statements and Function Expressions</span>
      <ul class="vym-list-ul-3">
        <li><span class='vym-branch-3' style='color:#000000' id='mc:0,bo:3,bo:5,bo:0'>Expression: a unit of code that results in a value</span>
        <ul class="vym-list-ul-4">
          <li><span class='vym-branch-4' style='color:#000000' id='mc:0,bo:3,bo:5,bo:0,bo:0'>Doesn't have to save inside a variable</span>  </li>
          <li><span class='vym-branch-4' style='color:#000000' id='mc:0,bo:3,bo:5,bo:0,bo:1'>Examples</span>
<table class="vym-note"><tr><td class="vym-note-flag">
<td>
var a  = 3<br/>1 + 2;;
</td></tr></table>
  </li>
          <li><span class='vym-branch-4' style='color:#000000' id='mc:0,bo:3,bo:5,bo:0,bo:2'>function expression</span>
<table class="vym-note"><tr><td class="vym-note-flag">
<td>
var anonynomus = function () {<br/>  console.log("hello");<br/>}
</td></tr></table>

          <ul class="vym-list-ul-5">
            <li><span class='vym-branch-5' style='color:#000000' id='mc:0,bo:3,bo:5,bo:0,bo:2,bo:0'>It doesn't have a name, it's an anonymous function stored in memory with the
name of anaoymous greet</span>  </li>
          </ul>  </li>
          <li><span class='vym-branch-4' style='color:#000000' id='mc:0,bo:3,bo:5,bo:0,bo:3'>Returns an object, while a function statement will say &quot;yeah there's a function
there&quot; and won't execute it in any way</span>  </li>
          <li><span class='vym-branch-4' style='color:#000000' id='mc:0,bo:3,bo:5,bo:0,bo:4'>Variable set to undefined first</span>  </li>
        </ul>  </li>
        <li><span class='vym-branch-3' style='color:#000000' id='mc:0,bo:3,bo:5,bo:1'>STatement: does work</span>
        <ul class="vym-list-ul-4">
          <li><span class='vym-branch-4' style='color:#000000' id='mc:0,bo:3,bo:5,bo:1,bo:0'>If statement</span>  </li>
          <li><span class='vym-branch-4' style='color:#000000' id='mc:0,bo:3,bo:5,bo:1,bo:1'>function statement</span>
<table class="vym-note"><tr><td class="vym-note-flag">
<td>
function greet() {<br/>  console.log("Hi");<br/>}
</td></tr></table>

          <ul class="vym-list-ul-5">
            <li><span class='vym-branch-5' style='color:#000000' id='mc:0,bo:3,bo:5,bo:1,bo:1,bo:0'>It doesn't result in a value</span>  </li>
            <li><span class='vym-branch-5' style='color:#000000' id='mc:0,bo:3,bo:5,bo:1,bo:1,bo:1'>Available in memory</span>  </li>
            <li><span class='vym-branch-5' style='color:#000000' id='mc:0,bo:3,bo:5,bo:1,bo:1,bo:2'>Hoisted</span>  </li>
          </ul>  </li>
        </ul>  </li>
        <li><span class='vym-branch-3' style='color:#000000' id='mc:0,bo:3,bo:5,bo:2'>Good good is being understandable and consie</span>  </li>
        <li><span class='vym-branch-3' style='color:#000000' id='mc:0,bo:3,bo:5,bo:3'>function log(a) {</span>
<table class="vym-note"><tr><td class="vym-note-flag">
<td>
<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.0//EN" "http://www.w3.org/TR/REC-html40/strict.dtd">

<p class="vym-note-paragraph"><span style=" font-family:'Sans'; font-size:10pt; font-weight:600; color:#680000;">...<br /><br />function log(a) {</span></p>
<p class="vym-note-paragraph"><span style=" font-family:'Sans'; font-size:10pt; font-weight:600; color:#680000;"> console.log(a);</span></p>
<p class="vym-note-paragraph"><span style=" font-family:'Sans'; font-size:10pt; font-weight:600; color:#680000;"> a();</span></p>
<p class="vym-note-paragraph"><span style=" font-family:'Sans'; font-size:10pt; font-weight:600; color:#680000;">}</span></p>
<p class="vym-note-paragraph"><br /></p>
<p class="vym-note-paragraph"><span style=" font-family:'Sans'; font-size:10pt; font-weight:600; color:#680000;">log(3);</span></p>
<p class="vym-note-paragraph"><span style=" font-family:'Sans'; font-size:10pt; font-weight:600; color:#680000;">log(&quot;three&quot;);</span></p>
<p class="vym-note-paragraph"><span style=" font-family:'Sans'; font-size:10pt; font-weight:600; color:#680000;">log({greeting: hi});</span></p>
<p class="vym-note-paragraph"><br /></p>
<p class="vym-note-paragraph"><span style=" font-family:'Sans'; font-size:10pt; font-weight:600; color:#680000;">log(function() {</span></p>
<p class="vym-note-paragraph"><span style=" font-family:'Sans'; font-size:10pt; font-weight:600; color:#680000;">  console.log(&quot;hi&quot;);</span></p>
<p class="vym-note-paragraph"><span style=" font-family:'Sans'; font-size:10pt; font-weight:600; color:#680000;">});</span></p>
<p class="vym-note-paragraph"><br /></p>
<p class="vym-note-paragraph"><br /></p>
<p class="vym-note-paragraph"><br /></p>
</td></tr></table>
  </li>
        <li><span class='vym-branch-3' style='color:#000000' id='mc:0,bo:3,bo:5,bo:4'>Passing function around, give function to function as parameters, use them like
variables = functional programming</span>  </li>
        <li><span class='vym-branch-3' style='color:#000000' id='mc:0,bo:3,bo:5,bo:5'>first class function'; functions in JS are objects</span>  </li>
      </ul>  </li>
      <li><span class='vym-branch-2' style='color:#000000' id='mc:0,bo:3,bo:6'>By Reference / By Value</span>
      <ul class="vym-list-ul-3">
        <li><span class='vym-branch-3' style='color:#000000' id='mc:0,bo:3,bo:6,bo:0'>By Value</span>
        <ul class="vym-list-ul-4">
          <li><span class='vym-branch-4' style='color:#000000' id='mc:0,bo:3,bo:6,bo:0,bo:0'>b = a</span>  </li>
          <li><span class='vym-branch-4' style='color:#000000' id='mc:0,bo:3,bo:6,bo:0,bo:1'><a href="/home/juxley/Pictures/byreferencebyvalue1.png"><img src="flags/flag-url-16x16.png">Model</a></span>  </li>
          <li><span class='vym-branch-4' style='color:#000000' id='mc:0,bo:3,bo:6,bo:0,bo:2'>Primitve types! (all, except objects)</span>  </li>
          <li><span class='vym-branch-4' style='color:#000000' id='mc:0,bo:3,bo:6,bo:0,bo:3'>After copying, the variables can stay on their own.</span>  </li>
        </ul>  </li>
        <li><span class='vym-branch-3' style='color:#000000' id='mc:0,bo:3,bo:6,bo:1'>By Reference</span>
        <ul class="vym-list-ul-4">
          <li><span class='vym-branch-4' style='color:#000000' id='mc:0,bo:3,bo:6,bo:1,bo:0'>Objects (all objects, which includes functions)</span>  </li>
          <li><span class='vym-branch-4' style='color:#000000' id='mc:0,bo:3,bo:6,bo:1,bo:1'>Two names point to the same place in memory</span>  </li>
          <li><span class='vym-branch-4' style='color:#000000' id='mc:0,bo:3,bo:6,bo:1,bo:2'><a href="/home/juxley/Pictures/byreference.png"><img src="flags/flag-url-16x16.png">Model</a></span>  </li>
        </ul>  </li>
        <li><span class='vym-branch-3' style='color:#000000' id='mc:0,bo:3,bo:6,bo:2'>Code</span>
<table class="vym-note"><tr><td class="vym-note-flag">
<td>
//by value<br/>var a = 3;<br/>var b;<br/><br/>b = a;<br/>a = 2;<br/><br/><br/>//by reference<br/><br/>var c = { greeting: "hi" };<br/>var d = c;<br/>c.greet = "hello"; //mutated<br/><br/>//by reference, even as a parameter<br/><br/>function changeGreet(obj) {<br/>  obj.greet = "Hola";<br/>}<br/><br/>c.greet = d.greet = obj.greet;<br/>c.greet = { greeting: "hiya" };  // new place in memeory for that to live
</td></tr></table>
  </li>
        <li><span class='vym-branch-3' style='color:#000000' id='mc:0,bo:3,bo:6,bo:3'>mutated</span>
        <ul class="vym-list-ul-4">
          <li><span class='vym-branch-4' style='color:#000000' id='mc:0,bo:3,bo:6,bo:3,bo:0'>To chang a avlue</span>  </li>
        </ul>  </li>
        <li><span class='vym-branch-3' style='color:#000000' id='mc:0,bo:3,bo:6,bo:4'>immuatable</span>
        <ul class="vym-list-ul-4">
          <li><span class='vym-branch-4' style='color:#000000' id='mc:0,bo:3,bo:6,bo:4,bo:0'>Cannot be change</span>  </li>
        </ul>  </li>
      </ul>  </li>
      <li><span class='vym-branch-2' style='color:#000000' id='mc:0,bo:3,bo:7'><a href="/home/juxley/Pictures/this.png"><img src="flags/flag-url-16x16.png">Objects, Functions, and &quot;this&quot;</a></span>
      <ul class="vym-list-ul-3">
        <li><span class='vym-branch-3' style='color:#000000' id='mc:0,bo:3,bo:7,bo:0'>Each time an execution context is made, JavaScript makes the 'this' object</span>  </li>
        <li><span class='vym-branch-3' style='color:#000000' id='mc:0,bo:3,bo:7,bo:1'>3 Execution Conext</span>
        <ul class="vym-list-ul-4">
          <li><span class='vym-branch-4' style='color:#000000' id='mc:0,bo:3,bo:7,bo:1,bo:0'>All 3 'this' point to the global object, the Window object</span>  </li>
          <li><span class='vym-branch-4' style='color:#000000' id='mc:0,bo:3,bo:7,bo:1,bo:1'>Code Example</span>
<table class="vym-note"><tr><td class="vym-note-flag">
<td>
function a() {<br/>  console.log(this);<br/>  this.newVar = "Hello"<br/>} <br/><br/>var b = function() {<br/>  console.log(this);<br/>};<br/><br/>a();<br/>console.log("Hello"); // works<br/> <br/>b();<br/><br/>var c = {<br/>  name: "c object",<br/>  log: function() {<br/><br/>   var self = this;<br/><br/>	  self.name = "updated c object";<br/>      console.log(self);<br/>   <br/><br/>  var setName = function(newName) {<br/>    this.name = newName; //on the global objects<br/>    self.name = newName;<br/>  }<br/>   setName("OOPS! this.anme is on the global object, while self.name is on the c<br/>object")<br/>   console.log(self);<br/>  }<br/>}
</td></tr></table>
  </li>
          <li><span class='vym-branch-4' style='color:#000000' id='mc:0,bo:3,bo:7,bo:1,bo:2'>'this' will point to the ojbect is attached to. It will point to the object it
contains to.</span>  </li>
          <li><span class='vym-branch-4' style='color:#000000' id='mc:0,bo:3,bo:7,bo:1,bo:3'>You can access the properties within the object using 'this'</span>  </li>
          <li><span class='vym-branch-4' style='color:#000000' id='mc:0,bo:3,bo:7,bo:1,bo:4'>when just invocating a funciton, 'this' points to the global object</span>  </li>
          <li><span class='vym-branch-4' style='color:#000000' id='mc:0,bo:3,bo:7,bo:1,bo:5'>when in a object, 'this points to the object itself</span>  </li>
        </ul>  </li>
      </ul>  </li>
      <li><span class='vym-branch-2' style='color:#000000' id='mc:0,bo:3,bo:8'><a href="/home/juxley/Pictures/collectionofanything.png"><img src="flags/flag-url-16x16.png">Conceptual Aside: Collection of Anything</a></span>  </li>
      <li><span class='vym-branch-2' style='color:#000000' id='mc:0,bo:3,bo:9'>arguments and &quot;spread&quot;</span>
      <ul class="vym-list-ul-3">
        <li><span class='vym-branch-3' style='color:#000000' id='mc:0,bo:3,bo:9,bo:0'></span>  </li>
        <li><span class='vym-branch-3' style='color:#000000' id='mc:0,bo:3,bo:9,bo:1'>arguments hold all the values of all of the parameters passed into a function</span>  </li>
        <li><span class='vym-branch-3' style='color:#000000' id='mc:0,bo:3,bo:9,bo:2'>Arguments =&gt; The parameters yyou pass into a function</span>  </li>
        <li><span class='vym-branch-3' style='color:#000000' id='mc:0,bo:3,bo:9,bo:3'>JavaScript gives you a key word that stores tthem in</span>  </li>
        <li><span class='vym-branch-3' style='color:#000000' id='mc:0,bo:3,bo:9,bo:4'>Example</span>
<table class="vym-note"><tr><td class="vym-note-flag">
<td>
function greet(first, last, langauge, ...other) {<br/>  langauge = langauge || "en";<br/><br/>  if (arguments.length === 0) {<br/>  console.('Missing Parametrs');<br/>  console.log('------');<br/>  return<br/>}<br/><br/>  console.log({first, last, langauge});<br/>  console.log(arguments);<br/>  console.log("arg 0: "<br/>  console.log("----------------------");<br/>}<br/><br/>greet();q<br/>greet("jason");<br/>greet("Jason", "Ribble", "cz");
</td></tr></table>
  </li>
        <li><span class='vym-branch-3' style='color:#000000' id='mc:0,bo:3,bo:9,bo:5'>Hving default parameters</span>  </li>
        <li><span class='vym-branch-3' style='color:#000000' id='mc:0,bo:3,bo:9,bo:6'>arguments keyword IS NOT really an array.</span>
        <ul class="vym-list-ul-4">
          <li><span class='vym-branch-4' style='color:#000000' id='mc:0,bo:3,bo:9,bo:6,bo:0'>Know as array-like</span>  </li>
        </ul>  </li>
        <li><span class='vym-branch-3' style='color:#000000' id='mc:0,bo:3,bo:9,bo:7'>Arguments are depreeated</span>  </li>
        <li><span class='vym-branch-3' style='color:#000000' id='mc:0,bo:3,bo:9,bo:8'>Spread!</span>
        <ul class="vym-list-ul-4">
          <li><span class='vym-branch-4' style='color:#000000' id='mc:0,bo:3,bo:9,bo:8,bo:0'>...other</span>  </li>
          <li><span class='vym-branch-4' style='color:#000000' id='mc:0,bo:3,bo:9,bo:8,bo:1'>Take the paramets and put them in an array called other</span>  </li>
        </ul>  </li>
      </ul>  </li>
      <li><span class='vym-branch-2' style='color:#000000' id='mc:0,bo:3,bo:10'>Framework Aside : function overloading</span>
<table class="vym-note"><tr><td class="vym-note-flag">
<td>
function greet(first, last, lang) {<br/><br/>if (lang === "en") {<br/>  console.log("hello " + first + " " + last);<br/>}<br/><br/>if (lang === "es") {<br/>  console.log("hola " + first + " " + last);<br/>}<br/><br/>}<br/><br/>function greetEn(first, last) {<br/>  greet(first, last, 'en');<br/>}<br/><br/>function greetEs(first, last) {<br/>  greet(first, last, 'es');<br/>}
</td></tr></table>

      <ul class="vym-list-ul-3">
        <li><span class='vym-branch-3' style='color:#000000' id='mc:0,bo:3,bo:10,bo:0'>JavaScript doesn't have this, and we don't care</span>  </li>
        <li><span class='vym-branch-3' style='color:#000000' id='mc:0,bo:3,bo:10,bo:1'>We have 1st class functions</span>  </li>
        <li><span class='vym-branch-3' style='color:#000000' id='mc:0,bo:3,bo:10,bo:2'>Example</span>  </li>
      </ul>  </li>
      <li><span class='vym-branch-2' style='color:#000000' id='mc:0,bo:3,bo:11'>Concept Aside: Syntax Parser</span>
      <ul class="vym-list-ul-3">
        <li><span class='vym-branch-3' style='color:#000000' id='mc:0,bo:3,bo:11,bo:0'>The computer transflate it into what the computer can understand</span>  </li>
        <li><span class='vym-branch-3' style='color:#000000' id='mc:0,bo:3,bo:11,bo:1'>A browser is on for JavaScript</span>  </li>
        <li><span class='vym-branch-3' style='color:#000000' id='mc:0,bo:3,bo:11,bo:2'>if it see proper syntax, it'll know what you tend to do</span>  </li>
        <li><span class='vym-branch-3' style='color:#000000' id='mc:0,bo:3,bo:11,bo:3'>character by  character making assumptions, rules, and might even make changes
to your code; trying to determine what you intend to do</span>  </li>
      </ul>  </li>
      <li><span class='vym-branch-2' style='color:#000000' id='mc:0,bo:3,bo:12'>Dangerous Aside!!!!!!! Automatic Semicolin Insertation</span>
      <ul class="vym-list-ul-3">
        <li><span class='vym-branch-3' style='color:#000000' id='mc:0,bo:3,bo:12,bo:0'>The JavaScript syntax parser will put a ; where it expects it to be.</span>  </li>
        <li><span class='vym-branch-3' style='color:#000000' id='mc:0,bo:3,bo:12,bo:1'>Put the semicolons, as you don't want JavaScript to guess for you.</span>  </li>
        <li><span class='vym-branch-3' style='color:#000000' id='mc:0,bo:3,bo:12,bo:2'>Returns (enter) may cause some problems in your code</span>  </li>
        <li><span class='vym-branch-3' style='color:#000000' id='mc:0,bo:3,bo:12,bo:3'>Example (Incorrect)</span>
<table class="vym-note"><tr><td class="vym-note-flag">
<td>
function getPerson() {<br/>  return  //&lt;-Semicolon inserted)<br/>   {<br/>     firstname: 'Tony'<br/>   }<br/>}<br/><br/>console.log(getPerson());
</td></tr></table>
  </li>
        <li><span class='vym-branch-3' style='color:#000000' id='mc:0,bo:3,bo:12,bo:4'>Example (Correct)</span>
<table class="vym-note"><tr><td class="vym-note-flag">
<td>
function getPerson() {<br/>  return { <br/>     firstname: 'Tony'<br/>   }<br/>}<br/><br/>console.log(getPerson());
</td></tr></table>
  </li>
        <li><span class='vym-branch-3' style='color:#000000' id='mc:0,bo:3,bo:12,bo:5'>Put { on the same line as the statement (object, function, if, etc.)</span>  </li>
      </ul>  </li>
      <li><span class='vym-branch-2' style='color:#000000' id='mc:0,bo:3,bo:13'>Conceptual Aside :WhitespacesJ</span>
      <ul class="vym-list-ul-3">
        <li><span class='vym-branch-3' style='color:#000000' id='mc:0,bo:3,bo:13,bo:0'>JavaScript is very liberal</span>  </li>
        <li><span class='vym-branch-3' style='color:#000000' id='mc:0,bo:3,bo:13,bo:1'>Make comments! You add one using white spaces</span>
        <ul class="vym-list-ul-4">
          <li><span class='vym-branch-4' style='color:#000000' id='mc:0,bo:3,bo:13,bo:1,bo:0'></span>  </li>
        </ul>  </li>
        <li><span class='vym-branch-3' style='color:#000000' id='mc:0,bo:3,bo:13,bo:2'>Example</span>
<table class="vym-note"><tr><td class="vym-note-flag">
<td>
var<br/><br/>// look at that<br/>  firstname,<br/>  lastname,<br/>//another one<br/>  lang;<br/><br/>var person {<br/>  // the first name<br/>  firstname: 'Jason',<br/>  // More white space<br/>  lastname: 'Ribble';<br/>}
</td></tr></table>
  </li>
        <li><span class='vym-branch-3' style='color:#000000' id='mc:0,bo:3,bo:13,bo:3'>Programming will be happy to put a lot of coments to take adventage of this</span>  </li>
        <li><span class='vym-branch-3' style='color:#000000' id='mc:0,bo:3,bo:13,bo:4'>When coming back to your own code you'll be happy</span>  </li>
      </ul>  </li>
      <li><span class='vym-branch-2' style='color:#000000' id='mc:0,bo:3,bo:14'>Immeditaly Invoked Function Expressions</span>
      <ul class="vym-list-ul-3">
        <li><span class='vym-branch-3' style='color:#000000' id='mc:0,bo:3,bo:14,bo:0'>Function statment</span>  </li>
        <li><span class='vym-branch-3' style='color:#000000' id='mc:0,bo:3,bo:14,bo:1'>Function Expression</span>  </li>
        <li><span class='vym-branch-3' style='color:#000000' id='mc:0,bo:3,bo:14,bo:2'>Functoins</span>
        <ul class="vym-list-ul-4">
          <li><span class='vym-branch-4' style='color:#000000' id='mc:0,bo:3,bo:14,bo:2,bo:0'>Code property (innovcation)</span>  </li>
          <li><span class='vym-branch-4' style='color:#000000' id='mc:0,bo:3,bo:14,bo:2,bo:1'>Name</span>  </li>
        </ul>  </li>
        <li><span class='vym-branch-3' style='color:#000000' id='mc:0,bo:3,bo:14,bo:3'>Invoking something on the fly</span>  </li>
        <li><span class='vym-branch-3' style='color:#000000' id='mc:0,bo:3,bo:14,bo:4'>IIFE</span>
<table class="vym-note"><tr><td class="vym-note-flag">
<td>
var greeting = function(name) {<br/>   return "Hello " + name;<br/>}("Jason");
</td></tr></table>

        <ul class="vym-list-ul-4">
          <li><span class='vym-branch-4' style='color:#000000' id='mc:0,bo:3,bo:14,bo:4,bo:0'>Invocate a function immeditably after creating it</span>  </li>
          <li><span class='vym-branch-4' style='color:#000000' id='mc:0,bo:3,bo:14,bo:4,bo:1'>The variable holds the returned value, not the function</span>  </li>
        </ul>  </li>
        <li><span class='vym-branch-3' style='color:#000000' id='mc:0,bo:3,bo:14,bo:5'>We can put strings, numbers, and objects anywhere, that's not doing anything; we
can do so.</span>
        <ul class="vym-list-ul-4">
          <li><span class='vym-branch-4' style='color:#000000' id='mc:0,bo:3,bo:14,bo:5,bo:0'>We can't do it with functions; it wants to be a function STATEMENT</span>  </li>
          <li><span class='vym-branch-4' style='color:#000000' id='mc:0,bo:3,bo:14,bo:5,bo:1'>UNLESS we have a function expression, by WRAPPING YOUR FUNCTION IN PARENTHESES</span>  </li>
        </ul>  </li>
        <li><span class='vym-branch-3' style='color:#000000' id='mc:0,bo:3,bo:14,bo:6'>Expression: Something that returns a value</span>  </li>
        <li><span class='vym-branch-3' style='color:#000000' id='mc:0,bo:3,bo:14,bo:7'>What's special about this?</span>
        <ul class="vym-list-ul-4">
          <li><span class='vym-branch-4' style='color:#000000' id='mc:0,bo:3,bo:14,bo:7,bo:0'>we can have a function expression (wrapped in parens to trick the syntax
paratex, then we can write a function and run it at the same time</span>  </li>
          <li><span class='vym-branch-4' style='color:#000000' id='mc:0,bo:3,bo:14,bo:7,bo:1'>Another Example</span>
<table class="vym-note"><tr><td class="vym-note-flag">
<td>
(function(name) { <br/>    var greet = "hello "; <br/>	console.log(greet + name); <br/>})("Jason");
</td></tr></table>
  </li>
        </ul>  </li>
        <li><span class='vym-branch-3' style='color:#000000' id='mc:0,bo:3,bo:14,bo:8'>Framework aside IIFE and Safe Code</span>
        <ul class="vym-list-ul-4">
          <li><span class='vym-branch-4' style='color:#000000' id='mc:0,bo:3,bo:14,bo:8,bo:0'>Ran Code</span>
<table class="vym-note"><tr><td class="vym-note-flag">
<td>
(function(name) { <br/>    var greet = "hello "; <br/>	console.log(greet + name); <br/>})("Jason");
</td></tr></table>
  </li>
          <li><span class='vym-branch-4' style='color:#000000' id='mc:0,bo:3,bo:14,bo:8,bo:1'>Execution Stack</span>
          <ul class="vym-list-ul-5">
            <li><span class='vym-branch-5' style='color:#000000' id='mc:0,bo:3,bo:14,bo:8,bo:1,bo:0'>Hits the function expression, create an object with code (anynomous function)</span>  </li>
            <li><span class='vym-branch-5' style='color:#000000' id='mc:0,bo:3,bo:14,bo:8,bo:1,bo:1'>Hits the parentheses that invokes the funciton</span>  </li>
            <li><span class='vym-branch-5' style='color:#000000' id='mc:0,bo:3,bo:14,bo:8,bo:1,bo:2'>Execution Conext of the anynomous function</span>
            <ul class="vym-list-ul-6">
              <li><span class='vym-branch-6' style='color:#000000' id='mc:0,bo:3,bo:14,bo:8,bo:1,bo:2,bo:0'>The parameter goes into the Execution Conext of the anyonmous function, it is
not touching the global enviroment.</span>  </li>
              <li><span class='vym-branch-6' style='color:#000000' id='mc:0,bo:3,bo:14,bo:8,bo:1,bo:2,bo:1'>This allows us to have 2 variable names in JavaScript; esecially when usng
frameworks.</span>  </li>
            </ul>  </li>
          </ul>  </li>
          <li><span class='vym-branch-4' style='color:#000000' id='mc:0,bo:3,bo:14,bo:8,bo:2'><a href="/home/juxley/Pictures/safeiife.png"><img src="flags/flag-url-16x16.png">Image</a></span>  </li>
          <li><span class='vym-branch-4' style='color:#000000' id='mc:0,bo:3,bo:14,bo:8,bo:3'>The entire framework wll be in an IIFE to prevent code from crashing into other
code</span>
          <ul class="vym-list-ul-5">
            <li><span class='vym-branch-5' style='color:#000000' id='mc:0,bo:3,bo:14,bo:8,bo:3,bo:0'>This will also create reuseable code</span>  </li>
          </ul>  </li>
          <li><span class='vym-branch-4' style='color:#000000' id='mc:0,bo:3,bo:14,bo:8,bo:4'>What if we want someting inthe global object?</span>
          <ul class="vym-list-ul-5">
            <li><span class='vym-branch-5' style='color:#000000' id='mc:0,bo:3,bo:14,bo:8,bo:4,bo:0'>Pass the global object (window) into the IIFE</span>
            <ul class="vym-list-ul-6">
              <li><span class='vym-branch-6' style='color:#000000' id='mc:0,bo:3,bo:14,bo:8,bo:4,bo:0,bo:0'>Example</span>
<table class="vym-note"><tr><td class="vym-note-flag">
<td>
<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.0//EN" "http://www.w3.org/TR/REC-html40/strict.dtd">

<p class="vym-note-paragraph"><span style=" color:#000000;">var greeting = &quot;Hola&quot;;</span></p>
<p class="vym-note-paragraph"><br /></p>
<p class="vym-note-paragraph"><span style=" color:#000000;">(functon (global, greetng) {</span></p>
<p class="vym-note-paragraph"><span style=" color:#000000;">    var greetng = 'Hello';</span></p>
<p class="vym-note-paragraph"><span style=" color:#000000;">    global.greetng = &quot;Hiya'';</span></p>
<p class="vym-note-paragraph"><br /></p>
<p class="vym-note-paragraph"><span style=" color:#000000;">})(window, &quot;Jason&quot;);</span></p>
</td></tr></table>
  </li>
            </ul>  </li>
          </ul>  </li>
        </ul>  </li>
      </ul>  </li>
      <li><span class='vym-branch-2' style='color:#000000' id='mc:0,bo:3,bo:15'>Understanding Closures</span>
      <ul class="vym-list-ul-3">
        <li><span class='vym-branch-3' style='color:#000000' id='mc:0,bo:3,bo:15,bo:0'>Example</span>
<table class="vym-note"><tr><td class="vym-note-flag">
<td>
function greet(whattosay) {<br/>  <br/>  return function(name) {<br/>    console.log(whattosay + " " + name);<br/>  }<br/>}<br/><br/>greet("Hi")("Jason");<br/><br/>let sayHey = greet("Hey");<br/>sayHey("Jason");
</td></tr></table>
  </li>
        <li><span class='vym-branch-3' style='color:#000000' id='mc:0,bo:3,bo:15,bo:1'>How does the sayhey varable still know the whattosay value?</span>  </li>
        <li><span class='vym-branch-3' style='color:#000000' id='mc:0,bo:3,bo:15,bo:2'>This is possible due to closures</span>  </li>
        <li><span class='vym-branch-3' style='color:#000000' id='mc:0,bo:3,bo:15,bo:3'>The greet function needs to &quot;end&quot; after the execution is complete. How does it
work?</span>
        <ul class="vym-list-ul-4">
          <li><span class='vym-branch-4' style='color:#000000' id='mc:0,bo:3,bo:15,bo:3,bo:0'>It's pop off the stack when greet finshes reading &quot;return&quot;</span>  </li>
        </ul>  </li>
        <li><span class='vym-branch-3' style='color:#000000' id='mc:0,bo:3,bo:15,bo:4'>The Execution Conext has a space in memory where the variables live.</span>
        <ul class="vym-list-ul-4">
          <li><span class='vym-branch-4' style='color:#000000' id='mc:0,bo:3,bo:15,bo:4,bo:0'>Using it cleans out, due to garabage collection</span>  </li>
          <li><span class='vym-branch-4' style='color:#000000' id='mc:0,bo:3,bo:15,bo:4,bo:1'>However, when the execution conext is complete, the vairables in memory are
still there</span>  </li>
        </ul>  </li>
        <li><span class='vym-branch-3' style='color:#000000' id='mc:0,bo:3,bo:15,bo:5'>When sayHey hits whatstosay, it'll go up the Scope Chain</span>
        <ul class="vym-list-ul-4">
          <li><span class='vym-branch-4' style='color:#000000' id='mc:0,bo:3,bo:15,bo:5,bo:0'>What's in memoery for the &quot;lost&quot; execution conext, the variable can still go
down the scope chain.</span>  </li>
          <li><span class='vym-branch-4' style='color:#000000' id='mc:0,bo:3,bo:15,bo:5,bo:1'>It's &quot;closed it&quot; the outer variables.</span>  </li>
          <li><span class='vym-branch-4' style='color:#000000' id='mc:0,bo:3,bo:15,bo:5,bo:2'>Closing in the variables that are needed.</span>  </li>
          <li><span class='vym-branch-4' style='color:#000000' id='mc:0,bo:3,bo:15,bo:5,bo:3'></span>
          <ul class="vym-list-ul-5">
            <li><span class='vym-branch-5' style='color:#000000' id='mc:0,bo:3,bo:15,bo:5,bo:3,bo:0'></span>  </li>
          </ul>  </li>
        </ul>  </li>
        <li><span class='vym-branch-3' style='color:#000000' id='mc:0,bo:3,bo:15,bo:6'><a href="/home/juxley/Pictures/closures.png"><img src="flags/flag-url-16x16.png">Clousres are a feature of JavaScript; it'll do it for you.</a></span>
        <ul class="vym-list-ul-4">
          <li><span class='vym-branch-4' style='color:#000000' id='mc:0,bo:3,bo:15,bo:6,bo:0'>&quot;You&quot; don't create a clousre</span>  </li>
        </ul>  </li>
        <li><span class='vym-branch-3' style='color:#000000' id='mc:0,bo:3,bo:15,bo:7'>You don't need to worry that the outer execution conext is running; it'll have
the variables within scope</span>  </li>
        <li><span class='vym-branch-3' style='color:#000000' id='mc:0,bo:3,bo:15,bo:8'>Classic Example</span>
<table class="vym-note"><tr><td class="vym-note-flag">
<td>
function buildFunctions() {<br/> <br/>  var arr = [];<br/>  <br/>  for (var i = 0; i &lt; 3; i++) {<br/>     arr.push(function() {<br/>        console.log(i);<br/>      });<br/>  }<br/>  return arr;<br/>}<br/><br/><br/>var fs = buildFunctions();<br/>fs[0]();<br/>fs[1]();<br/>fs[2]();
</td></tr></table>

        <ul class="vym-list-ul-4">
          <li><span class='vym-branch-4' style='color:#000000' id='mc:0,bo:3,bo:15,bo:8,bo:0'><a href="/home/juxley/Pictures/closure2.png"><img src="flags/flag-url-16x16.png">pic</a></span>  </li>
          <li><span class='vym-branch-4' style='color:#000000' id='mc:0,bo:3,bo:15,bo:8,bo:1'>What is the value of the PARENT, what is the value of the memory RIGHT NOW, when
the code is being executed.</span>  </li>
          <li><span class='vym-branch-4' style='color:#000000' id='mc:0,bo:3,bo:15,bo:8,bo:2'>Buildfunctions2</span>
<table class="vym-note"><tr><td class="vym-note-flag">
<td>
function buildIIFE() {<br/> <br/>  var arr = [];<br/>  <br/>  for (var i = 0; i &lt; 3; i++) {<br/>    let j = i; // ES6 that allows for a new part in memory per assigned variable<br/>     arr.push(function() {<br/>        console.log(j);<br/>      });<br/>  }<br/>  return arr;<br/>}<br/><br/><br/>var fs2 = buildIIFE();<br/>fs2[0]();<br/>fs2[1]();<br/>fs2[2]();<br/> 
</td></tr></table>
  </li>
          <li><span class='vym-branch-4' style='color:#000000' id='mc:0,bo:3,bo:15,bo:8,bo:3'>IIFE Version</span>
<table class="vym-note"><tr><td class="vym-note-flag">
<td>
<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.0//EN" "http://www.w3.org/TR/REC-html40/strict.dtd">

<p class="vym-note-paragraph"><span style=" font-family:'Droid Sans Mono,monospace,monospace,Droid Sans Fallback'; font-size:14px; color:#0000ff;">function</span><span style=" font-family:'Droid Sans Mono,monospace,monospace,Droid Sans Fallback'; font-size:14px; color:#000000;"> buildIIFE() {</span></pre>
<p class="vym-note-paragraph"><span style=" font-family:'Droid Sans Mono,monospace,monospace,Droid Sans Fallback'; font-size:14px; color:#000000;"> </span></pre>
<p class="vym-note-paragraph"><span style=" font-family:'Droid Sans Mono,monospace,monospace,Droid Sans Fallback'; font-size:14px; color:#000000;">  </span><span style=" font-family:'Droid Sans Mono,monospace,monospace,Droid Sans Fallback'; font-size:14px; color:#0000ff;">var</span><span style=" font-family:'Droid Sans Mono,monospace,monospace,Droid Sans Fallback'; font-size:14px; color:#000000;"> arr = [];</span></pre>
<p class="vym-note-paragraph"><span style=" font-family:'Droid Sans Mono,monospace,monospace,Droid Sans Fallback'; font-size:14px; color:#000000;">  </span></pre>
<p class="vym-note-paragraph"><span style=" font-family:'Droid Sans Mono,monospace,monospace,Droid Sans Fallback'; font-size:14px; color:#000000;">  </span><span style=" font-family:'Droid Sans Mono,monospace,monospace,Droid Sans Fallback'; font-size:14px; color:#0000ff;">for</span><span style=" font-family:'Droid Sans Mono,monospace,monospace,Droid Sans Fallback'; font-size:14px; color:#000000;"> (</span><span style=" font-family:'Droid Sans Mono,monospace,monospace,Droid Sans Fallback'; font-size:14px; color:#0000ff;">var</span><span style=" font-family:'Droid Sans Mono,monospace,monospace,Droid Sans Fallback'; font-size:14px; color:#000000;"> i = </span><span style=" font-family:'Droid Sans Mono,monospace,monospace,Droid Sans Fallback'; font-size:14px; color:#09885a;">0</span><span style=" font-family:'Droid Sans Mono,monospace,monospace,Droid Sans Fallback'; font-size:14px; color:#000000;">; i &lt; </span><span style=" font-family:'Droid Sans Mono,monospace,monospace,Droid Sans Fallback'; font-size:14px; color:#09885a;">3</span><span style=" font-family:'Droid Sans Mono,monospace,monospace,Droid Sans Fallback'; font-size:14px; color:#000000;">; i++) {</span></pre>
<p class="vym-note-paragraph"><span style=" font-family:'Droid Sans Mono,monospace,monospace,Droid Sans Fallback'; font-size:14px; color:#000000;">     arr.push(</span></pre>
<p class="vym-note-paragraph"><span style=" font-family:'Droid Sans Mono,monospace,monospace,Droid Sans Fallback'; font-size:14px; color:#000000;">       (</span><span style=" font-family:'Droid Sans Mono,monospace,monospace,Droid Sans Fallback'; font-size:14px; color:#0000ff;">function</span><span style=" font-family:'Droid Sans Mono,monospace,monospace,Droid Sans Fallback'; font-size:14px; color:#000000;">(j) {</span></pre>
<p class="vym-note-paragraph"><span style=" font-family:'Droid Sans Mono,monospace,monospace,Droid Sans Fallback'; font-size:14px; color:#000000;">          </span><span style=" font-family:'Droid Sans Mono,monospace,monospace,Droid Sans Fallback'; font-size:14px; color:#0000ff;">return</span><span style=" font-family:'Droid Sans Mono,monospace,monospace,Droid Sans Fallback'; font-size:14px; color:#000000;"> </span><span style=" font-family:'Droid Sans Mono,monospace,monospace,Droid Sans Fallback'; font-size:14px; color:#0000ff;">function</span><span style=" font-family:'Droid Sans Mono,monospace,monospace,Droid Sans Fallback'; font-size:14px; color:#000000;">() {</span></pre>
<p class="vym-note-paragraph"><span style=" font-family:'Droid Sans Mono,monospace,monospace,Droid Sans Fallback'; font-size:14px; color:#000000;">             console.log(j);</span></pre>
<p class="vym-note-paragraph"><span style=" font-family:'Droid Sans Mono,monospace,monospace,Droid Sans Fallback'; font-size:14px; color:#000000;">          }</span></pre>
<p class="vym-note-paragraph"><span style=" font-family:'Droid Sans Mono,monospace,monospace,Droid Sans Fallback'; font-size:14px; color:#000000;">          }(i)));</span></pre>
<p class="vym-note-paragraph"><span style=" font-family:'Droid Sans Mono,monospace,monospace,Droid Sans Fallback'; font-size:14px; color:#000000;">    }</span></pre>
<p class="vym-note-paragraph"><span style=" font-family:'Droid Sans Mono,monospace,monospace,Droid Sans Fallback'; font-size:14px; color:#000000;">  </span><span style=" font-family:'Droid Sans Mono,monospace,monospace,Droid Sans Fallback'; font-size:14px; color:#0000ff;">return</span><span style=" font-family:'Droid Sans Mono,monospace,monospace,Droid Sans Fallback'; font-size:14px; color:#000000;"> arr;</span></pre>
<p class="vym-note-paragraph"><span style=" font-family:'Droid Sans Mono,monospace,monospace,Droid Sans Fallback'; font-size:14px; color:#000000;">}</span></pre>
<p class="vym-note-paragraph"><span style=" font-family:'Droid Sans Mono,monospace,monospace,Droid Sans Fallback'; font-size:14px; color:#000000;"><br /></span></p>
<p class="vym-note-paragraph"><span style=" font-family:'Droid Sans Mono,monospace,monospace,Droid Sans Fallback'; font-size:14px; color:#0000ff;">var</span><span style=" font-family:'Droid Sans Mono,monospace,monospace,Droid Sans Fallback'; font-size:14px; color:#000000;"> fs2 = buildIIFE();</span></pre>
<p class="vym-note-paragraph"><span style=" font-family:'Droid Sans Mono,monospace,monospace,Droid Sans Fallback'; font-size:14px; color:#000000;">fs2[</span><span style=" font-family:'Droid Sans Mono,monospace,monospace,Droid Sans Fallback'; font-size:14px; color:#09885a;">0</span><span style=" font-family:'Droid Sans Mono,monospace,monospace,Droid Sans Fallback'; font-size:14px; color:#000000;">]();</span></pre>
<p class="vym-note-paragraph"><span style=" font-family:'Droid Sans Mono,monospace,monospace,Droid Sans Fallback'; font-size:14px; color:#000000;">fs2[</span><span style=" font-family:'Droid Sans Mono,monospace,monospace,Droid Sans Fallback'; font-size:14px; color:#09885a;">1</span><span style=" font-family:'Droid Sans Mono,monospace,monospace,Droid Sans Fallback'; font-size:14px; color:#000000;">]();</span></pre>
<p class="vym-note-paragraph"><span style=" font-family:'Droid Sans Mono,monospace,monospace,Droid Sans Fallback'; font-size:14px; color:#000000;">fs2[</span><span style=" font-family:'Droid Sans Mono,monospace,monospace,Droid Sans Fallback'; font-size:14px; color:#09885a;">2</span><span style=" font-family:'Droid Sans Mono,monospace,monospace,Droid Sans Fallback'; font-size:14px; color:#000000;">]();</span></pre>
<p class="vym-note-paragraph"> </p>
</td></tr></table>
  </li>
        </ul>  </li>
      </ul>  </li>
    </ul>
  

<map name='imagemap'>
  <area shape='rect' coords='1564.07,4260.49,1825.57,4297.49' href='#mc:0'>
  <area shape='rect' coords='1935.26,2737.87,2054.92,2771.87' href='#mc:0,bo:0'>
  <area shape='rect' coords='2075.92,2644.87,2290.18,2674.87' href='#mc:0,bo:0,bo:0'>
  <area shape='rect' coords='2311.18,2646.87,2383.57,2672.87' href='#mc:0,bo:0,bo:0,bo:0'>
  <area shape='rect' coords='2075.92,2715.87,2176.51,2745.87' href='#mc:0,bo:0,bo:1'>
  <area shape='rect' coords='2197.51,2676.87,2413.35,2728.87' href='#mc:0,bo:0,bo:1,bo:0'>
  <area shape='rect' coords='2197.51,2730.87,2254.84,2756.87' href='#mc:0,bo:0,bo:1,bo:1'>
  <area shape='rect' coords='2197.51,2758.87,2246.34,2784.87' href='#mc:0,bo:0,bo:1,bo:2'>
  <area shape='rect' coords='2075.92,2810.87,2170.9,2840.87' href='#mc:0,bo:0,bo:2'>
  <area shape='rect' coords='2191.9,2786.87,2447.23,2864.87' href='#mc:0,bo:0,bo:2,bo:0'>
  <area shape='rect' coords='1992.44,4502.06,2373.73,4536.06' href='#mc:0,bo:1'>
  <area shape='rect' coords='2394.73,3159.06,2484.17,3189.06' href='#mc:0,bo:1,bo:0'>
  <area shape='rect' coords='2505.17,2971.06,2622.59,2997.06' href='#mc:0,bo:1,bo:0,bo:0'>
  <area shape='rect' coords='2643.59,2902.06,2801.14,2928.06' href='#mc:0,bo:1,bo:0,bo:0,bo:0'>
  <area shape='rect' coords='2643.59,2957.06,2768.87,2983.06' href='#mc:0,bo:1,bo:0,bo:0,bo:1'>
  <area shape='rect' coords='2789.87,2930.06,2989.69,2956.06' href='#mc:0,bo:1,bo:0,bo:0,bo:1,bo:0'>
  <area shape='rect' coords='2789.87,2958.06,3040.14,3010.06' href='#mc:0,bo:1,bo:0,bo:0,bo:1,bo:1'>
  <area shape='rect' coords='2643.59,3012.06,2871.76,3038.06' href='#mc:0,bo:1,bo:0,bo:0,bo:2'>
  <area shape='rect' coords='2643.59,3040.06,2815.26,3066.06' href='#mc:0,bo:1,bo:0,bo:0,bo:3'>
  <area shape='rect' coords='2505.17,3122.06,2623.55,3148.06' href='#mc:0,bo:1,bo:0,bo:1'>
  <area shape='rect' coords='2644.55,3068.06,2903.3,3120.06' href='#mc:0,bo:1,bo:0,bo:1,bo:0'>
  <area shape='rect' coords='2644.55,3122.06,2878.84,3174.06' href='#mc:0,bo:1,bo:0,bo:1,bo:1'>
  <area shape='rect' coords='2644.55,3176.06,2859,3202.06' href='#mc:0,bo:1,bo:0,bo:1,bo:2'>
  <area shape='rect' coords='2505.17,3258.06,2628.08,3284.06' href='#mc:0,bo:1,bo:0,bo:2'>
  <area shape='rect' coords='2649.08,3204.06,2912.59,3256.06' href='#mc:0,bo:1,bo:0,bo:2,bo:0'>
  <area shape='rect' coords='2649.08,3258.06,2907.31,3284.06' href='#mc:0,bo:1,bo:0,bo:2,bo:1'>
  <area shape='rect' coords='2649.08,3286.06,2901.94,3338.06' href='#mc:0,bo:1,bo:0,bo:2,bo:2'>
  <area shape='rect' coords='2505.17,3380.06,2597.56,3406.06' href='#mc:0,bo:1,bo:0,bo:3'>
  <area shape='rect' coords='2618.56,3340.06,2890.01,3418.06' href='#mc:0,bo:1,bo:0,bo:3,bo:0'>
  <area shape='rect' coords='2618.56,3420.06,2796.22,3446.06' href='#mc:0,bo:1,bo:0,bo:3,bo:1'>
  <area shape='rect' coords='2394.73,3640.06,2680.5,3670.06' href='#mc:0,bo:1,bo:1'>
  <area shape='rect' coords='2701.5,3449.06,2960.2,3501.06' href='#mc:0,bo:1,bo:1,bo:0'>
  <area shape='rect' coords='2981.2,3448.06,3011.48,3474.06' href='#mc:0,bo:1,bo:1,bo:0,bo:0'>
  <area shape='rect' coords='2981.2,3476.06,3069.28,3502.06' href='#mc:0,bo:1,bo:1,bo:0,bo:1'>
  <area shape='rect' coords='2701.5,3573.06,2836.87,3599.06' href='#mc:0,bo:1,bo:1,bo:1'>
  <area shape='rect' coords='2857.87,3504.06,2888.15,3530.06' href='#mc:0,bo:1,bo:1,bo:1,bo:0'>
  <area shape='rect' coords='2857.87,3532.06,2914.4,3558.06' href='#mc:0,bo:1,bo:1,bo:1,bo:1'>
  <area shape='rect' coords='2857.87,3560.06,3076.19,3612.06' href='#mc:0,bo:1,bo:1,bo:1,bo:2'>
  <area shape='rect' coords='3097.19,3573.06,3305.8,3599.06' href='#mc:0,bo:1,bo:1,bo:1,bo:2,bo:0'>
  <area shape='rect' coords='2857.87,3614.06,3010.03,3640.06' href='#mc:0,bo:1,bo:1,bo:1,bo:3'>
  <area shape='rect' coords='2857.87,3642.06,3054.39,3668.06' href='#mc:0,bo:1,bo:1,bo:1,bo:4'>
  <area shape='rect' coords='2701.5,3697.06,2882.39,3723.06' href='#mc:0,bo:1,bo:1,bo:2'>
  <area shape='rect' coords='2903.39,3670.06,3135.3,3722.06' href='#mc:0,bo:1,bo:1,bo:2,bo:0'>
  <area shape='rect' coords='2903.39,3724.06,2990.89,3750.06' href='#mc:0,bo:1,bo:1,bo:2,bo:1'>
  <area shape='rect' coords='2701.5,3794.06,2753.14,3820.06' href='#mc:0,bo:1,bo:1,bo:3'>
  <area shape='rect' coords='2774.14,3794.06,2885.31,3820.06' href='#mc:0,bo:1,bo:1,bo:3,bo:0'>
  <area shape='rect' coords='2906.31,3752.06,2996.67,3778.06' href='#mc:0,bo:1,bo:1,bo:3,bo:0,bo:0'>
  <area shape='rect' coords='2906.31,3780.06,2936.59,3806.06' href='#mc:0,bo:1,bo:1,bo:3,bo:0,bo:1'>
  <area shape='rect' coords='2906.31,3808.06,2962.84,3834.06' href='#mc:0,bo:1,bo:1,bo:3,bo:0,bo:2'>
  <area shape='rect' coords='2906.31,3836.06,2975.37,3862.06' href='#mc:0,bo:1,bo:1,bo:3,bo:0,bo:3'>
  <area shape='rect' coords='2394.73,4013.06,2653.97,4073.06' href='#mc:0,bo:1,bo:2'>
  <area shape='rect' coords='2674.97,3864.06,2734.06,3890.06' href='#mc:0,bo:1,bo:2,bo:0'>
  <area shape='rect' coords='2674.97,3892.06,2967.5,3918.06' href='#mc:0,bo:1,bo:2,bo:1'>
  <area shape='rect' coords='2988.5,3892.06,3210.56,3918.06' href='#mc:0,bo:1,bo:2,bo:1,bo:0'>
  <area shape='rect' coords='2674.97,3975.06,2793.61,4001.06' href='#mc:0,bo:1,bo:2,bo:2'>
  <area shape='rect' coords='2814.61,3920.06,2904.97,3946.06' href='#mc:0,bo:1,bo:2,bo:2,bo:0'>
  <area shape='rect' coords='2814.61,3948.06,2844.89,3974.06' href='#mc:0,bo:1,bo:2,bo:2,bo:1'>
  <area shape='rect' coords='2814.61,3976.06,2917.14,4002.06' href='#mc:0,bo:1,bo:2,bo:2,bo:2'>
  <area shape='rect' coords='2814.61,4004.06,3059.42,4056.06' href='#mc:0,bo:1,bo:2,bo:2,bo:3'>
  <area shape='rect' coords='3080.42,4004.06,3334.44,4056.06' href='#mc:0,bo:1,bo:2,bo:2,bo:3,bo:0'>
  <area shape='rect' coords='2696.97,4100.06,2791.87,4126.06' href='#mc:0,bo:1,bo:2,bo:3'>
  <area shape='rect' coords='2812.87,4058.06,3008.69,4084.06' href='#mc:0,bo:1,bo:2,bo:3,bo:0'>
  <area shape='rect' coords='2812.87,4086.06,3057.81,4112.06' href='#mc:0,bo:1,bo:2,bo:3,bo:1'>
  <area shape='rect' coords='2812.87,4114.06,2983.45,4140.06' href='#mc:0,bo:1,bo:2,bo:3,bo:2'>
  <area shape='rect' coords='2812.87,4142.06,2955.28,4168.06' href='#mc:0,bo:1,bo:2,bo:3,bo:3'>
  <area shape='rect' coords='2674.97,4170.06,2900.11,4222.06' href='#mc:0,bo:1,bo:2,bo:4'>
  <area shape='rect' coords='2394.73,4236.06,2614.2,4266.06' href='#mc:0,bo:1,bo:3'>
  <area shape='rect' coords='2635.2,4224.06,2806.3,4250.06' href='#mc:0,bo:1,bo:3,bo:0'>
  <area shape='rect' coords='2635.2,4252.06,2857.42,4278.06' href='#mc:0,bo:1,bo:3,bo:1'>
  <area shape='rect' coords='2394.73,4372.06,2647.22,4432.06' href='#mc:0,bo:1,bo:4'>
  <area shape='rect' coords='2668.22,4280.06,2857.86,4306.06' href='#mc:0,bo:1,bo:4,bo:0'>
  <area shape='rect' coords='2690.22,4348.06,2785.12,4374.06' href='#mc:0,bo:1,bo:4,bo:1'>
  <area shape='rect' coords='2806.12,4308.06,3052.78,4386.06' href='#mc:0,bo:1,bo:4,bo:1,bo:0'>
  <area shape='rect' coords='2806.12,4388.06,3028.37,4414.06' href='#mc:0,bo:1,bo:4,bo:1,bo:1'>
  <area shape='rect' coords='2668.22,4416.06,2885,4468.06' href='#mc:0,bo:1,bo:4,bo:2'>
  <area shape='rect' coords='2668.22,4484.06,2810.73,4510.06' href='#mc:0,bo:1,bo:4,bo:3'>
  <area shape='rect' coords='2831.73,4470.06,2964.19,4496.06' href='#mc:0,bo:1,bo:4,bo:3,bo:0'>
  <area shape='rect' coords='2831.73,4498.06,3053.22,4524.06' href='#mc:0,bo:1,bo:4,bo:3,bo:1'>
  <area shape='rect' coords='2394.73,4577.06,2667.28,4637.06' href='#mc:0,bo:1,bo:5'>
  <area shape='rect' coords='2688.28,4540.06,2947.84,4592.06' href='#mc:0,bo:1,bo:5,bo:0'>
  <area shape='rect' coords='2968.84,4526.06,3124.65,4552.06' href='#mc:0,bo:1,bo:5,bo:0,bo:0'>
  <area shape='rect' coords='2968.84,4554.06,3216.81,4606.06' href='#mc:0,bo:1,bo:5,bo:0,bo:1'>
  <area shape='rect' coords='2688.28,4635.06,2886.69,4661.06' href='#mc:0,bo:1,bo:5,bo:1'>
  <area shape='rect' coords='2907.69,4608.06,2998.06,4634.06' href='#mc:0,bo:1,bo:5,bo:1,bo:0'>
  <area shape='rect' coords='2907.69,4636.06,3151.92,4688.06' href='#mc:0,bo:1,bo:5,bo:1,bo:1'>
  <area shape='rect' coords='2394.73,4852.06,2705.42,4882.06' href='#mc:0,bo:1,bo:6'>
  <area shape='rect' coords='2726.42,4690.06,2947.62,4716.06' href='#mc:0,bo:1,bo:6,bo:0'>
  <area shape='rect' coords='2748.42,4718.06,2843.33,4744.06' href='#mc:0,bo:1,bo:6,bo:1'>
  <area shape='rect' coords='2726.42,4855.06,2748.42,4877.06' href='file:///home/juxley/Pictures/executionstack.png'>
  <area shape='rect' coords='2748.42,4855.06,2851.53,4881.06' href='#mc:0,bo:1,bo:6,bo:2'>
  <area shape='rect' coords='2872.53,4760.06,3070.31,4786.06' href='#mc:0,bo:1,bo:6,bo:2,bo:0'>
  <area shape='rect' coords='3091.31,4746.06,3137.4,4772.06' href='#mc:0,bo:1,bo:6,bo:2,bo:0,bo:0'>
  <area shape='rect' coords='3091.31,4774.06,3158.76,4800.06' href='#mc:0,bo:1,bo:6,bo:2,bo:0,bo:1'>
  <area shape='rect' coords='2872.53,4843.06,3048.23,4869.06' href='#mc:0,bo:1,bo:6,bo:2,bo:1'>
  <area shape='rect' coords='3069.23,4829.06,3128.4,4855.06' href='#mc:0,bo:1,bo:6,bo:2,bo:1,bo:0'>
  <area shape='rect' coords='3149.4,4802.06,3322.01,4828.06' href='#mc:0,bo:1,bo:6,bo:2,bo:1,bo:0,bo:0'>
  <area shape='rect' coords='3149.4,4830.06,3397.62,4882.06' href='#mc:0,bo:1,bo:6,bo:2,bo:1,bo:0,bo:1'>
  <area shape='rect' coords='3069.23,4884.06,3131.01,4910.06' href='#mc:0,bo:1,bo:6,bo:2,bo:1,bo:1'>
  <area shape='rect' coords='2872.53,4912.06,3119.62,4990.06' href='#mc:0,bo:1,bo:6,bo:2,bo:2'>
  <area shape='rect' coords='2726.42,4992.06,2935.97,5044.06' href='#mc:0,bo:1,bo:6,bo:3'>
  <area shape='rect' coords='2956.97,4992.06,3164.8,5044.06' href='#mc:0,bo:1,bo:6,bo:3,bo:0'>
  <area shape='rect' coords='2394.73,5099.06,2710.67,5129.06' href='#mc:0,bo:1,bo:7'>
  <area shape='rect' coords='2731.67,5101.06,2863.23,5127.06' href='#mc:0,bo:1,bo:7,bo:0'>
  <area shape='rect' coords='2884.23,5046.06,3136.97,5072.06' href='#mc:0,bo:1,bo:7,bo:0,bo:0'>
  <area shape='rect' coords='2884.23,5074.06,3026.12,5100.06' href='#mc:0,bo:1,bo:7,bo:0,bo:1'>
  <area shape='rect' coords='2884.23,5102.06,3120.22,5154.06' href='#mc:0,bo:1,bo:7,bo:0,bo:2'>
  <area shape='rect' coords='2906.23,5156.06,3001.14,5182.06' href='#mc:0,bo:1,bo:7,bo:0,bo:3'>
  <area shape='rect' coords='3022.14,5156.06,3262.7,5182.06' href='#mc:0,bo:1,bo:7,bo:0,bo:3,bo:0'>
  <area shape='rect' coords='2394.73,5345.06,2526.81,5375.06' href='#mc:0,bo:1,bo:8'>
  <area shape='rect' coords='2569.81,5184.06,2675.51,5210.06' href='#mc:0,bo:1,bo:8,bo:0'>
  <area shape='rect' coords='2547.81,5240.06,2569.81,5262.06' href='file:///home/juxley/Pictures/scopechain1.png'>
  <area shape='rect' coords='2569.81,5240.06,2804.9,5318.06' href='#mc:0,bo:1,bo:8,bo:1'>
  <area shape='rect' coords='2825.9,5212.06,2908.08,5238.06' href='#mc:0,bo:1,bo:8,bo:1,bo:0'>
  <area shape='rect' coords='2825.9,5240.06,3065.67,5292.06' href='#mc:0,bo:1,bo:8,bo:1,bo:1'>
  <area shape='rect' coords='2825.9,5307.06,3072.48,5333.06' href='#mc:0,bo:1,bo:8,bo:1,bo:2'>
  <area shape='rect' coords='3093.48,5307.06,3216.39,5333.06' href='#mc:0,bo:1,bo:8,bo:1,bo:2,bo:0'>
  <area shape='rect' coords='3237.39,5294.06,3475.36,5346.06' href='#mc:0,bo:1,bo:8,bo:1,bo:2,bo:0,bo:0'>
  <area shape='rect' coords='2547.81,5348.06,2792.4,5400.06' href='#mc:0,bo:1,bo:8,bo:2'>
  <area shape='rect' coords='2547.81,5402.06,2786.12,5454.06' href='#mc:0,bo:1,bo:8,bo:3'>
  <area shape='rect' coords='2547.81,5456.06,2672.44,5482.06' href='#mc:0,bo:1,bo:8,bo:4'>
  <area shape='rect' coords='2715.44,5456.06,2821.14,5482.06' href='#mc:0,bo:1,bo:8,bo:4,bo:0'>
  <area shape='rect' coords='2547.81,5484.06,2735.33,5536.06' href='#mc:0,bo:1,bo:8,bo:5'>
  <area shape='rect' coords='2394.73,5617.06,2510.31,5647.06' href='#mc:0,bo:1,bo:9'>
  <area shape='rect' coords='2531.31,5551.06,2769.76,5577.06' href='#mc:0,bo:1,bo:9,bo:0'>
  <area shape='rect' coords='2790.76,5538.06,3025.61,5590.06' href='#mc:0,bo:1,bo:9,bo:0,bo:0'>
  <area shape='rect' coords='3046.61,5551.06,3061.36,5577.06' href='#mc:0,bo:1,bo:9,bo:0,bo:0,bo:0'>
  <area shape='rect' coords='2531.31,5646.06,2661.61,5672.06' href='#mc:0,bo:1,bo:9,bo:1'>
  <area shape='rect' coords='2682.61,5646.06,2898.58,5672.06' href='#mc:0,bo:1,bo:9,bo:1,bo:0'>
  <area shape='rect' coords='2919.58,5592.06,3011.42,5618.06' href='#mc:0,bo:1,bo:9,bo:1,bo:0,bo:0'>
  <area shape='rect' coords='2919.58,5620.06,3133.55,5672.06' href='#mc:0,bo:1,bo:9,bo:1,bo:0,bo:1'>
  <area shape='rect' coords='2919.58,5674.06,3144.9,5726.06' href='#mc:0,bo:1,bo:9,bo:1,bo:0,bo:2'>
  <area shape='rect' coords='2394.73,5917.06,2583.62,5947.06' href='#mc:0,bo:1,bo:10'>
  <area shape='rect' coords='2604.62,5728.06,2759.7,5754.06' href='#mc:0,bo:1,bo:10,bo:0'>
  <area shape='rect' coords='2604.62,5838.06,2690.72,5864.06' href='#mc:0,bo:1,bo:10,bo:1'>
  <area shape='rect' coords='2711.72,5756.06,2974.19,5808.06' href='#mc:0,bo:1,bo:10,bo:1,bo:0'>
  <area shape='rect' coords='2711.72,5810.06,2958.2,5836.06' href='#mc:0,bo:1,bo:10,bo:1,bo:1'>
  <area shape='rect' coords='2979.2,5810.06,3054.94,5836.06' href='#mc:0,bo:1,bo:10,bo:1,bo:1,bo:0'>
  <area shape='rect' coords='2711.72,5879.06,2783.03,5905.06' href='#mc:0,bo:1,bo:10,bo:1,bo:2'>
  <area shape='rect' coords='2804.03,5838.06,3018.97,5890.06' href='#mc:0,bo:1,bo:10,bo:1,bo:2,bo:0'>
  <area shape='rect' coords='2804.03,5892.06,2973.34,5918.06' href='#mc:0,bo:1,bo:10,bo:1,bo:2,bo:1'>
  <area shape='rect' coords='2804.03,5920.06,2985.31,5946.06' href='#mc:0,bo:1,bo:10,bo:1,bo:2,bo:2'>
  <area shape='rect' coords='2604.62,5948.06,2707.73,5974.06' href='#mc:0,bo:1,bo:10,bo:2'>
  <area shape='rect' coords='2626.62,6016.06,2721.53,6042.06' href='#mc:0,bo:1,bo:10,bo:3'>
  <area shape='rect' coords='2742.53,5976.06,2951.19,6002.06' href='#mc:0,bo:1,bo:10,bo:3,bo:0'>
  <area shape='rect' coords='2742.53,6004.06,2979.15,6082.06' href='#mc:0,bo:1,bo:10,bo:3,bo:1'>
  <area shape='rect' coords='3000.15,6017.06,3219.84,6069.06' href='#mc:0,bo:1,bo:10,bo:3,bo:1,bo:0'>
  <area shape='rect' coords='2604.62,6084.06,2846.08,6136.06' href='#mc:0,bo:1,bo:10,bo:4'>
  <area shape='rect' coords='2867.08,6084.06,3116.62,6136.06' href='#mc:0,bo:1,bo:10,bo:4,bo:0'>
  <area shape='rect' coords='1667.82,1265,1862.1,1299' href='#mc:0,bo:2'>
  <area shape='rect' coords='1464.68,76,1646.82,106' href='#mc:0,bo:2,bo:0'>
  <area shape='rect' coords='1338.1,37,1443.68,63' href='#mc:0,bo:2,bo:0,bo:0'>
  <area shape='rect' coords='1087.48,11,1317.1,89' href='#mc:0,bo:2,bo:0,bo:0,bo:0'>
  <area shape='rect' coords='1357.88,118,1443.68,144' href='#mc:0,bo:2,bo:0,bo:1'>
  <area shape='rect' coords='1106.02,91,1336.88,143' href='#mc:0,bo:2,bo:0,bo:1,bo:0'>
  <area shape='rect' coords='1165.63,145,1336.88,171' href='#mc:0,bo:2,bo:0,bo:1,bo:1'>
  <area shape='rect' coords='1523.43,323,1646.82,353' href='#mc:0,bo:2,bo:1'>
  <area shape='rect' coords='1410.56,173,1502.43,199' href='#mc:0,bo:2,bo:1,bo:0'>
  <area shape='rect' coords='1412.51,201,1502.43,227' href='#mc:0,bo:2,bo:1,bo:1'>
  <area shape='rect' coords='1360.92,353,1502.43,379' href='#mc:0,bo:2,bo:1,bo:2'>
  <area shape='rect' coords='1267.92,242,1339.92,268' href='#mc:0,bo:2,bo:1,bo:2,bo:0'>
  <area shape='rect' coords='1022.81,229,1246.92,281' href='#mc:0,bo:2,bo:1,bo:2,bo:0,bo:0'>
  <area shape='rect' coords='1307.32,296,1339.92,322' href='#mc:0,bo:2,bo:1,bo:2,bo:1'>
  <area shape='rect' coords='1035.87,283,1286.32,335' href='#mc:0,bo:2,bo:1,bo:2,bo:1,bo:0'>
  <area shape='rect' coords='1281.77,351,1339.92,377' href='#mc:0,bo:2,bo:1,bo:2,bo:2'>
  <area shape='rect' coords='1227.37,337,1260.77,363' href='#mc:0,bo:2,bo:1,bo:2,bo:2,bo:0'>
  <area shape='rect' coords='1224.13,365,1260.77,391' href='#mc:0,bo:2,bo:1,bo:2,bo:2,bo:1'>
  <area shape='rect' coords='1280.2,407,1339.92,433' href='#mc:0,bo:2,bo:1,bo:2,bo:3'>
  <area shape='rect' coords='1115.67,393,1259.2,419' href='#mc:0,bo:2,bo:1,bo:2,bo:3,bo:0'>
  <area shape='rect' coords='1028.67,421,1259.2,447' href='#mc:0,bo:2,bo:1,bo:2,bo:3,bo:1'>
  <area shape='rect' coords='1295.38,449,1339.92,475' href='#mc:0,bo:2,bo:1,bo:2,bo:4'>
  <area shape='rect' coords='1166.37,449,1274.38,475' href='#mc:0,bo:2,bo:1,bo:2,bo:4,bo:0'>
  <area shape='rect' coords='1286.84,477,1339.92,503' href='#mc:0,bo:2,bo:1,bo:2,bo:5'>
  <area shape='rect' coords='1236.87,477,1265.84,503' href='#mc:0,bo:2,bo:1,bo:2,bo:5,bo:0'>
  <area shape='rect' coords='1423.95,639,1646.82,669' href='#mc:0,bo:2,bo:2'>
  <area shape='rect' coords='1216.99,505,1402.95,557' href='#mc:0,bo:2,bo:2,bo:0'>
  <area shape='rect' coords='1165.77,559,1402.95,611' href='#mc:0,bo:2,bo:2,bo:1'>
  <area shape='rect' coords='1336.95,641,1402.95,667' href='#mc:0,bo:2,bo:2,bo:2'>
  <area shape='rect' coords='1177.42,613,1315.95,639' href='#mc:0,bo:2,bo:2,bo:2,bo:0'>
  <area shape='rect' coords='1256.26,641,1315.95,667' href='#mc:0,bo:2,bo:2,bo:2,bo:1'>
  <area shape='rect' coords='1226.24,669,1315.95,695' href='#mc:0,bo:2,bo:2,bo:2,bo:2'>
  <area shape='rect' coords='1181.51,697,1402.95,749' href='#mc:0,bo:2,bo:2,bo:3'>
  <area shape='rect' coords='1179.24,751,1402.95,803' href='#mc:0,bo:2,bo:2,bo:4'>
  <area shape='rect' coords='1348.54,966,1646.82,996' href='#mc:0,bo:2,bo:3'>
  <area shape='rect' coords='1189.4,833,1327.54,859' href='#mc:0,bo:2,bo:3,bo:0'>
  <area shape='rect' coords='963.556,805,1168.4,831' href='#mc:0,bo:2,bo:3,bo:0,bo:0'>
  <area shape='rect' coords='1011.35,833,1168.4,859' href='#mc:0,bo:2,bo:3,bo:0,bo:1'>
  <area shape='rect' coords='915.368,861,1168.4,887' href='#mc:0,bo:2,bo:3,bo:0,bo:2'>
  <area shape='rect' coords='1185.56,942,1327.54,968' href='#mc:0,bo:2,bo:3,bo:1'>
  <area shape='rect' coords='934.603,889,1164.56,941' href='#mc:0,bo:2,bo:3,bo:1,bo:0'>
  <area shape='rect' coords='912.884,943,1164.56,1021' href='#mc:0,bo:2,bo:3,bo:1,bo:1'>
  <area shape='rect' coords='809.775,1023,831.775,1045' href='file:///home/juxley/Documents/Websites/Operator-Precedence-In-Javascript.pdf'>
  <area shape='rect' coords='831.775,1023,1327.54,1049' href='#mc:0,bo:2,bo:3,bo:2'>
  <area shape='rect' coords='1096.54,1051,1327.54,1103' href='#mc:0,bo:2,bo:3,bo:3'>
  <area shape='rect' coords='1108.07,1105,1327.54,1157' href='#mc:0,bo:2,bo:3,bo:4'>
  <area shape='rect' coords='1433.81,1348,1646.82,1378' href='#mc:0,bo:2,bo:4'>
  <area shape='rect' coords='1185.18,1159,1412.81,1211' href='#mc:0,bo:2,bo:4,bo:0'>
  <area shape='rect' coords='1298.06,1213,1412.81,1239' href='#mc:0,bo:2,bo:4,bo:1'>
  <area shape='rect' coords='1375.79,1241,1412.81,1267' href='#mc:0,bo:2,bo:4,bo:2'>
  <area shape='rect' coords='1339.37,1241,1354.79,1267' href='#mc:0,bo:2,bo:4,bo:2,bo:0'>
  <area shape='rect' coords='1365.2,1324,1412.81,1350' href='#mc:0,bo:2,bo:4,bo:3'>
  <area shape='rect' coords='1321.35,1269,1344.2,1295' href='#mc:0,bo:2,bo:4,bo:3,bo:0'>
  <area shape='rect' coords='1143.27,1297,1344.2,1323' href='#mc:0,bo:2,bo:4,bo:3,bo:1'>
  <area shape='rect' coords='1084.2,1325,1344.2,1377' href='#mc:0,bo:2,bo:4,bo:3,bo:2'>
  <area shape='rect' coords='1157.54,1379,1344.2,1405' href='#mc:0,bo:2,bo:4,bo:3,bo:3'>
  <area shape='rect' coords='1054.29,1379,1136.54,1405' href='#mc:0,bo:2,bo:4,bo:3,bo:3,bo:0'>
  <area shape='rect' coords='1186.63,1407,1412.81,1459' href='#mc:0,bo:2,bo:4,bo:4'>
  <area shape='rect' coords='1011.76,1420,1165.63,1446' href='#mc:0,bo:2,bo:4,bo:4,bo:0'>
  <area shape='rect' coords='1159.85,1461,1412.81,1513' href='#mc:0,bo:2,bo:4,bo:5'>
  <area shape='rect' coords='1173.98,1515,1412.81,1567' href='#mc:0,bo:2,bo:4,bo:6'>
  <area shape='rect' coords='1466.7,1733,1646.82,1763' href='#mc:0,bo:2,bo:5'>
  <area shape='rect' coords='1380.34,1569,1445.7,1595' href='#mc:0,bo:2,bo:5,bo:0'>
  <area shape='rect' coords='1325.93,1569,1359.34,1595' href='#mc:0,bo:2,bo:5,bo:0,bo:0'>
  <area shape='rect' coords='1387.09,1597,1445.7,1623' href='#mc:0,bo:2,bo:5,bo:1'>
  <area shape='rect' coords='1332.68,1597,1366.09,1623' href='#mc:0,bo:2,bo:5,bo:1,bo:0'>
  <area shape='rect' coords='1248.88,1625,1445.7,1651' href='#mc:0,bo:2,bo:5,bo:2'>
  <area shape='rect' coords='1414.95,1653,1445.7,1679' href='#mc:0,bo:2,bo:5,bo:3'>
  <area shape='rect' coords='1174.42,1653,1393.95,1679' href='#mc:0,bo:2,bo:5,bo:3,bo:0'>
  <area shape='rect' coords='1410.67,1681,1445.7,1707' href='#mc:0,bo:2,bo:5,bo:4'>
  <area shape='rect' coords='1262.76,1681,1389.67,1707' href='#mc:0,bo:2,bo:5,bo:4,bo:0'>
  <area shape='rect' coords='1385.93,1709,1445.7,1735' href='#mc:0,bo:2,bo:5,bo:5'>
  <area shape='rect' coords='1247.31,1792,1445.7,1844' href='#mc:0,bo:2,bo:5,bo:6'>
  <area shape='rect' coords='1012.68,1737,1226.31,1789' href='#mc:0,bo:2,bo:5,bo:6,bo:0'>
  <area shape='rect' coords='1119.49,1791,1226.31,1817' href='#mc:0,bo:2,bo:5,bo:6,bo:1'>
  <area shape='rect' coords='1112.07,1819,1226.31,1845' href='#mc:0,bo:2,bo:5,bo:6,bo:2'>
  <area shape='rect' coords='989.759,1847,1226.31,1899' href='#mc:0,bo:2,bo:5,bo:6,bo:3'>
  <area shape='rect' coords='1329.31,1901,1351.31,1923' href='/home/juxley/Documents/Mind Maps/Equalty-Comparison-And-Sameness.pdf'>
  <area shape='rect' coords='1351.31,1901,1445.7,1927' href='#mc:0,bo:2,bo:5,bo:7'>
  <area shape='rect' coords='1486.59,1968,1646.82,1998' href='#mc:0,bo:2,bo:6'>
  <area shape='rect' coords='1226.95,1943,1465.59,1995' href='#mc:0,bo:2,bo:6,bo:0'>
  <area shape='rect' coords='951.915,1929,1205.95,1981' href='#mc:0,bo:2,bo:6,bo:0,bo:0'>
  <area shape='rect' coords='978.134,1983,1205.95,2009' href='#mc:0,bo:2,bo:6,bo:0,bo:1'>
  <area shape='rect' coords='1370.68,2011,1465.59,2037' href='#mc:0,bo:2,bo:6,bo:1'>
  <area shape='rect' coords='1530.63,2145,1646.82,2175' href='#mc:0,bo:2,bo:7'>
  <area shape='rect' coords='1414.73,2079,1509.63,2105' href='#mc:0,bo:2,bo:7,bo:0'>
  <area shape='rect' coords='1113.4,2039,1371.73,2091' href='#mc:0,bo:2,bo:7,bo:0,bo:0'>
  <area shape='rect' coords='1146.82,2093,1371.73,2145' href='#mc:0,bo:2,bo:7,bo:0,bo:1'>
  <area shape='rect' coords='1292.52,2147,1509.63,2199' href='#mc:0,bo:2,bo:7,bo:1'>
  <area shape='rect' coords='1305.92,2201,1509.63,2227' href='#mc:0,bo:2,bo:7,bo:2'>
  <area shape='rect' coords='1275.2,2242,1509.63,2268' href='#mc:0,bo:2,bo:7,bo:3'>
  <area shape='rect' coords='1030.62,2229,1254.2,2281' href='#mc:0,bo:2,bo:7,bo:3,bo:0'>
  <area shape='rect' coords='1508.87,2403,1646.82,2433' href='#mc:0,bo:2,bo:8'>
  <area shape='rect' coords='1255.54,2283,1487.87,2335' href='#mc:0,bo:2,bo:8,bo:0'>
  <area shape='rect' coords='1422.71,2378,1487.87,2404' href='#mc:0,bo:2,bo:8,bo:1'>
  <area shape='rect' coords='1165.95,2337,1401.71,2363' href='#mc:0,bo:2,bo:8,bo:1,bo:0'>
  <area shape='rect' coords='1224.4,2365,1401.71,2391' href='#mc:0,bo:2,bo:8,bo:1,bo:1'>
  <area shape='rect' coords='1183.23,2393,1401.71,2445' href='#mc:0,bo:2,bo:8,bo:1,bo:2'>
  <area shape='rect' coords='1234.76,2474,1487.87,2526' href='#mc:0,bo:2,bo:8,bo:2'>
  <area shape='rect' coords='955.228,2447,1213.76,2499' href='#mc:0,bo:2,bo:8,bo:2,bo:0'>
  <area shape='rect' coords='981.04,2501,1213.76,2553' href='#mc:0,bo:2,bo:8,bo:2,bo:1'>
  <area shape='rect' coords='1245.2,5385.01,1450.77,5419.01' href='#mc:0,bo:3'>
  <area shape='rect' coords='1069.5,2692.01,1224.2,2722.01' href='#mc:0,bo:3,bo:0'>
  <area shape='rect' coords='928.812,2555.01,1048.5,2581.01' href='#mc:0,bo:3,bo:0,bo:0'>
  <area shape='rect' coords='978.391,2639.01,1048.5,2665.01' href='#mc:0,bo:3,bo:0,bo:1'>
  <area shape='rect' coords='794.547,2583.01,957.391,2609.01' href='#mc:0,bo:3,bo:0,bo:1,bo:0'>
  <area shape='rect' coords='570.391,2583.01,773.547,2609.01' href='#mc:0,bo:3,bo:0,bo:1,bo:0,bo:0'>
  <area shape='rect' coords='719.703,2611.01,957.391,2637.01' href='#mc:0,bo:3,bo:0,bo:1,bo:1'>
  <area shape='rect' coords='807.078,2639.01,957.391,2665.01' href='#mc:0,bo:3,bo:0,bo:1,bo:2'>
  <area shape='rect' coords='733.297,2667.01,957.391,2693.01' href='#mc:0,bo:3,bo:0,bo:1,bo:3'>
  <area shape='rect' coords='733.234,2695.01,957.391,2721.01' href='#mc:0,bo:3,bo:0,bo:1,bo:4'>
  <area shape='rect' coords='983.625,2778.01,1048.5,2804.01' href='#mc:0,bo:3,bo:0,bo:2'>
  <area shape='rect' coords='786.5,2723.01,962.625,2749.01' href='#mc:0,bo:3,bo:0,bo:2,bo:0'>
  <area shape='rect' coords='575.672,2723.01,765.5,2749.01' href='#mc:0,bo:3,bo:0,bo:2,bo:0,bo:0'>
  <area shape='rect' coords='859.812,2765.01,962.625,2791.01' href='#mc:0,bo:3,bo:0,bo:2,bo:1'>
  <area shape='rect' coords='784.328,2751.01,838.812,2777.01' href='#mc:0,bo:3,bo:0,bo:2,bo:1,bo:0'>
  <area shape='rect' coords='725.688,2779.01,838.812,2805.01' href='#mc:0,bo:3,bo:0,bo:2,bo:1,bo:1'>
  <area shape='rect' coords='720.141,2807.01,962.625,2859.01' href='#mc:0,bo:3,bo:0,bo:2,bo:2'>
  <area shape='rect' coords='1108.66,2941.01,1224.2,2971.01' href='#mc:0,bo:3,bo:1'>
  <area shape='rect' coords='870.75,2861.01,1087.66,2913.01' href='#mc:0,bo:3,bo:1,bo:0'>
  <area shape='rect' coords='858.141,2915.01,1087.66,2941.01' href='#mc:0,bo:3,bo:1,bo:1'>
  <area shape='rect' coords='994.719,2943.01,1087.66,2969.01' href='#mc:0,bo:3,bo:1,bo:2'>
  <area shape='rect' coords='832.344,2971.01,1087.66,2997.01' href='#mc:0,bo:3,bo:1,bo:3'>
  <area shape='rect' coords='801.906,2999.01,1043.66,3051.01' href='#mc:0,bo:3,bo:1,bo:4'>
  <area shape='rect' coords='928.078,3173.01,1224.2,3203.01' href='#mc:0,bo:3,bo:2'>
  <area shape='rect' coords='821.188,3053.01,907.078,3079.01' href='#mc:0,bo:3,bo:2,bo:0'>
  <area shape='rect' coords='556.234,3053.01,800.188,3079.01' href='#mc:0,bo:3,bo:2,bo:0,bo:0'>
  <area shape='rect' coords='664.375,3081.01,907.078,3133.01' href='#mc:0,bo:3,bo:2,bo:1'>
  <area shape='rect' coords='657.516,3135.01,907.078,3187.01' href='#mc:0,bo:3,bo:2,bo:2'>
  <area shape='rect' coords='677.812,3189.01,907.078,3241.01' href='#mc:0,bo:3,bo:2,bo:3'>
  <area shape='rect' coords='563.875,3202.01,656.812,3228.01' href='#mc:0,bo:3,bo:2,bo:3,bo:0'>
  <area shape='rect' coords='528.125,3202.01,542.875,3228.01' href='#mc:0,bo:3,bo:2,bo:3,bo:0,bo:0'>
  <area shape='rect' coords='864.75,3270.01,907.078,3296.01' href='#mc:0,bo:3,bo:2,bo:4'>
  <area shape='rect' coords='626.688,3257.01,843.75,3309.01' href='#mc:0,bo:3,bo:2,bo:4,bo:0'>
  <area shape='rect' coords='348.406,3243.01,605.688,3295.01' href='#mc:0,bo:3,bo:2,bo:4,bo:0,bo:0'>
  <area shape='rect' coords='389.781,3297.01,605.688,3323.01' href='#mc:0,bo:3,bo:2,bo:4,bo:0,bo:1'>
  <area shape='rect' coords='1041.52,3392.01,1224.2,3422.01' href='#mc:0,bo:3,bo:3'>
  <area shape='rect' coords='865.391,3325.01,1020.52,3351.01' href='#mc:0,bo:3,bo:3,bo:0'>
  <area shape='rect' coords='652.359,3325.01,844.391,3351.01' href='#mc:0,bo:3,bo:3,bo:0,bo:0'>
  <area shape='rect' coords='848.297,3353.01,1020.52,3379.01' href='#mc:0,bo:3,bo:3,bo:1'>
  <area shape='rect' coords='765.641,3381.01,1020.52,3433.01' href='#mc:0,bo:3,bo:3,bo:2'>
  <area shape='rect' coords='927.578,3435.01,1020.52,3461.01' href='#mc:0,bo:3,bo:3,bo:3'>
  <area shape='rect' coords='899.047,3463.01,1020.52,3489.01' href='#mc:0,bo:3,bo:3,bo:4'>
  <area shape='rect' coords='1034.84,3639.01,1202.2,3669.01' href='#mc:0,bo:3,bo:4'>
  <area shape='rect' coords='872.562,3544.01,991.844,3570.01' href='#mc:0,bo:3,bo:4,bo:0'>
  <area shape='rect' coords='606.094,3491.01,851.562,3543.01' href='#mc:0,bo:3,bo:4,bo:0,bo:0'>
  <area shape='rect' coords='593.969,3545.01,851.562,3623.01' href='#mc:0,bo:3,bo:4,bo:0,bo:1'>
  <area shape='rect' coords='766.266,3708.01,991.844,3734.01' href='#mc:0,bo:3,bo:4,bo:1'>
  <area shape='rect' coords='480.922,3654.01,745.266,3706.01' href='#mc:0,bo:3,bo:4,bo:1,bo:0'>
  <area shape='rect' coords='393.984,3625.01,459.922,3651.01' href='#mc:0,bo:3,bo:4,bo:1,bo:0,bo:0'>
  <area shape='rect' coords='412.203,3653.01,459.922,3679.01' href='#mc:0,bo:3,bo:4,bo:1,bo:0,bo:1'>
  <area shape='rect' coords='392.75,3681.01,459.922,3707.01' href='#mc:0,bo:3,bo:4,bo:1,bo:0,bo:2'>
  <area shape='rect' coords='365.016,3709.01,459.922,3735.01' href='#mc:0,bo:3,bo:4,bo:1,bo:0,bo:3'>
  <area shape='rect' coords='659.719,3764.01,745.266,3790.01' href='#mc:0,bo:3,bo:4,bo:1,bo:1'>
  <area shape='rect' coords='587.875,3737.01,638.719,3763.01' href='#mc:0,bo:3,bo:4,bo:1,bo:1,bo:0'>
  <area shape='rect' coords='404.672,3737.01,566.875,3763.01' href='#mc:0,bo:3,bo:4,bo:1,bo:1,bo:0,bo:0'>
  <area shape='rect' coords='542.906,3778.01,638.719,3804.01' href='#mc:0,bo:3,bo:4,bo:1,bo:1,bo:1'>
  <area shape='rect' coords='454.859,3778.01,521.906,3804.01' href='#mc:0,bo:3,bo:4,bo:1,bo:1,bo:1,bo:0'>
  <area shape='rect' coords='230.219,3765.01,433.859,3817.01' href='#mc:0,bo:3,bo:4,bo:1,bo:1,bo:1,bo:0,bo:0'>
  <area shape='rect' coords='959.047,4087.01,1224.2,4147.01' href='#mc:0,bo:3,bo:5'>
  <area shape='rect' coords='701.156,3927.01,938.047,3979.01' href='#mc:0,bo:3,bo:5,bo:0'>
  <area shape='rect' coords='444.188,3819.01,680.156,3845.01' href='#mc:0,bo:3,bo:5,bo:0,bo:0'>
  <area shape='rect' coords='613.781,3847.01,680.156,3873.01' href='#mc:0,bo:3,bo:5,bo:0,bo:1'>
  <area shape='rect' coords='551.812,3901.01,680.156,3927.01' href='#mc:0,bo:3,bo:5,bo:0,bo:2'>
  <area shape='rect' coords='232.75,3875.01,508.812,3953.01' href='#mc:0,bo:3,bo:5,bo:0,bo:2,bo:0'>
  <area shape='rect' coords='439.469,3955.01,680.156,4059.01' href='#mc:0,bo:3,bo:5,bo:0,bo:3'>
  <area shape='rect' coords='491.672,4061.01,680.156,4087.01' href='#mc:0,bo:3,bo:5,bo:0,bo:4'>
  <area shape='rect' coords='794.719,4131.01,938.047,4157.01' href='#mc:0,bo:3,bo:5,bo:1'>
  <area shape='rect' coords='691.094,4089.01,773.719,4115.01' href='#mc:0,bo:3,bo:5,bo:1,bo:0'>
  <area shape='rect' coords='649.266,4145.01,773.719,4171.01' href='#mc:0,bo:3,bo:5,bo:1,bo:1'>
  <area shape='rect' coords='441.266,4117.01,606.266,4143.01' href='#mc:0,bo:3,bo:5,bo:1,bo:1,bo:0'>
  <area shape='rect' coords='473.891,4145.01,606.266,4171.01' href='#mc:0,bo:3,bo:5,bo:1,bo:1,bo:1'>
  <area shape='rect' coords='551.219,4173.01,606.266,4199.01' href='#mc:0,bo:3,bo:5,bo:1,bo:1,bo:2'>
  <area shape='rect' coords='683.922,4201.01,938.047,4253.01' href='#mc:0,bo:3,bo:5,bo:2'>
  <area shape='rect' coords='833.422,4255.01,938.047,4281.01' href='#mc:0,bo:3,bo:5,bo:3'>
  <area shape='rect' coords='684.141,4283.01,938.047,4361.01' href='#mc:0,bo:3,bo:5,bo:4'>
  <area shape='rect' coords='723.812,4363.01,938.047,4415.01' href='#mc:0,bo:3,bo:5,bo:5'>
  <area shape='rect' coords='1039.56,4580.01,1224.2,4610.01' href='#mc:0,bo:3,bo:6'>
  <area shape='rect' coords='958.469,4472.01,1018.56,4498.01' href='#mc:0,bo:3,bo:6,bo:0'>
  <area shape='rect' coords='900.031,4417.01,937.469,4443.01' href='#mc:0,bo:3,bo:6,bo:0,bo:0'>
  <area shape='rect' coords='869.172,4445.01,891.172,4467.01' href='/home/juxley/Pictures/byreferencebyvalue1.png'>
  <area shape='rect' coords='891.172,4445.01,937.469,4471.01' href='#mc:0,bo:3,bo:6,bo:0,bo:1'>
  <area shape='rect' coords='719.922,4473.01,937.469,4499.01' href='#mc:0,bo:3,bo:6,bo:0,bo:2'>
  <area shape='rect' coords='690.625,4501.01,937.469,4553.01' href='#mc:0,bo:3,bo:6,bo:0,bo:3'>
  <area shape='rect' coords='930.766,4609.01,1018.56,4635.01' href='#mc:0,bo:3,bo:6,bo:1'>
  <area shape='rect' coords='690.953,4555.01,909.766,4607.01' href='#mc:0,bo:3,bo:6,bo:1,bo:0'>
  <area shape='rect' coords='670.953,4609.01,909.766,4661.01' href='#mc:0,bo:3,bo:6,bo:1,bo:1'>
  <area shape='rect' coords='841.469,4663.01,863.469,4685.01' href='/home/juxley/Pictures/byreference.png'>
  <area shape='rect' coords='863.469,4663.01,909.766,4689.01' href='#mc:0,bo:3,bo:6,bo:1,bo:2'>
  <area shape='rect' coords='979.188,4691.01,1018.56,4717.01' href='#mc:0,bo:3,bo:6,bo:2'>
  <area shape='rect' coords='958.422,4719.01,1018.56,4745.01' href='#mc:0,bo:3,bo:6,bo:3'>
  <area shape='rect' coords='827.234,4719.01,937.422,4745.01' href='#mc:0,bo:3,bo:6,bo:3,bo:0'>
  <area shape='rect' coords='937,4747.01,1018.56,4773.01' href='#mc:0,bo:3,bo:6,bo:4'>
  <area shape='rect' coords='796.953,4747.01,916,4773.01' href='#mc:0,bo:3,bo:6,bo:4,bo:0'>
  <area shape='rect' coords='974.547,4948.01,996.547,4970.01' href='/home/juxley/Pictures/this.png'>
  <area shape='rect' coords='996.547,4948.01,1224.2,4978.01' href='#mc:0,bo:3,bo:7'>
  <area shape='rect' coords='700.922,4775.01,953.547,4827.01' href='#mc:0,bo:3,bo:7,bo:0'>
  <area shape='rect' coords='829.062,4977.01,953.547,5003.01' href='#mc:0,bo:3,bo:7,bo:1'>
  <area shape='rect' coords='582.688,4829.01,808.062,4881.01' href='#mc:0,bo:3,bo:7,bo:1,bo:0'>
  <area shape='rect' coords='713.156,4883.01,808.062,4909.01' href='#mc:0,bo:3,bo:7,bo:1,bo:1'>
  <area shape='rect' coords='575.625,4911.01,808.062,4989.01' href='#mc:0,bo:3,bo:7,bo:1,bo:2'>
  <area shape='rect' coords='554.75,4991.01,808.062,5043.01' href='#mc:0,bo:3,bo:7,bo:1,bo:3'>
  <area shape='rect' coords='574.328,5045.01,808.062,5097.01' href='#mc:0,bo:3,bo:7,bo:1,bo:4'>
  <area shape='rect' coords='587.328,5099.01,808.062,5151.01' href='#mc:0,bo:3,bo:7,bo:1,bo:5'>
  <area shape='rect' coords='890.359,5153.01,912.359,5175.01' href='/home/juxley/Pictures/collectionofanything.png'>
  <area shape='rect' coords='912.359,5153.01,1224.2,5183.01' href='#mc:0,bo:3,bo:8'>
  <area shape='rect' coords='1032.06,5374.01,1224.2,5404.01' href='#mc:0,bo:3,bo:9'>
  <area shape='rect' coords='996.312,5185.01,1011.06,5211.01' href='#mc:0,bo:3,bo:9,bo:0'>
  <area shape='rect' coords='770.391,5213.01,1011.06,5265.01' href='#mc:0,bo:3,bo:9,bo:1'>
  <area shape='rect' coords='753.062,5267.01,1011.06,5319.01' href='#mc:0,bo:3,bo:9,bo:2'>
  <area shape='rect' coords='785.484,5321.01,1011.06,5373.01' href='#mc:0,bo:3,bo:9,bo:3'>
  <area shape='rect' coords='950.906,5375.01,1011.06,5401.01' href='#mc:0,bo:3,bo:9,bo:4'>
  <area shape='rect' coords='846.766,5403.01,1011.06,5429.01' href='#mc:0,bo:3,bo:9,bo:5'>
  <area shape='rect' coords='780.219,5431.01,1011.06,5483.01' href='#mc:0,bo:3,bo:9,bo:6'>
  <area shape='rect' coords='640.156,5444.01,759.219,5470.01' href='#mc:0,bo:3,bo:9,bo:6,bo:0'>
  <area shape='rect' coords='837.984,5485.01,1011.06,5511.01' href='#mc:0,bo:3,bo:9,bo:7'>
  <area shape='rect' coords='956.641,5540.01,1011.06,5566.01' href='#mc:0,bo:3,bo:9,bo:8'>
  <area shape='rect' coords='882.922,5513.01,935.641,5539.01' href='#mc:0,bo:3,bo:9,bo:8,bo:0'>
  <area shape='rect' coords='694.797,5541.01,935.641,5593.01' href='#mc:0,bo:3,bo:9,bo:8,bo:1'>
  <area shape='rect' coords='917.359,5634.01,1224.2,5664.01' href='#mc:0,bo:3,bo:10'>
  <area shape='rect' coords='649.234,5595.01,874.359,5647.01' href='#mc:0,bo:3,bo:10,bo:0'>
  <area shape='rect' coords='699.812,5649.01,874.359,5675.01' href='#mc:0,bo:3,bo:10,bo:1'>
  <area shape='rect' coords='814.203,5677.01,874.359,5703.01' href='#mc:0,bo:3,bo:10,bo:2'>
  <area shape='rect' coords='998.078,5810.01,1224.2,5840.01' href='#mc:0,bo:3,bo:11'>
  <area shape='rect' coords='725.844,5705.01,977.078,5757.01' href='#mc:0,bo:3,bo:11,bo:0'>
  <area shape='rect' coords='791.25,5759.01,977.078,5785.01' href='#mc:0,bo:3,bo:11,bo:1'>
  <area shape='rect' coords='742.891,5787.01,977.078,5839.01' href='#mc:0,bo:3,bo:11,bo:2'>
  <area shape='rect' coords='714.734,5841.01,977.078,5945.01' href='#mc:0,bo:3,bo:11,bo:3'>
  <area shape='rect' coords='976.859,6052.01,1224.2,6112.01' href='#mc:0,bo:3,bo:12'>
  <area shape='rect' coords='718.125,5947.01,955.859,5999.01' href='#mc:0,bo:3,bo:12,bo:0'>
  <area shape='rect' coords='717.266,6001.01,955.859,6053.01' href='#mc:0,bo:3,bo:12,bo:1'>
  <area shape='rect' coords='689.953,6055.01,955.859,6107.01' href='#mc:0,bo:3,bo:12,bo:2'>
  <area shape='rect' coords='829.188,6109.01,955.859,6135.01' href='#mc:0,bo:3,bo:12,bo:3'>
  <area shape='rect' coords='839.641,6137.01,955.859,6163.01' href='#mc:0,bo:3,bo:12,bo:4'>
  <area shape='rect' coords='708.453,6165.01,955.859,6217.01' href='#mc:0,bo:3,bo:12,bo:5'>
  <area shape='rect' coords='978.953,6312.01,1224.2,6342.01' href='#mc:0,bo:3,bo:13'>
  <area shape='rect' coords='807.062,6219.01,957.953,6245.01' href='#mc:0,bo:3,bo:13,bo:0'>
  <area shape='rect' coords='691.766,6247.01,957.953,6299.01' href='#mc:0,bo:3,bo:13,bo:1'>
  <area shape='rect' coords='656.016,6260.01,670.766,6286.01' href='#mc:0,bo:3,bo:13,bo:1,bo:0'>
  <area shape='rect' coords='897.797,6301.01,957.953,6327.01' href='#mc:0,bo:3,bo:13,bo:2'>
  <area shape='rect' coords='711.469,6329.01,957.953,6381.01' href='#mc:0,bo:3,bo:13,bo:3'>
  <area shape='rect' coords='688.891,6383.01,957.953,6435.01' href='#mc:0,bo:3,bo:13,bo:4'>
  <area shape='rect' coords='903.531,6922.01,1224.2,6952.01' href='#mc:0,bo:3,bo:14'>
  <area shape='rect' coords='763.141,6437.01,882.531,6463.01' href='#mc:0,bo:3,bo:14,bo:0'>
  <area shape='rect' coords='751.906,6465.01,882.531,6491.01' href='#mc:0,bo:3,bo:14,bo:1'>
  <area shape='rect' coords='815.359,6507.01,882.531,6533.01' href='#mc:0,bo:3,bo:14,bo:2'>
  <area shape='rect' coords='616.219,6493.01,794.359,6519.01' href='#mc:0,bo:3,bo:14,bo:2,bo:0'>
  <area shape='rect' coords='749.734,6521.01,794.359,6547.01' href='#mc:0,bo:3,bo:14,bo:2,bo:1'>
  <area shape='rect' coords='691.859,6549.01,882.531,6575.01' href='#mc:0,bo:3,bo:14,bo:3'>
  <area shape='rect' coords='851.797,6617.01,882.531,6643.01' href='#mc:0,bo:3,bo:14,bo:4'>
  <area shape='rect' coords='570.594,6577.01,808.797,6629.01' href='#mc:0,bo:3,bo:14,bo:4,bo:0'>
  <area shape='rect' coords='569.297,6631.01,808.797,6683.01' href='#mc:0,bo:3,bo:14,bo:4,bo:1'>
  <area shape='rect' coords='621.891,6699.01,882.531,6777.01' href='#mc:0,bo:3,bo:14,bo:5'>
  <area shape='rect' coords='365.875,6685.01,600.891,6737.01' href='#mc:0,bo:3,bo:14,bo:5,bo:0'>
  <area shape='rect' coords='309.812,6739.01,600.891,6791.01' href='#mc:0,bo:3,bo:14,bo:5,bo:1'>
  <area shape='rect' coords='647.859,6793.01,882.531,6845.01' href='#mc:0,bo:3,bo:14,bo:6'>
  <area shape='rect' coords='717.75,6900.01,882.531,6926.01' href='#mc:0,bo:3,bo:14,bo:7'>
  <area shape='rect' coords='458.281,6847.01,696.75,6951.01' href='#mc:0,bo:3,bo:14,bo:7,bo:0'>
  <area shape='rect' coords='583.625,6953.01,696.75,6979.01' href='#mc:0,bo:3,bo:14,bo:7,bo:1'>
  <area shape='rect' coords='652.922,7196.01,882.531,7222.01' href='#mc:0,bo:3,bo:14,bo:8'>
  <area shape='rect' coords='565.781,6981.01,631.922,7007.01' href='#mc:0,bo:3,bo:14,bo:8,bo:0'>
  <area shape='rect' coords='528.812,7129.01,631.922,7155.01' href='#mc:0,bo:3,bo:14,bo:8,bo:1'>
  <area shape='rect' coords='262.641,7009.01,507.812,7061.01' href='#mc:0,bo:3,bo:14,bo:8,bo:1,bo:0'>
  <area shape='rect' coords='272.422,7063.01,507.812,7115.01' href='#mc:0,bo:3,bo:14,bo:8,bo:1,bo:1'>
  <area shape='rect' coords='279.547,7170.01,507.812,7222.01' href='#mc:0,bo:3,bo:14,bo:8,bo:1,bo:2'>
  <area shape='rect' coords='11.2344,7117.01,258.547,7195.01' href='#mc:0,bo:3,bo:14,bo:8,bo:1,bo:2,bo:0'>
  <area shape='rect' coords='11,7197.01,258.547,7275.01' href='#mc:0,bo:3,bo:14,bo:8,bo:1,bo:2,bo:1'>
  <area shape='rect' coords='562.797,7277.01,584.797,7299.01' href='/home/juxley/Pictures/safeiife.png'>
  <area shape='rect' coords='584.797,7277.01,631.922,7303.01' href='#mc:0,bo:3,bo:14,bo:8,bo:2'>
  <area shape='rect' coords='374.406,7305.01,631.922,7383.01' href='#mc:0,bo:3,bo:14,bo:8,bo:3'>
  <area shape='rect' coords='131.188,7331.01,353.406,7357.01' href='#mc:0,bo:3,bo:14,bo:8,bo:3,bo:0'>
  <area shape='rect' coords='389.203,7385.01,631.922,7437.01' href='#mc:0,bo:3,bo:14,bo:8,bo:4'>
  <area shape='rect' coords='117.812,7385.01,368.203,7437.01' href='#mc:0,bo:3,bo:14,bo:8,bo:4,bo:0'>
  <area shape='rect' coords='36.6562,7398.01,96.8125,7424.01' href='#mc:0,bo:3,bo:14,bo:8,bo:4,bo:0,bo:0'>
  <area shape='rect' coords='1034.44,7829.01,1224.2,7859.01' href='#mc:0,bo:3,bo:15'>
  <area shape='rect' coords='953.281,7439.01,1013.44,7465.01' href='#mc:0,bo:3,bo:15,bo:0'>
  <area shape='rect' coords='766.281,7467.01,1013.44,7519.01' href='#mc:0,bo:3,bo:15,bo:1'>
  <area shape='rect' coords='817.547,7521.01,1013.44,7547.01' href='#mc:0,bo:3,bo:15,bo:2'>
  <area shape='rect' coords='766.234,7549.01,1013.44,7627.01' href='#mc:0,bo:3,bo:15,bo:3'>
  <area shape='rect' coords='540.625,7562.01,745.234,7614.01' href='#mc:0,bo:3,bo:15,bo:3,bo:0'>
  <area shape='rect' coords='785.062,7669.01,1013.44,7721.01' href='#mc:0,bo:3,bo:15,bo:4'>
  <area shape='rect' coords='535.953,7629.01,764.062,7681.01' href='#mc:0,bo:3,bo:15,bo:4,bo:0'>
  <area shape='rect' coords='518.094,7683.01,764.062,7761.01' href='#mc:0,bo:3,bo:15,bo:4,bo:1'>
  <area shape='rect' coords='761.891,7831.01,1013.44,7883.01' href='#mc:0,bo:3,bo:15,bo:5'>
  <area shape='rect' coords='501.156,7763.01,740.891,7841.01' href='#mc:0,bo:3,bo:15,bo:5,bo:0'>
  <area shape='rect' coords='528.984,7843.01,740.891,7869.01' href='#mc:0,bo:3,bo:15,bo:5,bo:1'>
  <area shape='rect' coords='540.344,7871.01,740.891,7923.01' href='#mc:0,bo:3,bo:15,bo:5,bo:2'>
  <area shape='rect' coords='726.141,7925.01,740.891,7951.01' href='#mc:0,bo:3,bo:15,bo:5,bo:3'>
  <area shape='rect' coords='690.391,7925.01,705.141,7951.01' href='#mc:0,bo:3,bo:15,bo:5,bo:3,bo:0'>
  <area shape='rect' coords='767.391,7953.01,789.391,7975.01' href='/home/juxley/Pictures/closures.png'>
  <area shape='rect' coords='789.391,7953.01,1013.44,8005.01' href='#mc:0,bo:3,bo:15,bo:6'>
  <area shape='rect' coords='570.266,7966.01,746.391,7992.01' href='#mc:0,bo:3,bo:15,bo:6,bo:0'>
  <area shape='rect' coords='769.828,8007.01,1013.44,8085.01' href='#mc:0,bo:3,bo:15,bo:7'>
  <area shape='rect' coords='909.062,8155.01,1013.44,8181.01' href='#mc:0,bo:3,bo:15,bo:8'>
  <area shape='rect' coords='818.5,8087.01,840.5,8109.01' href='/home/juxley/Pictures/closure2.png'>
  <area shape='rect' coords='840.5,8087.01,866.062,8113.01' href='#mc:0,bo:3,bo:15,bo:8,bo:0'>
  <area shape='rect' coords='590.406,8115.01,866.062,8193.01' href='#mc:0,bo:3,bo:15,bo:8,bo:1'>
  <area shape='rect' coords='762.594,8195.01,866.062,8221.01' href='#mc:0,bo:3,bo:15,bo:8,bo:2'>
  <area shape='rect' coords='786.141,8223.01,866.062,8249.01' href='#mc:0,bo:3,bo:15,bo:8,bo:3'>
</map>
<hr/>
<table class="vym-footer">   
        <tr> 
        <td class="vym-footerL">/home/juxley/Desktop/yes/JavaScript the Weird Parts.html</td> 
            <td class="vym-footerC">2018-05-30</td> 
            <td class="vym-footerR"> <a href='http://www.insilmaril.de/vym'>vym 2.5.0</a></td> 
            </tr> 
             </table>
</body></html>