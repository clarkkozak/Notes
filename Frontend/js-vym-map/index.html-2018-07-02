<html>
<meta http-equiv="content-type" content="text/html; charset=UTF-8"> 
<meta name="generator=" content=" vym - view your mind - http://www.insilmaril.de/vym">
<meta name="author" content=""> 
<meta name="description" content=""> 
<link rel='stylesheet' id='css.stylesheet' href='vym.css' />

<head><title>JavaScript the Weird Parts</title></head>
<body>
<center><img src="JavaScript the Weird Parts.png" usemap='#imagemap'></center>
<table class="vym-toc">
<tr><td class="vym-toc-title">
Contents:
</td></tr>
<tr><td>
<div class="vym-toc-branch-0"><a href="#mc:0">  JavaScript the Weird Parts</a></br>
</div><div class="vym-toc-branch-1"><a href="#mc:0,bo:0"> 1.  Introduction</a></br>
</div><div class="vym-toc-branch-2"><a href="#mc:0,bo:0,bo:0"> 1.1.  Understand, don't imediate</a></br>
</div><div class="vym-toc-branch-3"><a href="#mc:0,bo:0,bo:0,bo:0"> 1.1.1.  Type it out</a></br>
</div><div class="vym-toc-branch-2"><a href="#mc:0,bo:0,bo:1"> 1.2.  Frameworks</a></br>
</div><div class="vym-toc-branch-3"><a href="#mc:0,bo:0,bo:1,bo:0"> 1.2.1.  People who make the frameworks understand the weird parts</a></br>
</div><div class="vym-toc-branch-3"><a href="#mc:0,bo:0,bo:1,bo:1"> 1.2.2.  Angular</a></br>
</div><div class="vym-toc-branch-3"><a href="#mc:0,bo:0,bo:1,bo:2"> 1.2.3.  jQuery</a></br>
</div><div class="vym-toc-branch-2"><a href="#mc:0,bo:0,bo:2"> 1.3.  Weird Parts</a></br>
</div><div class="vym-toc-branch-3"><a href="#mc:0,bo:0,bo:2,bo:0"> 1.3.1.  Understanding the how JavaScript works will give you the bases of how to create
the frameworks</a></br>
</div><div class="vym-toc-branch-1"><a href="#mc:0,bo:1"> 2.  Execution Context and Lexical Enviroment</a></br>
</div><div class="vym-toc-branch-2"><a href="#mc:0,bo:1,bo:0"> 2.1.  Definitions</a></br>
</div><div class="vym-toc-branch-3"><a href="#mc:0,bo:1,bo:0,bo:0"> 2.1.1.  Name - Value Pair</a></br>
</div><div class="vym-toc-branch-4"><a href="#mc:0,bo:1,bo:0,bo:0,bo:0"> 2.1.1.1.  address = &quot;100 Miller Ct&quot;</a></br>
</div><div class="vym-toc-branch-4"><a href="#mc:0,bo:1,bo:0,bo:0,bo:1"> 2.1.1.2.  Object in JavaScript</a></br>
</div><div class="vym-toc-branch-5"><a href="#mc:0,bo:1,bo:0,bo:0,bo:1,bo:0"> 2.1.1.2.1.  Collection of name / value pairs</a></br>
</div><div class="vym-toc-branch-5"><a href="#mc:0,bo:1,bo:0,bo:0,bo:1,bo:1"> 2.1.1.2.2.  Name Values within name values within name values</a></br>
</div><div class="vym-toc-branch-4"><a href="#mc:0,bo:1,bo:0,bo:0,bo:2"> 2.1.1.3.  A name that maps to a unique value</a></br>
</div><div class="vym-toc-branch-4"><a href="#mc:0,bo:1,bo:0,bo:0,bo:3"> 2.1.1.4.  Only one value per context</a></br>
</div><div class="vym-toc-branch-3"><a href="#mc:0,bo:1,bo:0,bo:1"> 2.1.2.  Execution Context</a></br>
</div><div class="vym-toc-branch-4"><a href="#mc:0,bo:1,bo:0,bo:1,bo:0"> 2.1.2.1.  A wrapper that helps manage code that's running</a></br>
</div><div class="vym-toc-branch-4"><a href="#mc:0,bo:1,bo:0,bo:1,bo:1"> 2.1.2.2.  which lexical enviroment depends on execution context</a></br>
</div><div class="vym-toc-branch-4"><a href="#mc:0,bo:1,bo:0,bo:1,bo:2"> 2.1.2.3.  contains things beyond your code</a></br>
</div><div class="vym-toc-branch-3"><a href="#mc:0,bo:1,bo:0,bo:2"> 2.1.3.  Lexical Enviroment</a></br>
</div><div class="vym-toc-branch-4"><a href="#mc:0,bo:1,bo:0,bo:2,bo:0"> 2.1.3.1.  Lexical means having to do with language or grammar</a></br>
</div><div class="vym-toc-branch-4"><a href="#mc:0,bo:1,bo:0,bo:2,bo:1"> 2.1.3.2.  Where written code physically positioned</a></br>
</div><div class="vym-toc-branch-4"><a href="#mc:0,bo:1,bo:0,bo:2,bo:2"> 2.1.3.3.  Syntax parser cares on where things are placed</a></br>
</div><div class="vym-toc-branch-3"><a href="#mc:0,bo:1,bo:0,bo:3"> 2.1.4.  Syntax Parser</a></br>
</div><div class="vym-toc-branch-4"><a href="#mc:0,bo:1,bo:0,bo:3,bo:0"> 2.1.4.1.  A program that reads code and determines what to do with and if the grammar is
valid</a></br>
</div><div class="vym-toc-branch-4"><a href="#mc:0,bo:1,bo:0,bo:3,bo:1"> 2.1.4.2.  Translates it for a computer</a></br>
</div><div class="vym-toc-branch-2"><a href="#mc:0,bo:1,bo:1"> 2.2.  Global Enviroment and Global Object</a></br>
</div><div class="vym-toc-branch-3"><a href="#mc:0,bo:1,bo:1,bo:0"> 2.2.1.  Global Execution Context engine create 2 things</a></br>
</div><div class="vym-toc-branch-4"><a href="#mc:0,bo:1,bo:1,bo:0,bo:0"> 2.2.1.1.  this</a></br>
</div><div class="vym-toc-branch-4"><a href="#mc:0,bo:1,bo:1,bo:0,bo:1"> 2.2.1.2.  Global object</a></br>
</div><div class="vym-toc-branch-3"><a href="#mc:0,bo:1,bo:1,bo:1"> 2.2.2.  Nothing in JavaScript</a></br>
</div><div class="vym-toc-branch-4"><a href="#mc:0,bo:1,bo:1,bo:1,bo:0"> 2.2.2.1.  this</a></br>
</div><div class="vym-toc-branch-4"><a href="#mc:0,bo:1,bo:1,bo:1,bo:1"> 2.2.2.2.  window</a></br>
</div><div class="vym-toc-branch-4"><a href="#mc:0,bo:1,bo:1,bo:1,bo:2"> 2.2.2.3.  Both of these are the global object (while on a Browser)</a></br>
</div><div class="vym-toc-branch-5"><a href="#mc:0,bo:1,bo:1,bo:1,bo:2,bo:0"> 2.2.2.3.1.  At the global level, this = window</a></br>
</div><div class="vym-toc-branch-4"><a href="#mc:0,bo:1,bo:1,bo:1,bo:3"> 2.2.2.4.  JS still  creates variables</a></br>
</div><div class="vym-toc-branch-4"><a href="#mc:0,bo:1,bo:1,bo:1,bo:4"> 2.2.2.5.  YOU DIDN'T WRITE THIS STUFF</a></br>
</div><div class="vym-toc-branch-3"><a href="#mc:0,bo:1,bo:1,bo:2"> 2.2.3.  Global: Not inside a function</a></br>
</div><div class="vym-toc-branch-4"><a href="#mc:0,bo:1,bo:1,bo:2,bo:0"> 2.2.3.1.  When not in a function, the variables sit in the lexical enviroment.</a></br>
</div><div class="vym-toc-branch-4"><a href="#mc:0,bo:1,bo:1,bo:2,bo:1"> 2.2.3.2.  a = window.a</a></br>
</div><div class="vym-toc-branch-3"><a href="#mc:0,bo:1,bo:1,bo:3"> 2.2.4.  Review</a></br>
</div><div class="vym-toc-branch-4"><a href="#mc:0,bo:1,bo:1,bo:3,bo:0"> 2.2.4.1.  Execution Contxt</a></br>
</div><div class="vym-toc-branch-5"><a href="#mc:0,bo:1,bo:1,bo:3,bo:0,bo:0"> 2.2.4.1.1.  Global Object</a></br>
</div><div class="vym-toc-branch-5"><a href="#mc:0,bo:1,bo:1,bo:3,bo:0,bo:1"> 2.2.4.1.2.  this</a></br>
</div><div class="vym-toc-branch-5"><a href="#mc:0,bo:1,bo:1,bo:3,bo:0,bo:2"> 2.2.4.1.3.  window</a></br>
</div><div class="vym-toc-branch-5"><a href="#mc:0,bo:1,bo:1,bo:3,bo:0,bo:3"> 2.2.4.1.4.  Your code</a></br>
</div><div class="vym-toc-branch-2"><a href="#mc:0,bo:1,bo:2"> 2.3.  Execution Contenxt: Creation and Hoisting</a></br>
</div><div class="vym-toc-branch-3"><a href="#mc:0,bo:1,bo:2,bo:0"> 2.3.1.  Hoisting</a></br>
</div><div class="vym-toc-branch-3"><a href="#mc:0,bo:1,bo:2,bo:1"> 2.3.2.  WHAT EXECUTES ISN'T WHAT YOU'VE WRITTEN</a></br>
</div><div class="vym-toc-branch-4"><a href="#mc:0,bo:1,bo:2,bo:1,bo:0"> 2.3.2.1.  JavaScript Engine makes descisions</a></br>
</div><div class="vym-toc-branch-3"><a href="#mc:0,bo:1,bo:2,bo:2"> 2.3.3.  (1) Creation Phase</a></br>
</div><div class="vym-toc-branch-4"><a href="#mc:0,bo:1,bo:2,bo:2,bo:0"> 2.3.3.1.  Global Object</a></br>
</div><div class="vym-toc-branch-4"><a href="#mc:0,bo:1,bo:2,bo:2,bo:1"> 2.3.3.2.  this</a></br>
</div><div class="vym-toc-branch-4"><a href="#mc:0,bo:1,bo:2,bo:2,bo:2"> 2.3.3.3.  out enviroment</a></br>
</div><div class="vym-toc-branch-4"><a href="#mc:0,bo:1,bo:2,bo:2,bo:3"> 2.3.3.4.  Syntax parser recognizes where you've created variables and functions</a></br>
</div><div class="vym-toc-branch-5"><a href="#mc:0,bo:1,bo:2,bo:2,bo:3,bo:0"> 2.3.3.4.1.  Set ups memory space for functions and vvariables: &quot;Hoisting&quot;</a></br>
</div><div class="vym-toc-branch-3"><a href="#mc:0,bo:1,bo:2,bo:3"> 2.3.4.  Example Code</a></br>
</div><div class="vym-toc-branch-4"><a href="#mc:0,bo:1,bo:2,bo:3,bo:0"> 2.3.4.1.  Function in hosted in entirered</a></br>
</div><div class="vym-toc-branch-4"><a href="#mc:0,bo:1,bo:2,bo:3,bo:1"> 2.3.4.2.  variables doesn't until execution phase</a></br>
</div><div class="vym-toc-branch-4"><a href="#mc:0,bo:1,bo:2,bo:3,bo:2"> 2.3.4.3.  undefined is a placeholder</a></br>
</div><div class="vym-toc-branch-4"><a href="#mc:0,bo:1,bo:2,bo:3,bo:3"> 2.3.4.4.  Never rely on hoisting</a></br>
</div><div class="vym-toc-branch-3"><a href="#mc:0,bo:1,bo:2,bo:4"> 2.3.5.  Declare functions at the top of your code</a></br>
</div><div class="vym-toc-branch-2"><a href="#mc:0,bo:1,bo:3"> 2.4.  Exeution Content: Execution</a></br>
</div><div class="vym-toc-branch-3"><a href="#mc:0,bo:1,bo:3,bo:0"> 2.4.1.  Runs your code line by line</a></br>
</div><div class="vym-toc-branch-3"><a href="#mc:0,bo:1,bo:3,bo:1"> 2.4.2.  After hoisting, things are execution</a></br>
</div><div class="vym-toc-branch-2"><a href="#mc:0,bo:1,bo:4"> 2.5.  Conceptual Aside: JavaScript and Undeifined</a></br>
</div><div class="vym-toc-branch-3"><a href="#mc:0,bo:1,bo:4,bo:0"> 2.5.1.  not defined IS NOT undefined</a></br>
</div><div class="vym-toc-branch-3"><a href="#mc:0,bo:1,bo:4,bo:1"> 2.5.2.  Example Code</a></br>
</div><div class="vym-toc-branch-4"><a href="#mc:0,bo:1,bo:4,bo:1,bo:0"> 2.5.2.1.  When a variable isn't declared than the browser will say &quot;it's not in memory my
dude&quot;</a></br>
</div><div class="vym-toc-branch-4"><a href="#mc:0,bo:1,bo:4,bo:1,bo:1"> 2.5.2.2.  undefined takes up memory space</a></br>
</div><div class="vym-toc-branch-3"><a href="#mc:0,bo:1,bo:4,bo:2"> 2.5.3.  undefineid means it's  a value that JavaScript is creating</a></br>
</div><div class="vym-toc-branch-3"><a href="#mc:0,bo:1,bo:4,bo:3"> 2.5.4.  NEVER: a = undefined;</a></br>
</div><div class="vym-toc-branch-4"><a href="#mc:0,bo:1,bo:4,bo:3,bo:0"> 2.5.4.1.  Valid, yet dangerous</a></br>
</div><div class="vym-toc-branch-4"><a href="#mc:0,bo:1,bo:4,bo:3,bo:1"> 2.5.4.2.  Let JavaScript always set undefined</a></br>
</div><div class="vym-toc-branch-2"><a href="#mc:0,bo:1,bo:5"> 2.6.  Conceptual Aside: Single Threaded, Synchronous Execution</a></br>
</div><div class="vym-toc-branch-3"><a href="#mc:0,bo:1,bo:5,bo:0"> 2.6.1.  Single Threaded: Only one command at a time</a></br>
</div><div class="vym-toc-branch-4"><a href="#mc:0,bo:1,bo:5,bo:0,bo:0"> 2.6.1.1.  The browerser also runs</a></br>
</div><div class="vym-toc-branch-4"><a href="#mc:0,bo:1,bo:5,bo:0,bo:1"> 2.6.1.2.  JavaScript behaves as a single threaded message</a></br>
</div><div class="vym-toc-branch-3"><a href="#mc:0,bo:1,bo:5,bo:1"> 2.6.2.  Synchronous (in programming)</a></br>
</div><div class="vym-toc-branch-4"><a href="#mc:0,bo:1,bo:5,bo:1,bo:0"> 2.6.2.1.  One at a time</a></br>
</div><div class="vym-toc-branch-4"><a href="#mc:0,bo:1,bo:5,bo:1,bo:1"> 2.6.2.2.  One line of code at a time in order that it appears</a></br>
</div><div class="vym-toc-branch-2"><a href="#mc:0,bo:1,bo:6"> 2.7.  Function Invocation and Execution Stack</a></br>
</div><div class="vym-toc-branch-3"><a href="#mc:0,bo:1,bo:6,bo:0"> 2.7.1.  Innvocatoin: Calling a function or ()</a></br>
</div><div class="vym-toc-branch-3"><a href="#mc:0,bo:1,bo:6,bo:1"> 2.7.2.  Example Code</a></br>
</div><div class="vym-toc-branch-3"><a href="#mc:0,bo:1,bo:6,bo:2"> 2.7.3.  Execution Stack</a></br>
</div><div class="vym-toc-branch-4"><a href="#mc:0,bo:1,bo:6,bo:2,bo:0"> 2.7.3.1.  2) function a Execution Context</a></br>
</div><div class="vym-toc-branch-5"><a href="#mc:0,bo:1,bo:6,bo:2,bo:0,bo:0"> 2.7.3.1.1.  create</a></br>
</div><div class="vym-toc-branch-5"><a href="#mc:0,bo:1,bo:6,bo:2,bo:0,bo:1"> 2.7.3.1.2.  exeuction</a></br>
</div><div class="vym-toc-branch-4"><a href="#mc:0,bo:1,bo:6,bo:2,bo:1"> 2.7.3.2.  1) Global Execution Context</a></br>
</div><div class="vym-toc-branch-5"><a href="#mc:0,bo:1,bo:6,bo:2,bo:1,bo:0"> 2.7.3.2.1.  creates:</a></br>
</div><div class="vym-toc-branch-6"><a href="#mc:0,bo:1,bo:6,bo:2,bo:1,bo:0,bo:0"> 2.7.3.2.1.1.  Global object, this, window</a></br>
</div><div class="vym-toc-branch-6"><a href="#mc:0,bo:1,bo:6,bo:2,bo:1,bo:0,bo:1"> 2.7.3.2.1.2.  hoisting functions and setting variables to undefined</a></br>
</div><div class="vym-toc-branch-5"><a href="#mc:0,bo:1,bo:6,bo:2,bo:1,bo:1"> 2.7.3.2.2.  Executes</a></br>
</div><div class="vym-toc-branch-4"><a href="#mc:0,bo:1,bo:6,bo:2,bo:2"> 2.7.3.3.  3) When a Execution Context / Function is finshed executing, it's pop off the
stack</a></br>
</div><div class="vym-toc-branch-3"><a href="#mc:0,bo:1,bo:6,bo:3"> 2.7.4.  Even if a function invokes itself, a execution context is created</a></br>
</div><div class="vym-toc-branch-4"><a href="#mc:0,bo:1,bo:6,bo:3,bo:0"> 2.7.4.1.  Creation of this / global object  is creating within that funciton</a></br>
</div><div class="vym-toc-branch-2"><a href="#mc:0,bo:1,bo:7"> 2.8.  Functions, Context, Variable Enviroments</a></br>
</div><div class="vym-toc-branch-3"><a href="#mc:0,bo:1,bo:7,bo:0"> 2.8.1.  Variable Enviorment</a></br>
</div><div class="vym-toc-branch-4"><a href="#mc:0,bo:1,bo:7,bo:0,bo:0"> 2.8.1.1.  Where the varibales lives in the memory</a></br>
</div><div class="vym-toc-branch-4"><a href="#mc:0,bo:1,bo:7,bo:0,bo:1"> 2.8.1.2.  Where is the variable?</a></br>
</div><div class="vym-toc-branch-4"><a href="#mc:0,bo:1,bo:7,bo:0,bo:2"> 2.8.1.3.  Each execution context has a variable enviroment (it's own memory space)</a></br>
</div><div class="vym-toc-branch-4"><a href="#mc:0,bo:1,bo:7,bo:0,bo:3"> 2.8.1.4.  Code Example</a></br>
</div><div class="vym-toc-branch-5"><a href="#mc:0,bo:1,bo:7,bo:0,bo:3,bo:0"> 2.8.1.4.1.  Each varibales are in there own scope</a></br>
</div><div class="vym-toc-branch-2"><a href="#mc:0,bo:1,bo:8"> 2.9.  The Scope Chain</a></br>
</div><div class="vym-toc-branch-3"><a href="#mc:0,bo:1,bo:8,bo:0"> 2.9.1.  Example Code 1</a></br>
</div><div class="vym-toc-branch-3"><a href="#mc:0,bo:1,bo:8,bo:1"> 2.9.2.  JavaScript does more than look in the variable enviroment of the current
execution context</a></br>
</div><div class="vym-toc-branch-4"><a href="#mc:0,bo:1,bo:8,bo:1,bo:0"> 2.9.2.1.  variable this</a></br>
</div><div class="vym-toc-branch-4"><a href="#mc:0,bo:1,bo:8,bo:1,bo:1"> 2.9.2.2.  Each execution has a reference  to the outer enviroment</a></br>
</div><div class="vym-toc-branch-4"><a href="#mc:0,bo:1,bo:8,bo:1,bo:2"> 2.9.2.3.  Outer enviroment ~ Lexical Enviroment</a></br>
</div><div class="vym-toc-branch-5"><a href="#mc:0,bo:1,bo:8,bo:1,bo:2,bo:0"> 2.9.2.3.1.  Lexical Enviroment</a></br>
</div><div class="vym-toc-branch-6"><a href="#mc:0,bo:1,bo:8,bo:1,bo:2,bo:0,bo:0"> 2.9.2.3.1.1.  The physical location of where code is written</a></br>
</div><div class="vym-toc-branch-3"><a href="#mc:0,bo:1,bo:8,bo:2"> 2.9.3.  Execution stack is create by invocation, not locatoin</a></br>
</div><div class="vym-toc-branch-3"><a href="#mc:0,bo:1,bo:8,bo:3"> 2.9.4.  Finding the variable reference, it goes down the Scope Chain to find</a></br>
</div><div class="vym-toc-branch-3"><a href="#mc:0,bo:1,bo:8,bo:4"> 2.9.5.  &quot;Who created me?&quot;</a></br>
</div><div class="vym-toc-branch-4"><a href="#mc:0,bo:1,bo:8,bo:4,bo:0"> 2.9.5.1.  Example Code 2</a></br>
</div><div class="vym-toc-branch-3"><a href="#mc:0,bo:1,bo:8,bo:5"> 2.9.6.  Where a function sits lexically determines it's out reference</a></br>
</div><div class="vym-toc-branch-2"><a href="#mc:0,bo:1,bo:9"> 2.10.  Scope, ES6, let</a></br>
</div><div class="vym-toc-branch-3"><a href="#mc:0,bo:1,bo:9,bo:0"> 2.10.1.  Scope: Where code is avaiable in code</a></br>
</div><div class="vym-toc-branch-4"><a href="#mc:0,bo:1,bo:9,bo:0,bo:0"> 2.10.1.1.  And if it's the same variable or a copy (another innovcation / object)</a></br>
</div><div class="vym-toc-branch-5"><a href="#mc:0,bo:1,bo:9,bo:0,bo:0,bo:0"> 2.10.1.1.1.  </a></br>
</div><div class="vym-toc-branch-3"><a href="#mc:0,bo:1,bo:9,bo:1"> 2.10.2.  ECMAScript 6 / 2015</a></br>
</div><div class="vym-toc-branch-4"><a href="#mc:0,bo:1,bo:9,bo:1,bo:0"> 2.10.2.1.  let: a new way to declare variables</a></br>
</div><div class="vym-toc-branch-5"><a href="#mc:0,bo:1,bo:9,bo:1,bo:0,bo:0"> 2.10.2.1.1.  Block scoping</a></br>
</div><div class="vym-toc-branch-5"><a href="#mc:0,bo:1,bo:9,bo:1,bo:0,bo:1"> 2.10.2.1.2.  Only available within the block it's declared in</a></br>
</div><div class="vym-toc-branch-5"><a href="#mc:0,bo:1,bo:9,bo:1,bo:0,bo:2"> 2.10.2.1.3.  Cannot use the let variable until the code is ran</a></br>
</div><div class="vym-toc-branch-2"><a href="#mc:0,bo:1,bo:10"> 2.11.  Asynchronous Callbacks</a></br>
</div><div class="vym-toc-branch-3"><a href="#mc:0,bo:1,bo:10,bo:0"> 2.11.1.  More than one at a time</a></br>
</div><div class="vym-toc-branch-3"><a href="#mc:0,bo:1,bo:10,bo:1"> 2.11.2.  Event Queue</a></br>
</div><div class="vym-toc-branch-4"><a href="#mc:0,bo:1,bo:10,bo:1,bo:0"> 2.11.2.1.  Queues is looked at when execution stack is empty</a></br>
</div><div class="vym-toc-branch-4"><a href="#mc:0,bo:1,bo:10,bo:1,bo:1"> 2.11.2.2.  JavaScript looks at th queue perodically</a></br>
</div><div class="vym-toc-branch-5"><a href="#mc:0,bo:1,bo:10,bo:1,bo:1,bo:0"> 2.11.2.2.1.  Event Loop</a></br>
</div><div class="vym-toc-branch-4"><a href="#mc:0,bo:1,bo:10,bo:1,bo:2"> 2.11.2.3.  click event</a></br>
</div><div class="vym-toc-branch-5"><a href="#mc:0,bo:1,bo:10,bo:1,bo:2,bo:0"> 2.11.2.3.1.  exeuction context for the function happens,</a></br>
</div><div class="vym-toc-branch-5"><a href="#mc:0,bo:1,bo:10,bo:1,bo:2,bo:1"> 2.11.2.3.2.  The code is still line by line</a></br>
</div><div class="vym-toc-branch-5"><a href="#mc:0,bo:1,bo:10,bo:1,bo:2,bo:2"> 2.11.2.3.3.  *The stack has to be empty*</a></br>
</div><div class="vym-toc-branch-3"><a href="#mc:0,bo:1,bo:10,bo:2"> 2.11.3.  Exeuction Stack</a></br>
</div><div class="vym-toc-branch-3"><a href="#mc:0,bo:1,bo:10,bo:3"> 2.11.4.  Code Example</a></br>
</div><div class="vym-toc-branch-4"><a href="#mc:0,bo:1,bo:10,bo:3,bo:0"> 2.11.4.1.  The click event is consoled lasted</a></br>
</div><div class="vym-toc-branch-4"><a href="#mc:0,bo:1,bo:10,bo:3,bo:1"> 2.11.4.2.  How does JavaScript, a synchronoistic langauge, deal with asynchronistic events?</a></br>
</div><div class="vym-toc-branch-5"><a href="#mc:0,bo:1,bo:10,bo:3,bo:1,bo:0"> 2.11.4.2.1.  It will run it's code and place it into the event queue</a></br>
</div><div class="vym-toc-branch-3"><a href="#mc:0,bo:1,bo:10,bo:4"> 2.11.5.  The asynchrnous part is outside of the JavaScript engine</a></br>
</div><div class="vym-toc-branch-4"><a href="#mc:0,bo:1,bo:10,bo:4,bo:0"> 2.11.5.1.  These async events will then be process in order that they happen</a></br>
</div><div class="vym-toc-branch-1"><a href="#mc:0,bo:2"> 3.  Types and Operators</a></br>
</div><div class="vym-toc-branch-2"><a href="#mc:0,bo:2,bo:0"> 3.1.  Coneptual Aside: Types</a></br>
</div><div class="vym-toc-branch-3"><a href="#mc:0,bo:2,bo:0,bo:0"> 3.1.1.  Dynamic Typing</a></br>
</div><div class="vym-toc-branch-4"><a href="#mc:0,bo:2,bo:0,bo:0,bo:0"> 3.1.1.1.  You don't tell JavaScript engine what type, it'll figure it out while the code
is running</a></br>
</div><div class="vym-toc-branch-3"><a href="#mc:0,bo:2,bo:0,bo:1"> 3.1.2.  Static Typing</a></br>
</div><div class="vym-toc-branch-4"><a href="#mc:0,bo:2,bo:0,bo:1,bo:0"> 3.1.2.1.  Java, C++, you need to have a certain type into it</a></br>
</div><div class="vym-toc-branch-4"><a href="#mc:0,bo:2,bo:0,bo:1,bo:1"> 3.1.2.2.  You get an error otherwise</a></br>
</div><div class="vym-toc-branch-2"><a href="#mc:0,bo:2,bo:1"> 3.2.  Primiative Type</a></br>
</div><div class="vym-toc-branch-3"><a href="#mc:0,bo:2,bo:1,bo:0"> 3.2.1.  A single value</a></br>
</div><div class="vym-toc-branch-3"><a href="#mc:0,bo:2,bo:1,bo:1"> 3.2.2.  Not an object</a></br>
</div><div class="vym-toc-branch-3"><a href="#mc:0,bo:2,bo:1,bo:2"> 3.2.3.  Six Types in JavaScript</a></br>
</div><div class="vym-toc-branch-4"><a href="#mc:0,bo:2,bo:1,bo:2,bo:0"> 3.2.3.1.  Undefined</a></br>
</div><div class="vym-toc-branch-5"><a href="#mc:0,bo:2,bo:1,bo:2,bo:0,bo:0"> 3.2.3.1.1.  Let JavaScript say when this doesn't exists</a></br>
</div><div class="vym-toc-branch-4"><a href="#mc:0,bo:2,bo:1,bo:2,bo:1"> 3.2.3.2.  Null</a></br>
</div><div class="vym-toc-branch-5"><a href="#mc:0,bo:2,bo:1,bo:2,bo:1,bo:0"> 3.2.3.2.1.  Use this if you want sometihng to mean &quot;not in existence&quot;</a></br>
</div><div class="vym-toc-branch-4"><a href="#mc:0,bo:2,bo:1,bo:2,bo:2"> 3.2.3.3.  Boolean</a></br>
</div><div class="vym-toc-branch-5"><a href="#mc:0,bo:2,bo:1,bo:2,bo:2,bo:0"> 3.2.3.3.1.  true</a></br>
</div><div class="vym-toc-branch-5"><a href="#mc:0,bo:2,bo:1,bo:2,bo:2,bo:1"> 3.2.3.3.2.  false</a></br>
</div><div class="vym-toc-branch-4"><a href="#mc:0,bo:2,bo:1,bo:2,bo:3"> 3.2.3.4.  Number</a></br>
</div><div class="vym-toc-branch-5"><a href="#mc:0,bo:2,bo:1,bo:2,bo:3,bo:0"> 3.2.3.4.1.  floating point number</a></br>
</div><div class="vym-toc-branch-5"><a href="#mc:0,bo:2,bo:1,bo:2,bo:3,bo:1"> 3.2.3.4.2.  Always some decimal at the end of it</a></br>
</div><div class="vym-toc-branch-4"><a href="#mc:0,bo:2,bo:1,bo:2,bo:4"> 3.2.3.5.  String</a></br>
</div><div class="vym-toc-branch-5"><a href="#mc:0,bo:2,bo:1,bo:2,bo:4,bo:0"> 3.2.3.5.1.  list of chatacters</a></br>
</div><div class="vym-toc-branch-4"><a href="#mc:0,bo:2,bo:1,bo:2,bo:5"> 3.2.3.6.  Symbol</a></br>
</div><div class="vym-toc-branch-5"><a href="#mc:0,bo:2,bo:1,bo:2,bo:5,bo:0"> 3.2.3.6.1.  es6</a></br>
</div><div class="vym-toc-branch-2"><a href="#mc:0,bo:2,bo:2"> 3.3.  Conceptual Asdie: Operators</a></br>
</div><div class="vym-toc-branch-3"><a href="#mc:0,bo:2,bo:2,bo:0"> 3.3.1.  A function that is syntaxtcally different</a></br>
</div><div class="vym-toc-branch-3"><a href="#mc:0,bo:2,bo:2,bo:1"> 3.3.2.  Usually takes 2 inputs and results in 1 output</a></br>
</div><div class="vym-toc-branch-3"><a href="#mc:0,bo:2,bo:2,bo:2"> 3.3.3.  notations</a></br>
</div><div class="vym-toc-branch-4"><a href="#mc:0,bo:2,bo:2,bo:2,bo:0"> 3.3.3.1.  +(3, 4) Prefix notation</a></br>
</div><div class="vym-toc-branch-4"><a href="#mc:0,bo:2,bo:2,bo:2,bo:1"> 3.3.3.2.  3+4 infix</a></br>
</div><div class="vym-toc-branch-4"><a href="#mc:0,bo:2,bo:2,bo:2,bo:2"> 3.3.3.3.  (3,4)+ post fix</a></br>
</div><div class="vym-toc-branch-3"><a href="#mc:0,bo:2,bo:2,bo:3"> 3.3.4.  The operators are functions in infix notation</a></br>
</div><div class="vym-toc-branch-3"><a href="#mc:0,bo:2,bo:2,bo:4"> 3.3.5.  Operators are functions that return values</a></br>
</div><div class="vym-toc-branch-2"><a href="#mc:0,bo:2,bo:3"> 3.4.  Operator Precedence and Associativity</a></br>
</div><div class="vym-toc-branch-3"><a href="#mc:0,bo:2,bo:3,bo:0"> 3.4.1.  Operator Precedence</a></br>
</div><div class="vym-toc-branch-4"><a href="#mc:0,bo:2,bo:3,bo:0,bo:0"> 3.4.1.1.  Which operators gets called first</a></br>
</div><div class="vym-toc-branch-4"><a href="#mc:0,bo:2,bo:3,bo:0,bo:1"> 3.4.1.2.  Higher precendene wins</a></br>
</div><div class="vym-toc-branch-4"><a href="#mc:0,bo:2,bo:3,bo:0,bo:2"> 3.4.1.3.  JS engine picks the highest precendence</a></br>
</div><div class="vym-toc-branch-3"><a href="#mc:0,bo:2,bo:3,bo:1"> 3.4.2.  Operator Associativity</a></br>
</div><div class="vym-toc-branch-4"><a href="#mc:0,bo:2,bo:3,bo:1,bo:0"> 3.4.2.1.  What order a function/operator gets called in (right to left, left to right)</a></br>
</div><div class="vym-toc-branch-4"><a href="#mc:0,bo:2,bo:3,bo:1,bo:1"> 3.4.2.2.  When they have the same precendence, associativity determines what gets ccalled
first</a></br>
</div><div class="vym-toc-branch-3"><a href="#mc:0,bo:2,bo:3,bo:2"> 3.4.3.  file:///home/juxley/Documents/Websites/Operator-Precedence-In-Javascript.pdf</a></br>
</div><div class="vym-toc-branch-3"><a href="#mc:0,bo:2,bo:3,bo:3"> 3.4.4.  Helps us to tell what the order that a operator (function) is called</a></br>
</div><div class="vym-toc-branch-3"><a href="#mc:0,bo:2,bo:3,bo:4"> 3.4.5.  Why is this important? JavaScript is dynamically typed</a></br>
</div><div class="vym-toc-branch-2"><a href="#mc:0,bo:2,bo:4"> 3.5.  Conceptual Aside: Coercion</a></br>
</div><div class="vym-toc-branch-3"><a href="#mc:0,bo:2,bo:4,bo:0"> 3.5.1.  Converting a value from one type to another</a></br>
</div><div class="vym-toc-branch-3"><a href="#mc:0,bo:2,bo:4,bo:1"> 3.5.2.  &quot;helllo &quot; + &quot;world&quot;</a></br>
</div><div class="vym-toc-branch-3"><a href="#mc:0,bo:2,bo:4,bo:2"> 3.5.3.  1 + 2</a></br>
</div><div class="vym-toc-branch-4"><a href="#mc:0,bo:2,bo:4,bo:2,bo:0"> 3.5.3.1.  3</a></br>
</div><div class="vym-toc-branch-3"><a href="#mc:0,bo:2,bo:4,bo:3"> 3.5.4.  1 + &quot;2&quot;</a></br>
</div><div class="vym-toc-branch-4"><a href="#mc:0,bo:2,bo:4,bo:3,bo:0"> 3.5.4.1.  12</a></br>
</div><div class="vym-toc-branch-4"><a href="#mc:0,bo:2,bo:4,bo:3,bo:1"> 3.5.4.2.  The value is coercied as a string</a></br>
</div><div class="vym-toc-branch-4"><a href="#mc:0,bo:2,bo:4,bo:3,bo:2"> 3.5.4.3.  In the memory, string and number 1 look very different</a></br>
</div><div class="vym-toc-branch-4"><a href="#mc:0,bo:2,bo:4,bo:3,bo:3"> 3.5.4.4.  JS engine makes a best guess</a></br>
</div><div class="vym-toc-branch-5"><a href="#mc:0,bo:2,bo:4,bo:3,bo:3,bo:0"> 3.5.4.4.1.  THIS choice!</a></br>
</div><div class="vym-toc-branch-3"><a href="#mc:0,bo:2,bo:4,bo:4"> 3.5.5.  This happens since JS is dynmaically typed</a></br>
</div><div class="vym-toc-branch-4"><a href="#mc:0,bo:2,bo:4,bo:4,bo:0"> 3.5.5.1.  Happen in the JS engine</a></br>
</div><div class="vym-toc-branch-3"><a href="#mc:0,bo:2,bo:4,bo:5"> 3.5.6.  operators are function, they run code as well</a></br>
</div><div class="vym-toc-branch-3"><a href="#mc:0,bo:2,bo:4,bo:6"> 3.5.7.  Coercion is a fundalmental part of the language, don't forget it!</a></br>
</div><div class="vym-toc-branch-2"><a href="#mc:0,bo:2,bo:5"> 3.6.  Comparison Operators</a></br>
</div><div class="vym-toc-branch-3"><a href="#mc:0,bo:2,bo:5,bo:0"> 3.6.1.  3 &lt; 2  &lt;  1</a></br>
</div><div class="vym-toc-branch-4"><a href="#mc:0,bo:2,bo:5,bo:0,bo:0"> 3.6.1.1.  true</a></br>
</div><div class="vym-toc-branch-3"><a href="#mc:0,bo:2,bo:5,bo:1"> 3.6.2.  1 &lt; 2 &lt; 3</a></br>
</div><div class="vym-toc-branch-4"><a href="#mc:0,bo:2,bo:5,bo:1,bo:0"> 3.6.2.1.  true</a></br>
</div><div class="vym-toc-branch-3"><a href="#mc:0,bo:2,bo:5,bo:2"> 3.6.3.  Boolen left &amp; right associativity</a></br>
</div><div class="vym-toc-branch-3"><a href="#mc:0,bo:2,bo:5,bo:3"> 3.6.4.  null</a></br>
</div><div class="vym-toc-branch-4"><a href="#mc:0,bo:2,bo:5,bo:3,bo:0"> 3.6.4.1.  Coerced to a number results into 0</a></br>
</div><div class="vym-toc-branch-3"><a href="#mc:0,bo:2,bo:5,bo:4"> 3.6.5.  NaN</a></br>
</div><div class="vym-toc-branch-4"><a href="#mc:0,bo:2,bo:5,bo:4,bo:0"> 3.6.5.1.  Coericing undeified</a></br>
</div><div class="vym-toc-branch-3"><a href="#mc:0,bo:2,bo:5,bo:5"> 3.6.6.  null == 0</a></br>
</div><div class="vym-toc-branch-3"><a href="#mc:0,bo:2,bo:5,bo:6"> 3.6.7.  Strict equals solves these weird coercives issues</a></br>
</div><div class="vym-toc-branch-4"><a href="#mc:0,bo:2,bo:5,bo:6,bo:0"> 3.6.7.1.  use strict equals when comparing quanities</a></br>
</div><div class="vym-toc-branch-4"><a href="#mc:0,bo:2,bo:5,bo:6,bo:1"> 3.6.7.2.  function ==(a, b)</a></br>
</div><div class="vym-toc-branch-4"><a href="#mc:0,bo:2,bo:5,bo:6,bo:2"> 3.6.7.3.  function ===(a, b)</a></br>
</div><div class="vym-toc-branch-4"><a href="#mc:0,bo:2,bo:5,bo:6,bo:3"> 3.6.7.4.  These are only function with different outcomes</a></br>
</div><div class="vym-toc-branch-3"><a href="#mc:0,bo:2,bo:5,bo:7"> 3.6.8.  Equality Sheet</a></br>
</div><div class="vym-toc-branch-2"><a href="#mc:0,bo:2,bo:6"> 3.7.  Existence &amp; Boolean</a></br>
</div><div class="vym-toc-branch-3"><a href="#mc:0,bo:2,bo:6,bo:0"> 3.7.1.  Things that imply a lack of existence = false</a></br>
</div><div class="vym-toc-branch-4"><a href="#mc:0,bo:2,bo:6,bo:0,bo:0"> 3.7.1.1.  We can use this to our advantage with if statements</a></br>
</div><div class="vym-toc-branch-4"><a href="#mc:0,bo:2,bo:6,bo:0,bo:1"> 3.7.1.2.  if (a || a === 0) // if a has something</a></br>
</div><div class="vym-toc-branch-3"><a href="#mc:0,bo:2,bo:6,bo:1"> 3.7.2.  Code Example</a></br>
</div><div class="vym-toc-branch-2"><a href="#mc:0,bo:2,bo:7"> 3.8.  Default Values</a></br>
</div><div class="vym-toc-branch-3"><a href="#mc:0,bo:2,bo:7,bo:0"> 3.8.1.  Code Example</a></br>
</div><div class="vym-toc-branch-4"><a href="#mc:0,bo:2,bo:7,bo:0,bo:0"> 3.8.1.1.  JavaScript creates the memory for the name variable, which would be undeined</a></br>
</div><div class="vym-toc-branch-4"><a href="#mc:0,bo:2,bo:7,bo:0,bo:1"> 3.8.1.2.  Then, undefined got coericed into a string</a></br>
</div><div class="vym-toc-branch-3"><a href="#mc:0,bo:2,bo:7,bo:1"> 3.8.2.  JavaScript doesn't care if you don't pass in a paramater for a function</a></br>
</div><div class="vym-toc-branch-3"><a href="#mc:0,bo:2,bo:7,bo:2"> 3.8.3.  What if we want a default value/</a></br>
</div><div class="vym-toc-branch-3"><a href="#mc:0,bo:2,bo:7,bo:3"> 3.8.4.  || doesn't always return true or false</a></br>
</div><div class="vym-toc-branch-4"><a href="#mc:0,bo:2,bo:7,bo:3,bo:0"> 3.8.4.1.  Gives the first one that coerces into true</a></br>
</div><div class="vym-toc-branch-2"><a href="#mc:0,bo:2,bo:8"> 3.9.  Framework Aside</a></br>
</div><div class="vym-toc-branch-3"><a href="#mc:0,bo:2,bo:8,bo:0"> 3.9.1.  Framework / LIbaryary = same thing. Reusable code</a></br>
</div><div class="vym-toc-branch-3"><a href="#mc:0,bo:2,bo:8,bo:1"> 3.9.2.  scritp tag</a></br>
</div><div class="vym-toc-branch-4"><a href="#mc:0,bo:2,bo:8,bo:1,bo:0"> 3.9.2.1.  They get stacked ontop of each other</a></br>
</div><div class="vym-toc-branch-4"><a href="#mc:0,bo:2,bo:8,bo:1,bo:1"> 3.9.2.2.  JS is usually minfied anyway</a></br>
</div><div class="vym-toc-branch-4"><a href="#mc:0,bo:2,bo:8,bo:1,bo:2"> 3.9.2.3.  The code is stacked onto itself, like it's on the file</a></br>
</div><div class="vym-toc-branch-3"><a href="#mc:0,bo:2,bo:8,bo:2"> 3.9.3.  window.varName = window.varName || &quot;Another string&quot;;</a></br>
</div><div class="vym-toc-branch-4"><a href="#mc:0,bo:2,bo:8,bo:2,bo:0"> 3.9.3.1.  Oh, you already used that variable name, I'll excuse myself</a></br>
</div><div class="vym-toc-branch-4"><a href="#mc:0,bo:2,bo:8,bo:2,bo:1"> 3.9.3.2.  The window object checks the Global Execution Context</a></br>
</div><div class="vym-toc-branch-1"><a href="#mc:0,bo:3"> 4.  Objects and Functions</a></br>
</div><div class="vym-toc-branch-2"><a href="#mc:0,bo:3,bo:0"> 4.1.  objects and the Dot</a></br>
</div><div class="vym-toc-branch-3"><a href="#mc:0,bo:3,bo:0,bo:0"> 4.1.1.  Names and values</a></br>
</div><div class="vym-toc-branch-3"><a href="#mc:0,bo:3,bo:0,bo:1"> 4.1.2.  Object 0-1</a></br>
</div><div class="vym-toc-branch-4"><a href="#mc:0,bo:3,bo:0,bo:1,bo:0"> 4.1.2.1.  Primitave &quot;property&quot; 0-11</a></br>
</div><div class="vym-toc-branch-5"><a href="#mc:0,bo:3,bo:0,bo:1,bo:0,bo:0"> 4.1.2.1.1.  booleans, strings, numbers, etc.</a></br>
</div><div class="vym-toc-branch-4"><a href="#mc:0,bo:3,bo:0,bo:1,bo:1"> 4.1.2.2.  Another (child) Object &quot;property&quot; 0-12</a></br>
</div><div class="vym-toc-branch-4"><a href="#mc:0,bo:3,bo:0,bo:1,bo:2"> 4.1.2.3.  function &quot;method&quot; 0-13</a></br>
</div><div class="vym-toc-branch-4"><a href="#mc:0,bo:3,bo:0,bo:1,bo:3"> 4.1.2.4.  Numbers are related like addresses</a></br>
</div><div class="vym-toc-branch-4"><a href="#mc:0,bo:3,bo:0,bo:1,bo:4"> 4.1.2.5.  it knows where the other object are</a></br>
</div><div class="vym-toc-branch-3"><a href="#mc:0,bo:3,bo:0,bo:2"> 4.1.3.  Operator</a></br>
</div><div class="vym-toc-branch-4"><a href="#mc:0,bo:3,bo:0,bo:2,bo:0"> 4.1.3.1.  computed memeber access</a></br>
</div><div class="vym-toc-branch-5"><a href="#mc:0,bo:3,bo:0,bo:2,bo:0,bo:0"> 4.1.3.1.1.  person[&quot;firstname&quot;] = &quot;Jason&quot;;</a></br>
</div><div class="vym-toc-branch-4"><a href="#mc:0,bo:3,bo:0,bo:2,bo:1"> 4.1.3.2.  Member access</a></br>
</div><div class="vym-toc-branch-5"><a href="#mc:0,bo:3,bo:0,bo:2,bo:1,bo:0"> 4.1.3.2.1.  The dot</a></br>
</div><div class="vym-toc-branch-5"><a href="#mc:0,bo:3,bo:0,bo:2,bo:1,bo:1"> 4.1.3.2.2.  person.firstname</a></br>
</div><div class="vym-toc-branch-4"><a href="#mc:0,bo:3,bo:0,bo:2,bo:2"> 4.1.3.3.  just functoin / operators to FIND these properties</a></br>
</div><div class="vym-toc-branch-2"><a href="#mc:0,bo:3,bo:1"> 4.2.  Object Literals</a></br>
</div><div class="vym-toc-branch-3"><a href="#mc:0,bo:3,bo:1,bo:0"> 4.2.1.  var person = { name: &quot;Jason&quot;, sign: &quot;Leo&quot; };</a></br>
</div><div class="vym-toc-branch-3"><a href="#mc:0,bo:3,bo:1,bo:1"> 4.2.2.  JavaScript is liberal with whitespaces</a></br>
</div><div class="vym-toc-branch-3"><a href="#mc:0,bo:3,bo:1,bo:2"> 4.2.3.  Example code</a></br>
</div><div class="vym-toc-branch-3"><a href="#mc:0,bo:3,bo:1,bo:3"> 4.2.4.  Where ever I want, I can make an object!</a></br>
</div><div class="vym-toc-branch-3"><a href="#mc:0,bo:3,bo:1,bo:4"> 4.2.5.  The code that you're written isn't what is happening under the hood</a></br>
</div><div class="vym-toc-branch-2"><a href="#mc:0,bo:3,bo:2"> 4.3.  Framework Aside: Faking Namespaces</a></br>
</div><div class="vym-toc-branch-3"><a href="#mc:0,bo:3,bo:2,bo:0"> 4.3.1.  Namespaces</a></br>
</div><div class="vym-toc-branch-4"><a href="#mc:0,bo:3,bo:2,bo:0,bo:0"> 4.3.1.1.  A container for variables and functions</a></br>
</div><div class="vym-toc-branch-3"><a href="#mc:0,bo:3,bo:2,bo:1"> 4.3.2.  JavaScript doesn't have namespaces, it doesn't need to; it can fake it.</a></br>
</div><div class="vym-toc-branch-3"><a href="#mc:0,bo:3,bo:2,bo:2"> 4.3.3.  Problem: a case where a global variable needs 2 values</a></br>
</div><div class="vym-toc-branch-3"><a href="#mc:0,bo:3,bo:2,bo:3"> 4.3.4.  Solution: use an object to make sure there is not namespace collations</a></br>
</div><div class="vym-toc-branch-4"><a href="#mc:0,bo:3,bo:2,bo:3,bo:0"> 4.3.4.1.  Example code</a></br>
</div><div class="vym-toc-branch-5"><a href="#mc:0,bo:3,bo:2,bo:3,bo:0,bo:0"> 4.3.4.1.1.  </a></br>
</div><div class="vym-toc-branch-3"><a href="#mc:0,bo:3,bo:2,bo:4"> 4.3.5.  Pitfall</a></br>
</div><div class="vym-toc-branch-4"><a href="#mc:0,bo:3,bo:2,bo:4,bo:0"> 4.3.5.1.  var english = {}; english.greetings.greet1 = &quot;Hello&quot;;</a></br>
</div><div class="vym-toc-branch-5"><a href="#mc:0,bo:3,bo:2,bo:4,bo:0,bo:0"> 4.3.5.1.1.  Output:Uncaught type error: greetings is undefined</a></br>
</div><div class="vym-toc-branch-5"><a href="#mc:0,bo:3,bo:2,bo:4,bo:0,bo:1"> 4.3.5.1.2.  english.greeting will be undefined</a></br>
</div><div class="vym-toc-branch-2"><a href="#mc:0,bo:3,bo:3"> 4.4.  JSON and Object Literal</a></br>
</div><div class="vym-toc-branch-3"><a href="#mc:0,bo:3,bo:3,bo:0"> 4.4.1.  Inspired by object literal</a></br>
</div><div class="vym-toc-branch-4"><a href="#mc:0,bo:3,bo:3,bo:0,bo:0"> 4.4.1.1.  Not the same as object literals</a></br>
</div><div class="vym-toc-branch-3"><a href="#mc:0,bo:3,bo:3,bo:1"> 4.4.2.  JavaScript Object Nottation</a></br>
</div><div class="vym-toc-branch-3"><a href="#mc:0,bo:3,bo:3,bo:2"> 4.4.3.  Many formats were send across the wire (the internet)</a></br>
</div><div class="vym-toc-branch-3"><a href="#mc:0,bo:3,bo:3,bo:3"> 4.4.4.  Example code</a></br>
</div><div class="vym-toc-branch-3"><a href="#mc:0,bo:3,bo:3,bo:4"> 4.4.5.  JSON is more strict</a></br>
</div><div class="vym-toc-branch-2"><a href="#mc:0,bo:3,bo:4"> 4.5.  Functions are objects</a></br>
</div><div class="vym-toc-branch-3"><a href="#mc:0,bo:3,bo:4,bo:0"> 4.5.1.  1st class functions</a></br>
</div><div class="vym-toc-branch-4"><a href="#mc:0,bo:3,bo:4,bo:0,bo:0"> 4.5.1.1.  Everything you can do other types, you can do with functions</a></br>
</div><div class="vym-toc-branch-4"><a href="#mc:0,bo:3,bo:4,bo:0,bo:1"> 4.5.1.2.  You can have functions as paramerts, set them equal to variables, write them on
the fly</a></br>
</div><div class="vym-toc-branch-3"><a href="#mc:0,bo:3,bo:4,bo:1"> 4.5.2.  A function is a special type of object</a></br>
</div><div class="vym-toc-branch-4"><a href="#mc:0,bo:3,bo:4,bo:1,bo:0"> 4.5.2.1.  You can attach properties and methods to a function</a></br>
</div><div class="vym-toc-branch-5"><a href="#mc:0,bo:3,bo:4,bo:1,bo:0,bo:0"> 4.5.2.1.1.  Primative</a></br>
</div><div class="vym-toc-branch-5"><a href="#mc:0,bo:3,bo:4,bo:1,bo:0,bo:1"> 4.5.2.1.2.  Object</a></br>
</div><div class="vym-toc-branch-5"><a href="#mc:0,bo:3,bo:4,bo:1,bo:0,bo:2"> 4.5.2.1.3.  Functions</a></br>
</div><div class="vym-toc-branch-5"><a href="#mc:0,bo:3,bo:4,bo:1,bo:0,bo:3"> 4.5.2.1.4.  Example Code</a></br>
</div><div class="vym-toc-branch-4"><a href="#mc:0,bo:3,bo:4,bo:1,bo:1"> 4.5.2.2.  Special parts</a></br>
</div><div class="vym-toc-branch-5"><a href="#mc:0,bo:3,bo:4,bo:1,bo:1,bo:0"> 4.5.2.2.1.  Names</a></br>
</div><div class="vym-toc-branch-6"><a href="#mc:0,bo:3,bo:4,bo:1,bo:1,bo:0,bo:0"> 4.5.2.2.1.1.  Doesn't have to have one</a></br>
</div><div class="vym-toc-branch-5"><a href="#mc:0,bo:3,bo:4,bo:1,bo:1,bo:1"> 4.5.2.2.2.  Code property</a></br>
</div><div class="vym-toc-branch-6"><a href="#mc:0,bo:3,bo:4,bo:1,bo:1,bo:1,bo:0"> 4.5.2.2.2.1.  Invocable</a></br>
</div><div class="vym-toc-branch-7"><a href="#mc:0,bo:3,bo:4,bo:1,bo:1,bo:1,bo:0,bo:0"> 4.5.2.2.2.1.1.  Run this code please! (execution context, exeuction, etc.)</a></br>
</div><div class="vym-toc-branch-2"><a href="#mc:0,bo:3,bo:5"> 4.6.  Function Statements and Function Expressions</a></br>
</div><div class="vym-toc-branch-3"><a href="#mc:0,bo:3,bo:5,bo:0"> 4.6.1.  Expression: a unit of code that results in a value</a></br>
</div><div class="vym-toc-branch-4"><a href="#mc:0,bo:3,bo:5,bo:0,bo:0"> 4.6.1.1.  Doesn't have to save inside a variable</a></br>
</div><div class="vym-toc-branch-4"><a href="#mc:0,bo:3,bo:5,bo:0,bo:1"> 4.6.1.2.  Examples</a></br>
</div><div class="vym-toc-branch-4"><a href="#mc:0,bo:3,bo:5,bo:0,bo:2"> 4.6.1.3.  function expression</a></br>
</div><div class="vym-toc-branch-5"><a href="#mc:0,bo:3,bo:5,bo:0,bo:2,bo:0"> 4.6.1.3.1.  It doesn't have a name, it's an anonymous function stored in memory with the
name of anaoymous greet</a></br>
</div><div class="vym-toc-branch-4"><a href="#mc:0,bo:3,bo:5,bo:0,bo:3"> 4.6.1.4.  Returns an object, while a function statement will say &quot;yeah there's a function
there&quot; and won't execute it in any way</a></br>
</div><div class="vym-toc-branch-4"><a href="#mc:0,bo:3,bo:5,bo:0,bo:4"> 4.6.1.5.  Variable set to undefined first</a></br>
</div><div class="vym-toc-branch-3"><a href="#mc:0,bo:3,bo:5,bo:1"> 4.6.2.  STatement: does work</a></br>
</div><div class="vym-toc-branch-4"><a href="#mc:0,bo:3,bo:5,bo:1,bo:0"> 4.6.2.1.  If statement</a></br>
</div><div class="vym-toc-branch-4"><a href="#mc:0,bo:3,bo:5,bo:1,bo:1"> 4.6.2.2.  function statement</a></br>
</div><div class="vym-toc-branch-5"><a href="#mc:0,bo:3,bo:5,bo:1,bo:1,bo:0"> 4.6.2.2.1.  It doesn't result in a value</a></br>
</div><div class="vym-toc-branch-5"><a href="#mc:0,bo:3,bo:5,bo:1,bo:1,bo:1"> 4.6.2.2.2.  Available in memory</a></br>
</div><div class="vym-toc-branch-5"><a href="#mc:0,bo:3,bo:5,bo:1,bo:1,bo:2"> 4.6.2.2.3.  Hoisted</a></br>
</div><div class="vym-toc-branch-3"><a href="#mc:0,bo:3,bo:5,bo:2"> 4.6.3.  Good good is being understandable and consie</a></br>
</div><div class="vym-toc-branch-3"><a href="#mc:0,bo:3,bo:5,bo:3"> 4.6.4.  function log(a) {</a></br>
</div><div class="vym-toc-branch-3"><a href="#mc:0,bo:3,bo:5,bo:4"> 4.6.5.  Passing function around, give function to function as parameters, use them like
variables = functional programming</a></br>
</div><div class="vym-toc-branch-3"><a href="#mc:0,bo:3,bo:5,bo:5"> 4.6.6.  first class function'; functions in JS are objects</a></br>
</div><div class="vym-toc-branch-2"><a href="#mc:0,bo:3,bo:6"> 4.7.  By Reference / By Value</a></br>
</div><div class="vym-toc-branch-3"><a href="#mc:0,bo:3,bo:6,bo:0"> 4.7.1.  By Value</a></br>
</div><div class="vym-toc-branch-4"><a href="#mc:0,bo:3,bo:6,bo:0,bo:0"> 4.7.1.1.  b = a</a></br>
</div><div class="vym-toc-branch-4"><a href="#mc:0,bo:3,bo:6,bo:0,bo:1"> 4.7.1.2.  Model</a></br>
</div><div class="vym-toc-branch-4"><a href="#mc:0,bo:3,bo:6,bo:0,bo:2"> 4.7.1.3.  Primitve types! (all, except objects)</a></br>
</div><div class="vym-toc-branch-4"><a href="#mc:0,bo:3,bo:6,bo:0,bo:3"> 4.7.1.4.  After copying, the variables can stay on their own.</a></br>
</div><div class="vym-toc-branch-3"><a href="#mc:0,bo:3,bo:6,bo:1"> 4.7.2.  By Reference</a></br>
</div><div class="vym-toc-branch-4"><a href="#mc:0,bo:3,bo:6,bo:1,bo:0"> 4.7.2.1.  Objects (all objects, which includes functions)</a></br>
</div><div class="vym-toc-branch-4"><a href="#mc:0,bo:3,bo:6,bo:1,bo:1"> 4.7.2.2.  Two names point to the same place in memory</a></br>
</div><div class="vym-toc-branch-4"><a href="#mc:0,bo:3,bo:6,bo:1,bo:2"> 4.7.2.3.  Model</a></br>
</div><div class="vym-toc-branch-3"><a href="#mc:0,bo:3,bo:6,bo:2"> 4.7.3.  Code</a></br>
</div><div class="vym-toc-branch-3"><a href="#mc:0,bo:3,bo:6,bo:3"> 4.7.4.  mutated</a></br>
</div><div class="vym-toc-branch-4"><a href="#mc:0,bo:3,bo:6,bo:3,bo:0"> 4.7.4.1.  To chang a avlue</a></br>
</div><div class="vym-toc-branch-3"><a href="#mc:0,bo:3,bo:6,bo:4"> 4.7.5.  immuatable</a></br>
</div><div class="vym-toc-branch-4"><a href="#mc:0,bo:3,bo:6,bo:4,bo:0"> 4.7.5.1.  Cannot be change</a></br>
</div><div class="vym-toc-branch-2"><a href="#mc:0,bo:3,bo:7"> 4.8.  Objects, Functions, and &quot;this&quot;</a></br>
</div><div class="vym-toc-branch-3"><a href="#mc:0,bo:3,bo:7,bo:0"> 4.8.1.  Each time an execution context is made, JavaScript makes the 'this' object</a></br>
</div><div class="vym-toc-branch-3"><a href="#mc:0,bo:3,bo:7,bo:1"> 4.8.2.  3 Execution Conext</a></br>
</div><div class="vym-toc-branch-4"><a href="#mc:0,bo:3,bo:7,bo:1,bo:0"> 4.8.2.1.  All 3 'this' point to the global object, the Window object</a></br>
</div><div class="vym-toc-branch-4"><a href="#mc:0,bo:3,bo:7,bo:1,bo:1"> 4.8.2.2.  Code Example</a></br>
</div><div class="vym-toc-branch-4"><a href="#mc:0,bo:3,bo:7,bo:1,bo:2"> 4.8.2.3.  'this' will point to the ojbect is attached to. It will point to the object it
contains to.</a></br>
</div><div class="vym-toc-branch-4"><a href="#mc:0,bo:3,bo:7,bo:1,bo:3"> 4.8.2.4.  You can access the properties within the object using 'this'</a></br>
</div><div class="vym-toc-branch-4"><a href="#mc:0,bo:3,bo:7,bo:1,bo:4"> 4.8.2.5.  when just invocating a funciton, 'this' points to the global object</a></br>
</div><div class="vym-toc-branch-4"><a href="#mc:0,bo:3,bo:7,bo:1,bo:5"> 4.8.2.6.  when in a object, 'this points to the object itself</a></br>
</div><div class="vym-toc-branch-2"><a href="#mc:0,bo:3,bo:8"> 4.9.  Conceptual Aside: Collection of Anything</a></br>
</div><div class="vym-toc-branch-2"><a href="#mc:0,bo:3,bo:9"> 4.10.  arguments and &quot;spread&quot;</a></br>
</div><div class="vym-toc-branch-3"><a href="#mc:0,bo:3,bo:9,bo:0"> 4.10.1.  </a></br>
</div><div class="vym-toc-branch-3"><a href="#mc:0,bo:3,bo:9,bo:1"> 4.10.2.  arguments hold all the values of all of the parameters passed into a function</a></br>
</div><div class="vym-toc-branch-3"><a href="#mc:0,bo:3,bo:9,bo:2"> 4.10.3.  Arguments =&gt; The parameters yyou pass into a function</a></br>
</div><div class="vym-toc-branch-3"><a href="#mc:0,bo:3,bo:9,bo:3"> 4.10.4.  JavaScript gives you a key word that stores tthem in</a></br>
</div><div class="vym-toc-branch-3"><a href="#mc:0,bo:3,bo:9,bo:4"> 4.10.5.  Example</a></br>
</div><div class="vym-toc-branch-3"><a href="#mc:0,bo:3,bo:9,bo:5"> 4.10.6.  Hving default parameters</a></br>
</div><div class="vym-toc-branch-3"><a href="#mc:0,bo:3,bo:9,bo:6"> 4.10.7.  arguments keyword IS NOT really an array.</a></br>
</div><div class="vym-toc-branch-4"><a href="#mc:0,bo:3,bo:9,bo:6,bo:0"> 4.10.7.1.  Know as array-like</a></br>
</div><div class="vym-toc-branch-3"><a href="#mc:0,bo:3,bo:9,bo:7"> 4.10.8.  Arguments are depreeated</a></br>
</div><div class="vym-toc-branch-3"><a href="#mc:0,bo:3,bo:9,bo:8"> 4.10.9.  Spread!</a></br>
</div><div class="vym-toc-branch-4"><a href="#mc:0,bo:3,bo:9,bo:8,bo:0"> 4.10.9.1.  ...other</a></br>
</div><div class="vym-toc-branch-4"><a href="#mc:0,bo:3,bo:9,bo:8,bo:1"> 4.10.9.2.  Take the paramets and put them in an array called other</a></br>
</div><div class="vym-toc-branch-2"><a href="#mc:0,bo:3,bo:10"> 4.11.  Framework Aside : function overloading</a></br>
</div><div class="vym-toc-branch-3"><a href="#mc:0,bo:3,bo:10,bo:0"> 4.11.1.  JavaScript doesn't have this, and we don't care</a></br>
</div><div class="vym-toc-branch-3"><a href="#mc:0,bo:3,bo:10,bo:1"> 4.11.2.  We have 1st class functions</a></br>
</div><div class="vym-toc-branch-3"><a href="#mc:0,bo:3,bo:10,bo:2"> 4.11.3.  Example</a></br>
</div><div class="vym-toc-branch-2"><a href="#mc:0,bo:3,bo:11"> 4.12.  Concept Aside: Syntax Parser</a></br>
</div><div class="vym-toc-branch-3"><a href="#mc:0,bo:3,bo:11,bo:0"> 4.12.1.  The computer transflate it into what the computer can understand</a></br>
</div><div class="vym-toc-branch-3"><a href="#mc:0,bo:3,bo:11,bo:1"> 4.12.2.  A browser is on for JavaScript</a></br>
</div><div class="vym-toc-branch-3"><a href="#mc:0,bo:3,bo:11,bo:2"> 4.12.3.  if it see proper syntax, it'll know what you tend to do</a></br>
</div><div class="vym-toc-branch-3"><a href="#mc:0,bo:3,bo:11,bo:3"> 4.12.4.  character by  character making assumptions, rules, and might even make changes
to your code; trying to determine what you intend to do</a></br>
</div><div class="vym-toc-branch-2"><a href="#mc:0,bo:3,bo:12"> 4.13.  Dangerous Aside!!!!!!! Automatic Semicolin Insertation</a></br>
</div><div class="vym-toc-branch-3"><a href="#mc:0,bo:3,bo:12,bo:0"> 4.13.1.  The JavaScript syntax parser will put a ; where it expects it to be.</a></br>
</div><div class="vym-toc-branch-3"><a href="#mc:0,bo:3,bo:12,bo:1"> 4.13.2.  Put the semicolons, as you don't want JavaScript to guess for you.</a></br>
</div><div class="vym-toc-branch-3"><a href="#mc:0,bo:3,bo:12,bo:2"> 4.13.3.  Returns (enter) may cause some problems in your code</a></br>
</div><div class="vym-toc-branch-3"><a href="#mc:0,bo:3,bo:12,bo:3"> 4.13.4.  Example (Incorrect)</a></br>
</div><div class="vym-toc-branch-3"><a href="#mc:0,bo:3,bo:12,bo:4"> 4.13.5.  Example (Correct)</a></br>
</div><div class="vym-toc-branch-3"><a href="#mc:0,bo:3,bo:12,bo:5"> 4.13.6.  Put { on the same line as the statement (object, function, if, etc.)</a></br>
</div><div class="vym-toc-branch-2"><a href="#mc:0,bo:3,bo:13"> 4.14.  Conceptual Aside :WhitespacesJ</a></br>
</div><div class="vym-toc-branch-3"><a href="#mc:0,bo:3,bo:13,bo:0"> 4.14.1.  JavaScript is very liberal</a></br>
</div><div class="vym-toc-branch-3"><a href="#mc:0,bo:3,bo:13,bo:1"> 4.14.2.  Make comments! You add one using white spaces</a></br>
</div><div class="vym-toc-branch-4"><a href="#mc:0,bo:3,bo:13,bo:1,bo:0"> 4.14.2.1.  </a></br>
</div><div class="vym-toc-branch-3"><a href="#mc:0,bo:3,bo:13,bo:2"> 4.14.3.  Example</a></br>
</div><div class="vym-toc-branch-3"><a href="#mc:0,bo:3,bo:13,bo:3"> 4.14.4.  Programming will be happy to put a lot of coments to take adventage of this</a></br>
</div><div class="vym-toc-branch-3"><a href="#mc:0,bo:3,bo:13,bo:4"> 4.14.5.  When coming back to your own code you'll be happy</a></br>
</div><div class="vym-toc-branch-2"><a href="#mc:0,bo:3,bo:14"> 4.15.  Immeditaly Invoked Function Expressions</a></br>
</div><div class="vym-toc-branch-3"><a href="#mc:0,bo:3,bo:14,bo:0"> 4.15.1.  Function statment</a></br>
</div><div class="vym-toc-branch-3"><a href="#mc:0,bo:3,bo:14,bo:1"> 4.15.2.  Function Expression</a></br>
</div><div class="vym-toc-branch-3"><a href="#mc:0,bo:3,bo:14,bo:2"> 4.15.3.  Functoins</a></br>
</div><div class="vym-toc-branch-4"><a href="#mc:0,bo:3,bo:14,bo:2,bo:0"> 4.15.3.1.  Code property (innovcation)</a></br>
</div><div class="vym-toc-branch-4"><a href="#mc:0,bo:3,bo:14,bo:2,bo:1"> 4.15.3.2.  Name</a></br>
</div><div class="vym-toc-branch-3"><a href="#mc:0,bo:3,bo:14,bo:3"> 4.15.4.  Invoking something on the fly</a></br>
</div><div class="vym-toc-branch-3"><a href="#mc:0,bo:3,bo:14,bo:4"> 4.15.5.  IIFE</a></br>
</div><div class="vym-toc-branch-4"><a href="#mc:0,bo:3,bo:14,bo:4,bo:0"> 4.15.5.1.  Invocate a function immeditably after creating it</a></br>
</div><div class="vym-toc-branch-4"><a href="#mc:0,bo:3,bo:14,bo:4,bo:1"> 4.15.5.2.  The variable holds the returned value, not the function</a></br>
</div><div class="vym-toc-branch-3"><a href="#mc:0,bo:3,bo:14,bo:5"> 4.15.6.  We can put strings, numbers, and objects anywhere, that's not doing anything; we
can do so.</a></br>
</div><div class="vym-toc-branch-4"><a href="#mc:0,bo:3,bo:14,bo:5,bo:0"> 4.15.6.1.  We can't do it with functions; it wants to be a function STATEMENT</a></br>
</div><div class="vym-toc-branch-4"><a href="#mc:0,bo:3,bo:14,bo:5,bo:1"> 4.15.6.2.  UNLESS we have a function expression, by WRAPPING YOUR FUNCTION IN PARENTHESES</a></br>
</div><div class="vym-toc-branch-3"><a href="#mc:0,bo:3,bo:14,bo:6"> 4.15.7.  Expression: Something that returns a value</a></br>
</div><div class="vym-toc-branch-3"><a href="#mc:0,bo:3,bo:14,bo:7"> 4.15.8.  What's special about this?</a></br>
</div><div class="vym-toc-branch-4"><a href="#mc:0,bo:3,bo:14,bo:7,bo:0"> 4.15.8.1.  we can have a function expression (wrapped in parens to trick the syntax
paratex, then we can write a function and run it at the same time</a></br>
</div><div class="vym-toc-branch-4"><a href="#mc:0,bo:3,bo:14,bo:7,bo:1"> 4.15.8.2.  Another Example</a></br>
</div><div class="vym-toc-branch-3"><a href="#mc:0,bo:3,bo:14,bo:8"> 4.15.9.  Framework aside IIFE and Safe Code</a></br>
</div><div class="vym-toc-branch-4"><a href="#mc:0,bo:3,bo:14,bo:8,bo:0"> 4.15.9.1.  Ran Code</a></br>
</div><div class="vym-toc-branch-4"><a href="#mc:0,bo:3,bo:14,bo:8,bo:1"> 4.15.9.2.  Execution Stack</a></br>
</div><div class="vym-toc-branch-5"><a href="#mc:0,bo:3,bo:14,bo:8,bo:1,bo:0"> 4.15.9.2.1.  Hits the function expression, create an object with code (anynomous function)</a></br>
</div><div class="vym-toc-branch-5"><a href="#mc:0,bo:3,bo:14,bo:8,bo:1,bo:1"> 4.15.9.2.2.  Hits the parentheses that invokes the funciton</a></br>
</div><div class="vym-toc-branch-5"><a href="#mc:0,bo:3,bo:14,bo:8,bo:1,bo:2"> 4.15.9.2.3.  Execution Conext of the anynomous function</a></br>
</div><div class="vym-toc-branch-6"><a href="#mc:0,bo:3,bo:14,bo:8,bo:1,bo:2,bo:0"> 4.15.9.2.3.1.  The parameter goes into the Execution Conext of the anyonmous function, it is
not touching the global enviroment.</a></br>
</div><div class="vym-toc-branch-6"><a href="#mc:0,bo:3,bo:14,bo:8,bo:1,bo:2,bo:1"> 4.15.9.2.3.2.  This allows us to have 2 variable names in JavaScript; esecially when usng
frameworks.</a></br>
</div><div class="vym-toc-branch-4"><a href="#mc:0,bo:3,bo:14,bo:8,bo:2"> 4.15.9.3.  Image</a></br>
</div><div class="vym-toc-branch-4"><a href="#mc:0,bo:3,bo:14,bo:8,bo:3"> 4.15.9.4.  The entire framework wll be in an IIFE to prevent code from crashing into other
code</a></br>
</div><div class="vym-toc-branch-5"><a href="#mc:0,bo:3,bo:14,bo:8,bo:3,bo:0"> 4.15.9.4.1.  This will also create reuseable code</a></br>
</div><div class="vym-toc-branch-4"><a href="#mc:0,bo:3,bo:14,bo:8,bo:4"> 4.15.9.5.  What if we want someting inthe global object?</a></br>
</div><div class="vym-toc-branch-5"><a href="#mc:0,bo:3,bo:14,bo:8,bo:4,bo:0"> 4.15.9.5.1.  Pass the global object (window) into the IIFE</a></br>
</div><div class="vym-toc-branch-6"><a href="#mc:0,bo:3,bo:14,bo:8,bo:4,bo:0,bo:0"> 4.15.9.5.1.1.  Example</a></br>
</div><div class="vym-toc-branch-2"><a href="#mc:0,bo:3,bo:15"> 4.16.  Understanding Closures</a></br>
</div><div class="vym-toc-branch-3"><a href="#mc:0,bo:3,bo:15,bo:0"> 4.16.1.  Example</a></br>
</div><div class="vym-toc-branch-3"><a href="#mc:0,bo:3,bo:15,bo:1"> 4.16.2.  How does the sayhey varable still know the whattosay value?</a></br>
</div><div class="vym-toc-branch-3"><a href="#mc:0,bo:3,bo:15,bo:2"> 4.16.3.  This is possible due to closures</a></br>
</div><div class="vym-toc-branch-3"><a href="#mc:0,bo:3,bo:15,bo:3"> 4.16.4.  The greet function needs to &quot;end&quot; after the execution is complete. How does it
work?</a></br>
</div><div class="vym-toc-branch-4"><a href="#mc:0,bo:3,bo:15,bo:3,bo:0"> 4.16.4.1.  It's pop off the stack when greet finshes reading &quot;return&quot;</a></br>
</div><div class="vym-toc-branch-3"><a href="#mc:0,bo:3,bo:15,bo:4"> 4.16.5.  The Execution Conext has a space in memory where the variables live.</a></br>
</div><div class="vym-toc-branch-4"><a href="#mc:0,bo:3,bo:15,bo:4,bo:0"> 4.16.5.1.  Using it cleans out, due to garabage collection</a></br>
</div><div class="vym-toc-branch-4"><a href="#mc:0,bo:3,bo:15,bo:4,bo:1"> 4.16.5.2.  However, when the execution conext is complete, the vairables in memory are
still there</a></br>
</div><div class="vym-toc-branch-3"><a href="#mc:0,bo:3,bo:15,bo:5"> 4.16.6.  When sayHey hits whatstosay, it'll go up the Scope Chain</a></br>
</div><div class="vym-toc-branch-4"><a href="#mc:0,bo:3,bo:15,bo:5,bo:0"> 4.16.6.1.  What's in memoery for the &quot;lost&quot; execution conext, the variable can still go
down the scope chain.</a></br>
</div><div class="vym-toc-branch-4"><a href="#mc:0,bo:3,bo:15,bo:5,bo:1"> 4.16.6.2.  It's &quot;closed it&quot; the outer variables.</a></br>
</div><div class="vym-toc-branch-4"><a href="#mc:0,bo:3,bo:15,bo:5,bo:2"> 4.16.6.3.  Closing in the variables that are needed.</a></br>
</div><div class="vym-toc-branch-3"><a href="#mc:0,bo:3,bo:15,bo:6"> 4.16.7.  Clousres are a feature of JavaScript; it'll do it for you.</a></br>
</div><div class="vym-toc-branch-4"><a href="#mc:0,bo:3,bo:15,bo:6,bo:0"> 4.16.7.1.  &quot;You&quot; don't create a clousre</a></br>
</div><div class="vym-toc-branch-3"><a href="#mc:0,bo:3,bo:15,bo:7"> 4.16.8.  You don't need to worry that the outer execution conext is running; it'll have
the variables within scope</a></br>
</div><div class="vym-toc-branch-3"><a href="#mc:0,bo:3,bo:15,bo:8"> 4.16.9.  Classic Example</a></br>
</div><div class="vym-toc-branch-4"><a href="#mc:0,bo:3,bo:15,bo:8,bo:0"> 4.16.9.1.  pic</a></br>
</div><div class="vym-toc-branch-4"><a href="#mc:0,bo:3,bo:15,bo:8,bo:1"> 4.16.9.2.  What is the value of the PARENT, what is the value of the memory RIGHT NOW, when
the code is being executed.</a></br>
</div><div class="vym-toc-branch-4"><a href="#mc:0,bo:3,bo:15,bo:8,bo:2"> 4.16.9.3.  Buildfunctions2</a></br>
</div><div class="vym-toc-branch-4"><a href="#mc:0,bo:3,bo:15,bo:8,bo:3"> 4.16.9.4.  IIFE Version</a></br>
</div><div class="vym-toc-branch-3"><a href="#mc:0,bo:3,bo:15,bo:9"> 4.16.10.  Framework Aside: Function Factories</a></br>
</div><div class="vym-toc-branch-4"><a href="#mc:0,bo:3,bo:15,bo:9,bo:0"> 4.16.10.1.  Clousres give us the ability to have set parameters in a function; building it
off another function</a></br>
</div><div class="vym-toc-branch-4"><a href="#mc:0,bo:3,bo:15,bo:9,bo:1"> 4.16.10.2.  When calling the built funciton; the orginal parameter passed through, doesn't
have access to the parameter</a></br>
</div><div class="vym-toc-branch-4"><a href="#mc:0,bo:3,bo:15,bo:9,bo:2"> 4.16.10.3.  Example</a></br>
</div><div class="vym-toc-branch-4"><a href="#mc:0,bo:3,bo:15,bo:9,bo:3"> 4.16.10.4.  When calling the function twice, they aren't in the same memeory space since
they are in another execution context</a></br>
</div><div class="vym-toc-branch-4"><a href="#mc:0,bo:3,bo:15,bo:9,bo:4"> 4.16.10.5.  Image</a></br>
</div><div class="vym-toc-branch-3"><a href="#mc:0,bo:3,bo:15,bo:10"> 4.16.11.  Closures and CallbacksC</a></br>
</div><div class="vym-toc-branch-4"><a href="#mc:0,bo:3,bo:15,bo:10,bo:0"> 4.16.11.1.  Example</a></br>
</div><div class="vym-toc-branch-4"><a href="#mc:0,bo:3,bo:15,bo:10,bo:1"> 4.16.11.2.  We are passing a function as a variable (first class function)</a></br>
</div><div class="vym-toc-branch-4"><a href="#mc:0,bo:3,bo:15,bo:10,bo:2"> 4.16.11.3.  We used a function expression (declaring a function on the fly)</a></br>
</div><div class="vym-toc-branch-4"><a href="#mc:0,bo:3,bo:15,bo:10,bo:3"> 4.16.11.4.  We have greet as clousres</a></br>
</div><div class="vym-toc-branch-4"><a href="#mc:0,bo:3,bo:15,bo:10,bo:4"> 4.16.11.5.  All of long you've used clousres and first call functoin :D</a></br>
</div><div class="vym-toc-branch-4"><a href="#mc:0,bo:3,bo:15,bo:10,bo:5"> 4.16.11.6.  Callback; when you're done working, call the function the other function for me
when yo'ure odne</a></br>
</div><div class="vym-toc-branch-4"><a href="#mc:0,bo:3,bo:15,bo:10,bo:6"> 4.16.11.7.  Callback function: a function given to another function to be run when the other
function is finished</a></br>
</div><div class="vym-toc-branch-5"><a href="#mc:0,bo:3,bo:15,bo:10,bo:6,bo:0"> 4.16.11.7.1.  The function invoked &quot;callsback&quot; by calling the function given when finished</a></br>
</div><div class="vym-toc-branch-5"><a href="#mc:0,bo:3,bo:15,bo:10,bo:6,bo:1"> 4.16.11.7.2.  Example Callback</a></br>
</div><div class="vym-toc-branch-2"><a href="#mc:0,bo:3,bo:16"> 4.17.  call(), apply() bind()</a></br>
</div><div class="vym-toc-branch-3"><a href="#mc:0,bo:3,bo:16,bo:0"> 4.17.1.  Controlling what the &quot;this&quot; variable can be?</a></br>
</div><div class="vym-toc-branch-4"><a href="#mc:0,bo:3,bo:16,bo:0,bo:0"> 4.17.1.1.  That's what these function can do</a></br>
</div><div class="vym-toc-branch-3"><a href="#mc:0,bo:3,bo:16,bo:1"> 4.17.2.  All function get special methods</a></br>
</div><div class="vym-toc-branch-4"><a href="#mc:0,bo:3,bo:16,bo:1,bo:0"> 4.17.2.1.  bind</a></br>
</div><div class="vym-toc-branch-5"><a href="#mc:0,bo:3,bo:16,bo:1,bo:0,bo:0"> 4.17.2.1.1.  Creates a copy, and passing what we want the &quot;this vairable&quot; is</a></br>
</div><div class="vym-toc-branch-5"><a href="#mc:0,bo:3,bo:16,bo:1,bo:0,bo:1"> 4.17.2.1.2.  Doesn't call it</a></br>
</div><div class="vym-toc-branch-4"><a href="#mc:0,bo:3,bo:16,bo:1,bo:1"> 4.17.2.2.  call</a></br>
</div><div class="vym-toc-branch-5"><a href="#mc:0,bo:3,bo:16,bo:1,bo:1,bo:0"> 4.17.2.2.1.  logName.call invokes the function, yet we can pass  the &quot;this&quot; variable, and
pass in parameters</a></br>
</div><div class="vym-toc-branch-4"><a href="#mc:0,bo:3,bo:16,bo:1,bo:2"> 4.17.2.3.  apply</a></br>
</div><div class="vym-toc-branch-5"><a href="#mc:0,bo:3,bo:16,bo:1,bo:2,bo:0"> 4.17.2.3.1.  aSame as call, yet you'll have to use arrays; which would help with mathmatics</a></br>
</div><div class="vym-toc-branch-5"><a href="#mc:0,bo:3,bo:16,bo:1,bo:2,bo:1"> 4.17.2.3.2.  Can also use a IIFE</a></br>
</div><div class="vym-toc-branch-6"><a href="#mc:0,bo:3,bo:16,bo:1,bo:2,bo:1,bo:0"> 4.17.2.3.2.1.  When would we use this?</a></br>
</div><div class="vym-toc-branch-6"><a href="#mc:0,bo:3,bo:16,bo:1,bo:2,bo:1,bo:1"> 4.17.2.3.2.2.  Function Borrowing</a></br>
</div><div class="vym-toc-branch-7"><a href="#mc:0,bo:3,bo:16,bo:1,bo:2,bo:1,bo:1,bo:0"> 4.17.2.3.2.2.1.  We borrwed a functoin and used the person2 object</a></br>
</div><div class="vym-toc-branch-6"><a href="#mc:0,bo:3,bo:16,bo:1,bo:2,bo:1,bo:2"> 4.17.2.3.2.3.  Function Currying (bind)</a></br>
</div><div class="vym-toc-branch-7"><a href="#mc:0,bo:3,bo:16,bo:1,bo:2,bo:1,bo:2,bo:0"> 4.17.2.3.2.3.1.  Sets permant values of the parameters for the copied (new) funciton)</a></br>
</div><div class="vym-toc-branch-7"><a href="#mc:0,bo:3,bo:16,bo:1,bo:2,bo:1,bo:2,bo:1"> 4.17.2.3.2.3.2.  BWA: function currying: building a copy of a function yet with set parametrs,
good for mathmatics</a></br>
</div><div class="vym-toc-branch-3"><a href="#mc:0,bo:3,bo:16,bo:2"> 4.17.3.  Image</a></br>
</div><div class="vym-toc-branch-2"><a href="#mc:0,bo:3,bo:17"> 4.18.  Functional Programming</a></br>
</div><div class="vym-toc-branch-3"><a href="#mc:0,bo:3,bo:17,bo:0"> 4.18.1.  JavaScript looks like other functional programming</a></br>
</div><div class="vym-toc-branch-4"><a href="#mc:0,bo:3,bo:17,bo:0,bo:0"> 4.18.1.1.  </a></br>
</div><div class="vym-toc-branch-4"><a href="#mc:0,bo:3,bo:17,bo:0,bo:1"> 4.18.1.2.  </a></br>
</div><div class="vym-toc-branch-3"><a href="#mc:0,bo:3,bo:17,bo:1"> 4.18.2.  Think and code in terms of functions</a></br>
</div><div class="vym-toc-branch-3"><a href="#mc:0,bo:3,bo:17,bo:2"> 4.18.3.  Introduces a new approach of thinking in programming due to first class
functions</a></br>
</div><div class="vym-toc-branch-3"><a href="#mc:0,bo:3,bo:17,bo:3"> 4.18.4.  mapForEach example</a></br>
</div><div class="vym-toc-branch-4"><a href="#mc:0,bo:3,bo:17,bo:3,bo:0"> 4.18.4.1.  Telling the parameter function to do the work to each item</a></br>
</div><div class="vym-toc-branch-4"><a href="#mc:0,bo:3,bo:17,bo:3,bo:1"> 4.18.4.2.  Clean, easy to read, consie, REUSEABLE code</a></br>
</div><div class="vym-toc-branch-3"><a href="#mc:0,bo:3,bo:17,bo:4"> 4.18.5.  In functional programming, don't mutated data.</a></br>
</div><div class="vym-toc-branch-4"><a href="#mc:0,bo:3,bo:17,bo:4,bo:0"> 4.18.5.1.  Return something new</a></br>
</div><div class="vym-toc-branch-4"><a href="#mc:0,bo:3,bo:17,bo:4,bo:1"> 4.18.5.2.  Mutated the data early</a></br>
</div><div class="vym-toc-branch-4"><a href="#mc:0,bo:3,bo:17,bo:4,bo:2"> 4.18.5.3.  It could become an entire course</a></br>
</div><div class="vym-toc-branch-4"><a href="#mc:0,bo:3,bo:17,bo:4,bo:3"> 4.18.5.4.  This is what take JavaScript to the next level</a></br>
</div><div class="vym-toc-branch-3"><a href="#mc:0,bo:3,bo:17,bo:5"> 4.18.6.  Part 2</a></br>
</div><div class="vym-toc-branch-4"><a href="#mc:0,bo:3,bo:17,bo:5,bo:0"> 4.18.6.1.  underscore.js library</a></br>
</div><div class="vym-toc-branch-5"><a href="#mc:0,bo:3,bo:17,bo:5,bo:0,bo:0"> 4.18.6.1.1.  </a></br>
</div><div class="vym-toc-branch-4"><a href="#mc:0,bo:3,bo:17,bo:5,bo:1"> 4.18.6.2.  An Open Source Eduation</a></br>
</div><div class="vym-toc-branch-5"><a href="#mc:0,bo:3,bo:17,bo:5,bo:1,bo:0"> 4.18.6.2.1.  Read and Write good JavaScript</a></br>
</div><div class="vym-toc-branch-5"><a href="#mc:0,bo:3,bo:17,bo:5,bo:1,bo:1"> 4.18.6.2.2.  You'll need to understand the foundation of JavaScript</a></br>
</div><div class="vym-toc-branch-4"><a href="#mc:0,bo:3,bo:17,bo:5,bo:2"> 4.18.6.3.  underscore.js example</a></br>
</div><div class="vym-toc-branch-1"><a href="#mc:0,bo:4"> 5.  Object Oriented JavaScript and Prototypal Inhertiance</a></br>
</div><div class="vym-toc-branch-2"><a href="#mc:0,bo:4,bo:0"> 5.1.  Conceptual Aside: Classical vs Proptoypal Inhertiance</a></br>
</div><div class="vym-toc-branch-3"><a href="#mc:0,bo:4,bo:0,bo:0"> 5.1.1.  BWA: Inhertiance: when an object gets access to antoher objects properties and
methods</a></br>
</div><div class="vym-toc-branch-3"><a href="#mc:0,bo:4,bo:0,bo:1"> 5.1.2.  Classical</a></br>
</div><div class="vym-toc-branch-4"><a href="#mc:0,bo:4,bo:0,bo:1,bo:0"> 5.1.2.1.  Common structure in Java</a></br>
</div><div class="vym-toc-branch-4"><a href="#mc:0,bo:4,bo:0,bo:1,bo:1"> 5.1.2.2.  Cons: verbose</a></br>
</div><div class="vym-toc-branch-4"><a href="#mc:0,bo:4,bo:0,bo:1,bo:2"> 5.1.2.3.  Extedned vocabulary</a></br>
</div><div class="vym-toc-branch-3"><a href="#mc:0,bo:4,bo:0,bo:2"> 5.1.3.  Prototypal</a></br>
</div><div class="vym-toc-branch-4"><a href="#mc:0,bo:4,bo:0,bo:2,bo:0"> 5.1.3.1.  Flexible, simple, easy to understand</a></br>
</div><div class="vym-toc-branch-4"><a href="#mc:0,bo:4,bo:0,bo:2,bo:1"> 5.1.3.2.  Very different than other programming languages</a></br>
</div><div class="vym-toc-branch-2"><a href="#mc:0,bo:4,bo:1"> 5.2.  Understanding the Prototype</a></br>
</div><div class="vym-toc-branch-3"><a href="#mc:0,bo:4,bo:1,bo:0"> 5.2.1.  All objects (including functions) has the prototype object</a></br>
</div><div class="vym-toc-branch-3"><a href="#mc:0,bo:4,bo:1,bo:1"> 5.2.2.  Image</a></br>
</div><div class="vym-toc-branch-3"><a href="#mc:0,bo:4,bo:1,bo:2"> 5.2.3.  It will look like prop2 within proto</a></br>
</div><div class="vym-toc-branch-3"><a href="#mc:0,bo:4,bo:1,bo:3"> 5.2.4.  Each object can has it's own prototype</a></br>
</div><div class="vym-toc-branch-3"><a href="#mc:0,bo:4,bo:1,bo:4"> 5.2.5.  obj.prop2 will go down the PROTOTYPE CHAIN</a></br>
</div><div class="vym-toc-branch-4"><a href="#mc:0,bo:4,bo:1,bo:4,bo:0"> 5.2.5.1.  The JS Engine will search for the property for us</a></br>
</div><div class="vym-toc-branch-3"><a href="#mc:0,bo:4,bo:1,bo:5"> 5.2.6.  Code Example</a></br>
</div><div class="vym-toc-branch-4"><a href="#mc:0,bo:4,bo:1,bo:5,bo:0"> 5.2.6.1.  NEVER DO THIS EVER.  IT WILL SLOW DOWN YOUR STUFF</a></br>
</div><div class="vym-toc-branch-4"><a href="#mc:0,bo:4,bo:1,bo:5,bo:1"> 5.2.6.2.  this also knows the object that orginated the call</a></br>
</div><div class="vym-toc-branch-2"><a href="#mc:0,bo:4,bo:2"> 5.3.  Everything is an Object (or a primative)</a></br>
</div><div class="vym-toc-branch-3"><a href="#mc:0,bo:4,bo:2,bo:0"> 5.3.1.  functions, arrays, etc. all have a prototype</a></br>
</div><div class="vym-toc-branch-3"><a href="#mc:0,bo:4,bo:2,bo:1"> 5.3.2.  Execept the base object</a></br>
</div><div class="vym-toc-branch-4"><a href="#mc:0,bo:4,bo:2,bo:1,bo:0"> 5.3.2.1.  Everything eventually leads to the base Object</a></br>
</div><div class="vym-toc-branch-3"><a href="#mc:0,bo:4,bo:2,bo:2"> 5.3.3.  Code</a></br>
</div><div class="vym-toc-branch-3"><a href="#mc:0,bo:4,bo:2,bo:3"> 5.3.4.  All of the base prototypes have share methods with ALL of the other objects,
functions, and arrays</a></br>
</div><div class="vym-toc-branch-3"><a href="#mc:0,bo:4,bo:2,bo:4"> 5.3.5.  The JavaScript engine has already set the proto of soething</a></br>
</div><div class="vym-toc-branch-3"><a href="#mc:0,bo:4,bo:2,bo:5"> 5.3.6.  The prototype of the protype points to the base Object</a></br>
</div><div class="vym-toc-branch-2"><a href="#mc:0,bo:4,bo:3"> 5.4.  Reflection and Extension</a></br>
</div><div class="vym-toc-branch-3"><a href="#mc:0,bo:4,bo:3,bo:0"> 5.4.1.  BWA: Reflection: An object can look at itself, listing and changing its
properties and methods</a></br>
</div><div class="vym-toc-branch-3"><a href="#mc:0,bo:4,bo:3,bo:1"> 5.4.2.  Example</a></br>
</div><div class="vym-toc-branch-4"><a href="#mc:0,bo:4,bo:3,bo:1,bo:0"> 5.4.2.1.  This is an example of reflection as it lists an objects properties and methods</a></br>
</div><div class="vym-toc-branch-3"><a href="#mc:0,bo:4,bo:3,bo:2"> 5.4.3.  Extend</a></br>
</div><div class="vym-toc-branch-4"><a href="#mc:0,bo:4,bo:3,bo:2,bo:0"> 5.4.3.1.  Compliment to JS prototype</a></br>
</div><div class="vym-toc-branch-5"><a href="#mc:0,bo:4,bo:3,bo:2,bo:0,bo:0"> 5.4.3.1.1.  </a></br>
</div><div class="vym-toc-branch-4"><a href="#mc:0,bo:4,bo:3,bo:2,bo:1"> 5.4.3.2.  underscore.js creates one</a></br>
</div><div class="vym-toc-branch-1"><a href="#mc:0,bo:5"> 6.  Building Objects</a></br>
</div><div class="vym-toc-branch-2"><a href="#mc:0,bo:5,bo:0"> 6.1.  Function Constructors, 'new', and the History of JavaScript</a></br>
</div><div class="vym-toc-branch-3"><a href="#mc:0,bo:5,bo:0,bo:0"> 6.1.1.  History</a></br>
</div><div class="vym-toc-branch-4"><a href="#mc:0,bo:5,bo:0,bo:0,bo:0"> 6.1.1.1.  Programming war!!!</a></br>
</div><div class="vym-toc-branch-4"><a href="#mc:0,bo:5,bo:0,bo:0,bo:1"> 6.1.1.2.  Call JavaScript; to attract Java developers (marketing!)</a></br>
</div><div class="vym-toc-branch-4"><a href="#mc:0,bo:5,bo:0,bo:0,bo:2"> 6.1.1.3.  var john = new Person()</a></br>
</div><div class="vym-toc-branch-5"><a href="#mc:0,bo:5,bo:0,bo:0,bo:2,bo:0"> 6.1.1.3.1.  Looks a bit like Java</a></br>
</div><div class="vym-toc-branch-3"><a href="#mc:0,bo:5,bo:0,bo:1"> 6.1.2.  Example Code</a></br>
</div><div class="vym-toc-branch-3"><a href="#mc:0,bo:5,bo:0,bo:2"> 6.1.3.  Learning the proper way to build objects to assign properites, methods, and
settting the prototypes</a></br>
</div><div class="vym-toc-branch-3"><a href="#mc:0,bo:5,bo:0,bo:3"> 6.1.4.  new is an opperator</a></br>
</div><div class="vym-toc-branch-4"><a href="#mc:0,bo:5,bo:0,bo:3,bo:0"> 6.1.4.1.  immediatedly an empty object is created</a></br>
</div><div class="vym-toc-branch-4"><a href="#mc:0,bo:5,bo:0,bo:3,bo:1"> 6.1.4.2.  Then it calls the Person() function</a></br>
</div><div class="vym-toc-branch-5"><a href="#mc:0,bo:5,bo:0,bo:3,bo:1,bo:0"> 6.1.4.2.1.  Execution conext is made, and &quot;this&quot; is created</a></br>
</div><div class="vym-toc-branch-5"><a href="#mc:0,bo:5,bo:0,bo:3,bo:1,bo:1"> 6.1.4.2.2.  The &quot;This&quot; points to the empty object that new created</a></br>
</div><div class="vym-toc-branch-4"><a href="#mc:0,bo:5,bo:0,bo:3,bo:2"> 6.1.4.3.  Having a function create an object</a></br>
</div><div class="vym-toc-branch-3"><a href="#mc:0,bo:5,bo:0,bo:4"> 6.1.5.  Function Constructors = function</a></br>
</div><div class="vym-toc-branch-4"><a href="#mc:0,bo:5,bo:0,bo:4,bo:0"> 6.1.5.1.  A normal function, used to create objecs</a></br>
</div><div class="vym-toc-branch-4"><a href="#mc:0,bo:5,bo:0,bo:4,bo:1"> 6.1.5.2.  The &quot;this&quot; variable points to an new empty object, and the object is return from
the function automatically</a></br>
</div><div class="vym-toc-branch-2"><a href="#mc:0,bo:5,bo:1"> 6.2.  Function Constructors and .prototype</a></br>
</div><div class="vym-toc-branch-3"><a href="#mc:0,bo:5,bo:1,bo:0"> 6.2.1.  Image</a></br>
</div><div class="vym-toc-branch-3"><a href="#mc:0,bo:5,bo:1,bo:1"> 6.2.2.  When function constructors are called with new, it creates an empty object</a></br>
</div><div class="vym-toc-branch-3"><a href="#mc:0,bo:5,bo:1,bo:2"> 6.2.3.  The .prototype points to this object</a></br>
</div><div class="vym-toc-branch-3"><a href="#mc:0,bo:5,bo:1,bo:3"> 6.2.4.  It has properties and methods; and it has</a></br>
</div><div class="vym-toc-branch-3"><a href="#mc:0,bo:5,bo:1,bo:4"> 6.2.5.  Why add it to the prototype and not the function constructor?</a></br>
</div><div class="vym-toc-branch-4"><a href="#mc:0,bo:5,bo:1,bo:4,bo:0"> 6.2.5.1.  The method sits in the prototype in memory only one time</a></br>
</div><div class="vym-toc-branch-4"><a href="#mc:0,bo:5,bo:1,bo:4,bo:1"> 6.2.5.2.  The object can be created many times and point to the one method</a></br>
</div><div class="vym-toc-branch-3"><a href="#mc:0,bo:5,bo:1,bo:5"> 6.2.6.  Example</a></br>
</div><div class="vym-toc-branch-4"><a href="#mc:0,bo:5,bo:1,bo:5,bo:0"> 6.2.6.1.  One of the valid ways of setting the prototype in JavaScript</a></br>
</div><div class="vym-toc-branch-2"><a href="#mc:0,bo:5,bo:2"> 6.3.  Dangerous Aside: new and function constructors</a></br>
</div><div class="vym-toc-branch-3"><a href="#mc:0,bo:5,bo:2,bo:0"> 6.3.1.  if you don't have the &quot;new&quot; keyword, then the object will be undefinied since
the function doesn't return anything</a></br>
</div><div class="vym-toc-branch-3"><a href="#mc:0,bo:5,bo:2,bo:1"> 6.3.2.  Coding Convention: Functoin Constructors have capital letters</a></br>
</div><div class="vym-toc-branch-3"><a href="#mc:0,bo:5,bo:2,bo:2"> 6.3.3.  there are going to be making a new way for function constructor?</a></br>
</div><div class="vym-toc-branch-2"><a href="#mc:0,bo:5,bo:3"> 6.4.  Conceptual Aside: Built In Function Constructors</a></br>
</div><div class="vym-toc-branch-3"><a href="#mc:0,bo:5,bo:3,bo:0"> 6.4.1.  var a = new Number(&quot;3&quot;) // Numbe {[Primiative Value], 3}</a></br>
</div><div class="vym-toc-branch-3"><a href="#mc:0,bo:5,bo:3,bo:1"> 6.4.2.  var b = new String(&quot;Jason&quot;)</a></br>
</div><div class="vym-toc-branch-4"><a href="#mc:0,bo:5,bo:3,bo:1,bo:0"> 6.4.2.1.  b.indexOf(&quot;o&quot;)</a></br>
</div><div class="vym-toc-branch-4"><a href="#mc:0,bo:5,bo:3,bo:1,bo:1"> 6.4.2.2.  String.prototype.indexOf(&quot;o&quot;)</a></br>
</div><div class="vym-toc-branch-3"><a href="#mc:0,bo:5,bo:3,bo:2"> 6.4.3.  You are not creating primiative, you are creating objects</a></br>
</div><div class="vym-toc-branch-3"><a href="#mc:0,bo:5,bo:3,bo:3"> 6.4.4.  &quot;Jason&quot;.length</a></br>
</div><div class="vym-toc-branch-4"><a href="#mc:0,bo:5,bo:3,bo:3,bo:0"> 6.4.4.1.  It will &quot;box&quot; the string in an object for you, so you can use properties and
methods of the prototype'</a></br>
</div><div class="vym-toc-branch-3"><a href="#mc:0,bo:5,bo:3,bo:4"> 6.4.5.  var d = new Date(&quot;3/1/15&quot;)</a></br>
</div><div class="vym-toc-branch-3"><a href="#mc:0,bo:5,bo:3,bo:5"> 6.4.6.  We can tac on features onto Strings, Numbers, Dates</a></br>
</div><div class="vym-toc-branch-3"><a href="#mc:0,bo:5,bo:3,bo:6"> 6.4.7.  By understanding this, we can extend the language</a></br>
</div><div class="vym-toc-branch-3"><a href="#mc:0,bo:5,bo:3,bo:7"> 6.4.8.  Warning! make sure that you don't overwrite pre-existing methods or prototypes</a></br>
</div><div class="vym-toc-branch-3"><a href="#mc:0,bo:5,bo:3,bo:8"> 6.4.9.  Strings and Array do get boxing, while Numbers do not</a></br>
</div><div class="vym-toc-branch-3"><a href="#mc:0,bo:5,bo:3,bo:9"> 6.4.10.  new Number !== a primative number</a></br>
</div><div class="vym-toc-branch-2"><a href="#mc:0,bo:5,bo:4"> 6.5.  Dangerous Aside: Build In Function Constructor</a></br>
</div><div class="vym-toc-branch-3"><a href="#mc:0,bo:5,bo:4,bo:0"> 6.5.1.  Example code</a></br>
</div><div class="vym-toc-branch-3"><a href="#mc:0,bo:5,bo:4,bo:1"> 6.5.2.  Function Constructors are not pritatives</a></br>
</div><div class="vym-toc-branch-3"><a href="#mc:0,bo:5,bo:4,bo:2"> 6.5.3.  To avoid this, use literals</a></br>
</div><div class="vym-toc-branch-3"><a href="#mc:0,bo:5,bo:4,bo:3"> 6.5.4.  If you do use them, understand what is goin gon</a></br>
</div><div class="vym-toc-branch-3"><a href="#mc:0,bo:5,bo:4,bo:4"> 6.5.5.  If you using the Date, use moment.js</a></br>
</div><div class="vym-toc-branch-3"><a href="#mc:0,bo:5,bo:4,bo:5"> 6.5.6.  It's dangerous to use function constructor for primatives</a></br>
</div><div class="vym-toc-branch-3"><a href="#mc:0,bo:5,bo:4,bo:6"> 6.5.7.  You can also use this a function, not a constructor</a></br>
</div><div class="vym-toc-branch-2"><a href="#mc:0,bo:5,bo:5"> 6.6.  Dangerous Aside: Arrays and for.in</a></br>
</div><div class="vym-toc-branch-3"><a href="#mc:0,bo:5,bo:5,bo:0"> 6.6.1.  Arrays are objects!</a></br>
</div><div class="vym-toc-branch-3"><a href="#mc:0,bo:5,bo:5,bo:1"> 6.6.2.  Code</a></br>
</div><div class="vym-toc-branch-3"><a href="#mc:0,bo:5,bo:5,bo:2"> 6.6.3.  If someone extends the Array.prototype with additional features, and we attempt
to use for..in then we will see the Array.protype since it goes down the
prototype chain</a></br>
</div></td></tr>
</table>


<h1><span class='vym-branch-0' style='color:#000000' id='mc:0'>JavaScript the Weird Parts</span></h1>
  
  <h2><span class='vym-branch-1' style='color:#000000' id='mc:0,bo:0'>Introduction</span></h2>
    <ul class="vym-list-ul-2">
      <li><span class='vym-branch-2' style='color:#000000' id='mc:0,bo:0,bo:0'>Understand, don't imediate</span>
      <ul class="vym-list-ul-3">
        <li><span class='vym-branch-3' style='color:#000000' id='mc:0,bo:0,bo:0,bo:0'>Type it out</span>  </li>
      </ul>  </li>
      <li><span class='vym-branch-2' style='color:#000000' id='mc:0,bo:0,bo:1'>Frameworks</span>
      <ul class="vym-list-ul-3">
        <li><span class='vym-branch-3' style='color:#000000' id='mc:0,bo:0,bo:1,bo:0'>People who make the frameworks understand the weird parts</span>  </li>
        <li><span class='vym-branch-3' style='color:#000000' id='mc:0,bo:0,bo:1,bo:1'>Angular</span>  </li>
        <li><span class='vym-branch-3' style='color:#000000' id='mc:0,bo:0,bo:1,bo:2'>jQuery</span>  </li>
      </ul>  </li>
      <li><span class='vym-branch-2' style='color:#000000' id='mc:0,bo:0,bo:2'>Weird Parts</span>
      <ul class="vym-list-ul-3">
        <li><span class='vym-branch-3' style='color:#000000' id='mc:0,bo:0,bo:2,bo:0'>Understanding the how JavaScript works will give you the bases of how to create
the frameworks</span>  </li>
      </ul>  </li>
    </ul>
  <h2><span class='vym-branch-1' style='color:#000000' id='mc:0,bo:1'>Execution Context and Lexical Enviroment</span></h2>
    <ul class="vym-list-ul-2">
      <li><span class='vym-branch-2' style='color:#000000' id='mc:0,bo:1,bo:0'>Definitions</span>
      <ul class="vym-list-ul-3">
        <li><span class='vym-branch-3' style='color:#000000' id='mc:0,bo:1,bo:0,bo:0'>Name - Value Pair</span>
        <ul class="vym-list-ul-4">
          <li><span class='vym-branch-4' style='color:#000000' id='mc:0,bo:1,bo:0,bo:0,bo:0'>address = &quot;100 Miller Ct&quot;</span>  </li>
          <li><span class='vym-branch-4' style='color:#000000' id='mc:0,bo:1,bo:0,bo:0,bo:1'>Object in JavaScript</span>
          <ul class="vym-list-ul-5">
            <li><span class='vym-branch-5' style='color:#000000' id='mc:0,bo:1,bo:0,bo:0,bo:1,bo:0'>Collection of name / value pairs</span>  </li>
            <li><span class='vym-branch-5' style='color:#000000' id='mc:0,bo:1,bo:0,bo:0,bo:1,bo:1'>Name Values within name values within name values</span>  </li>
          </ul>  </li>
          <li><span class='vym-branch-4' style='color:#000000' id='mc:0,bo:1,bo:0,bo:0,bo:2'>A name that maps to a unique value</span>  </li>
          <li><span class='vym-branch-4' style='color:#000000' id='mc:0,bo:1,bo:0,bo:0,bo:3'>Only one value per context</span>  </li>
        </ul>  </li>
        <li><span class='vym-branch-3' style='color:#000000' id='mc:0,bo:1,bo:0,bo:1'>Execution Context</span>
        <ul class="vym-list-ul-4">
          <li><span class='vym-branch-4' style='color:#000000' id='mc:0,bo:1,bo:0,bo:1,bo:0'>A wrapper that helps manage code that's running</span>  </li>
          <li><span class='vym-branch-4' style='color:#000000' id='mc:0,bo:1,bo:0,bo:1,bo:1'>which lexical enviroment depends on execution context</span>  </li>
          <li><span class='vym-branch-4' style='color:#000000' id='mc:0,bo:1,bo:0,bo:1,bo:2'>contains things beyond your code</span>  </li>
        </ul>  </li>
        <li><span class='vym-branch-3' style='color:#000000' id='mc:0,bo:1,bo:0,bo:2'>Lexical Enviroment</span>
        <ul class="vym-list-ul-4">
          <li><span class='vym-branch-4' style='color:#000000' id='mc:0,bo:1,bo:0,bo:2,bo:0'>Lexical means having to do with language or grammar</span>  </li>
          <li><span class='vym-branch-4' style='color:#000000' id='mc:0,bo:1,bo:0,bo:2,bo:1'>Where written code physically positioned</span>  </li>
          <li><span class='vym-branch-4' style='color:#000000' id='mc:0,bo:1,bo:0,bo:2,bo:2'>Syntax parser cares on where things are placed</span>  </li>
        </ul>  </li>
        <li><span class='vym-branch-3' style='color:#000000' id='mc:0,bo:1,bo:0,bo:3'>Syntax Parser</span>
        <ul class="vym-list-ul-4">
          <li><span class='vym-branch-4' style='color:#000000' id='mc:0,bo:1,bo:0,bo:3,bo:0'>A program that reads code and determines what to do with and if the grammar is
valid</span>  </li>
          <li><span class='vym-branch-4' style='color:#000000' id='mc:0,bo:1,bo:0,bo:3,bo:1'>Translates it for a computer</span>  </li>
        </ul>  </li>
      </ul>  </li>
      <li><span class='vym-branch-2' style='color:#000000' id='mc:0,bo:1,bo:1'>Global Enviroment and Global Object</span>
      <ul class="vym-list-ul-3">
        <li><span class='vym-branch-3' style='color:#000000' id='mc:0,bo:1,bo:1,bo:0'>Global Execution Context engine create 2 things</span>
        <ul class="vym-list-ul-4">
          <li><span class='vym-branch-4' style='color:#000000' id='mc:0,bo:1,bo:1,bo:0,bo:0'>this</span>  </li>
          <li><span class='vym-branch-4' style='color:#000000' id='mc:0,bo:1,bo:1,bo:0,bo:1'>Global object</span>  </li>
        </ul>  </li>
        <li><span class='vym-branch-3' style='color:#000000' id='mc:0,bo:1,bo:1,bo:1'>Nothing in JavaScript</span>
        <ul class="vym-list-ul-4">
          <li><span class='vym-branch-4' style='color:#000000' id='mc:0,bo:1,bo:1,bo:1,bo:0'>this</span>  </li>
          <li><span class='vym-branch-4' style='color:#000000' id='mc:0,bo:1,bo:1,bo:1,bo:1'>window</span>  </li>
          <li><span class='vym-branch-4' style='color:#000000' id='mc:0,bo:1,bo:1,bo:1,bo:2'>Both of these are the global object (while on a Browser)</span>
          <ul class="vym-list-ul-5">
            <li><span class='vym-branch-5' style='color:#000000' id='mc:0,bo:1,bo:1,bo:1,bo:2,bo:0'>At the global level, this = window</span>  </li>
          </ul>  </li>
          <li><span class='vym-branch-4' style='color:#000000' id='mc:0,bo:1,bo:1,bo:1,bo:3'>JS still  creates variables</span>  </li>
          <li><span class='vym-branch-4' style='color:#000000' id='mc:0,bo:1,bo:1,bo:1,bo:4'>YOU DIDN'T WRITE THIS STUFF</span>  </li>
        </ul>  </li>
        <li><span class='vym-branch-3' style='color:#000000' id='mc:0,bo:1,bo:1,bo:2'>Global: Not inside a function</span>
        <ul class="vym-list-ul-4">
          <li><span class='vym-branch-4' style='color:#000000' id='mc:0,bo:1,bo:1,bo:2,bo:0'>When not in a function, the variables sit in the lexical enviroment.</span>  </li>
          <li><span class='vym-branch-4' style='color:#000000' id='mc:0,bo:1,bo:1,bo:2,bo:1'>a = window.a</span>  </li>
        </ul>  </li>
        <li><span class='vym-branch-3' style='color:#000000' id='mc:0,bo:1,bo:1,bo:3'>Review</span>
        <ul class="vym-list-ul-4">
          <li><span class='vym-branch-4' style='color:#000000' id='mc:0,bo:1,bo:1,bo:3,bo:0'>Execution Contxt</span>
          <ul class="vym-list-ul-5">
            <li><span class='vym-branch-5' style='color:#000000' id='mc:0,bo:1,bo:1,bo:3,bo:0,bo:0'>Global Object</span>  </li>
            <li><span class='vym-branch-5' style='color:#000000' id='mc:0,bo:1,bo:1,bo:3,bo:0,bo:1'>this</span>  </li>
            <li><span class='vym-branch-5' style='color:#000000' id='mc:0,bo:1,bo:1,bo:3,bo:0,bo:2'>window</span>  </li>
            <li><span class='vym-branch-5' style='color:#000000' id='mc:0,bo:1,bo:1,bo:3,bo:0,bo:3'>Your code</span>  </li>
          </ul>  </li>
        </ul>  </li>
      </ul>  </li>
      <li><span class='vym-branch-2' style='color:#000000' id='mc:0,bo:1,bo:2'>Execution Contenxt: Creation and Hoisting</span>
      <ul class="vym-list-ul-3">
        <li><span class='vym-branch-3' style='color:#000000' id='mc:0,bo:1,bo:2,bo:0'>Hoisting</span>  </li>
        <li><span class='vym-branch-3' style='color:#000000' id='mc:0,bo:1,bo:2,bo:1'>WHAT EXECUTES ISN'T WHAT YOU'VE WRITTEN</span>
        <ul class="vym-list-ul-4">
          <li><span class='vym-branch-4' style='color:#000000' id='mc:0,bo:1,bo:2,bo:1,bo:0'>JavaScript Engine makes descisions</span>  </li>
        </ul>  </li>
        <li><span class='vym-branch-3' style='color:#000000' id='mc:0,bo:1,bo:2,bo:2'>(1) Creation Phase</span>
        <ul class="vym-list-ul-4">
          <li><span class='vym-branch-4' style='color:#000000' id='mc:0,bo:1,bo:2,bo:2,bo:0'>Global Object</span>  </li>
          <li><span class='vym-branch-4' style='color:#000000' id='mc:0,bo:1,bo:2,bo:2,bo:1'>this</span>  </li>
          <li><span class='vym-branch-4' style='color:#000000' id='mc:0,bo:1,bo:2,bo:2,bo:2'>out enviroment</span>  </li>
          <li><span class='vym-branch-4' style='color:#000000' id='mc:0,bo:1,bo:2,bo:2,bo:3'>Syntax parser recognizes where you've created variables and functions</span>
          <ul class="vym-list-ul-5">
            <li><span class='vym-branch-5' style='color:#000000' id='mc:0,bo:1,bo:2,bo:2,bo:3,bo:0'>Set ups memory space for functions and vvariables: &quot;Hoisting&quot;</span>  </li>
          </ul>  </li>
        </ul>  </li>
        <li><span class='vym-branch-3' style='color:#000000' id='mc:0,bo:1,bo:2,bo:3'>Example Code</span>
<table class="vym-note"><tr><td class="vym-note-flag">
<td>
b();<br/>console.log(a);<br/><br/>var a = "a";<br/><br/>function b() {<br/>  console.log("Called b");<br/>}<br/><br/>Here the function b call is logged, yet a gets logs "undefinied".
</td></tr></table>

        <ul class="vym-list-ul-4">
          <li><span class='vym-branch-4' style='color:#000000' id='mc:0,bo:1,bo:2,bo:3,bo:0'>Function in hosted in entirered</span>  </li>
          <li><span class='vym-branch-4' style='color:#000000' id='mc:0,bo:1,bo:2,bo:3,bo:1'>variables doesn't until execution phase</span>  </li>
          <li><span class='vym-branch-4' style='color:#000000' id='mc:0,bo:1,bo:2,bo:3,bo:2'>undefined is a placeholder</span>  </li>
          <li><span class='vym-branch-4' style='color:#000000' id='mc:0,bo:1,bo:2,bo:3,bo:3'>Never rely on hoisting</span>  </li>
        </ul>  </li>
        <li><span class='vym-branch-3' style='color:#000000' id='mc:0,bo:1,bo:2,bo:4'>Declare functions at the top of your code</span>  </li>
      </ul>  </li>
      <li><span class='vym-branch-2' style='color:#000000' id='mc:0,bo:1,bo:3'>Exeution Content: Execution</span>
      <ul class="vym-list-ul-3">
        <li><span class='vym-branch-3' style='color:#000000' id='mc:0,bo:1,bo:3,bo:0'>Runs your code line by line</span>  </li>
        <li><span class='vym-branch-3' style='color:#000000' id='mc:0,bo:1,bo:3,bo:1'>After hoisting, things are execution</span>  </li>
      </ul>  </li>
      <li><span class='vym-branch-2' style='color:#000000' id='mc:0,bo:1,bo:4'>Conceptual Aside: JavaScript and Undeifined</span>
      <ul class="vym-list-ul-3">
        <li><span class='vym-branch-3' style='color:#000000' id='mc:0,bo:1,bo:4,bo:0'>not defined IS NOT undefined</span>  </li>
        <li><span class='vym-branch-3' style='color:#000000' id='mc:0,bo:1,bo:4,bo:1'>Example Code</span>
<table class="vym-note"><tr><td class="vym-note-flag">
<td>
<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.0//EN" "http://www.w3.org/TR/REC-html40/strict.dtd">

<p class="vym-note-paragraph"><span style=" color:#29003e;">var a; // var a = &quot;hello&quot;; or nothing -&gt; What's the out put?</span></p>
<p class="vym-note-paragraph"><span style=" color:#29003e;">console.log(a);</span></p>
<p class="vym-note-paragraph"><br /></p>
<p class="vym-note-paragraph"><span style=" color:#29003e;">if (a === undefined) {</span></p>
<p class="vym-note-paragraph"><span style=" color:#29003e;">   console.log(&quot;a is undefined&quot;);</span></p>
<p class="vym-note-paragraph"><span style=" color:#29003e;">}</span></p>
<p class="vym-note-paragraph"><span style=" color:#29003e;">else {</span></p>
<p class="vym-note-paragraph"><span style=" color:#29003e;">  console.log(&quot;a is defined&quot;);</span></p>
<p class="vym-note-paragraph"><span style=" color:#29003e;">}</span></p>
<p class="vym-note-paragraph"><br /></p>
<p class="vym-note-paragraph"><span style=" color:#29003e;">// Output</span></p>
<p class="vym-note-paragraph"><span style=" color:#29003e;">// undefined</span></p>
<p class="vym-note-paragraph"><span style=" color:#29003e;">// a is undefined</span></p>
<p class="vym-note-paragraph"><br /></p>
</td></tr></table>

        <ul class="vym-list-ul-4">
          <li><span class='vym-branch-4' style='color:#000000' id='mc:0,bo:1,bo:4,bo:1,bo:0'>When a variable isn't declared than the browser will say &quot;it's not in memory my
dude&quot;</span>  </li>
          <li><span class='vym-branch-4' style='color:#000000' id='mc:0,bo:1,bo:4,bo:1,bo:1'>undefined takes up memory space</span>  </li>
        </ul>  </li>
        <li><span class='vym-branch-3' style='color:#000000' id='mc:0,bo:1,bo:4,bo:2'>undefineid means it's  a value that JavaScript is creating</span>  </li>
        <li><span class='vym-branch-3' style='color:#000000' id='mc:0,bo:1,bo:4,bo:3'>NEVER: a = undefined;</span>
        <ul class="vym-list-ul-4">
          <li><span class='vym-branch-4' style='color:#000000' id='mc:0,bo:1,bo:4,bo:3,bo:0'>Valid, yet dangerous</span>  </li>
          <li><span class='vym-branch-4' style='color:#000000' id='mc:0,bo:1,bo:4,bo:3,bo:1'>Let JavaScript always set undefined</span>  </li>
        </ul>  </li>
      </ul>  </li>
      <li><span class='vym-branch-2' style='color:#000000' id='mc:0,bo:1,bo:5'>Conceptual Aside: Single Threaded, Synchronous Execution</span>
      <ul class="vym-list-ul-3">
        <li><span class='vym-branch-3' style='color:#000000' id='mc:0,bo:1,bo:5,bo:0'>Single Threaded: Only one command at a time</span>
        <ul class="vym-list-ul-4">
          <li><span class='vym-branch-4' style='color:#000000' id='mc:0,bo:1,bo:5,bo:0,bo:0'>The browerser also runs</span>  </li>
          <li><span class='vym-branch-4' style='color:#000000' id='mc:0,bo:1,bo:5,bo:0,bo:1'>JavaScript behaves as a single threaded message</span>  </li>
        </ul>  </li>
        <li><span class='vym-branch-3' style='color:#000000' id='mc:0,bo:1,bo:5,bo:1'>Synchronous (in programming)</span>
        <ul class="vym-list-ul-4">
          <li><span class='vym-branch-4' style='color:#000000' id='mc:0,bo:1,bo:5,bo:1,bo:0'>One at a time</span>  </li>
          <li><span class='vym-branch-4' style='color:#000000' id='mc:0,bo:1,bo:5,bo:1,bo:1'>One line of code at a time in order that it appears</span>  </li>
        </ul>  </li>
      </ul>  </li>
      <li><span class='vym-branch-2' style='color:#000000' id='mc:0,bo:1,bo:6'>Function Invocation and Execution Stack</span>
      <ul class="vym-list-ul-3">
        <li><span class='vym-branch-3' style='color:#000000' id='mc:0,bo:1,bo:6,bo:0'>Innvocatoin: Calling a function or ()</span>  </li>
        <li><span class='vym-branch-3' style='color:#000000' id='mc:0,bo:1,bo:6,bo:1'>Example Code</span>
<table class="vym-note"><tr><td class="vym-note-flag">
<td>
function a() {<br/>  b();<br/>  var c;<br/>}<br/><br/>function b() {<br/>  var d;<br/>}<br/><br/>a();<br/>var d; // this isn't complete until a() is done with execution = synchrous
</td></tr></table>
  </li>
        <li><span class='vym-branch-3' style='color:#000000' id='mc:0,bo:1,bo:6,bo:2'><a href="file:///home/juxley/Pictures/executionstack.png"><img src="flags/flag-url-16x16.png">Execution Stack</a></span>
        <ul class="vym-list-ul-4">
          <li><span class='vym-branch-4' style='color:#000000' id='mc:0,bo:1,bo:6,bo:2,bo:0'>2) function a Execution Context</span>
          <ul class="vym-list-ul-5">
            <li><span class='vym-branch-5' style='color:#000000' id='mc:0,bo:1,bo:6,bo:2,bo:0,bo:0'>create</span>  </li>
            <li><span class='vym-branch-5' style='color:#000000' id='mc:0,bo:1,bo:6,bo:2,bo:0,bo:1'>exeuction</span>  </li>
          </ul>  </li>
          <li><span class='vym-branch-4' style='color:#000000' id='mc:0,bo:1,bo:6,bo:2,bo:1'>1) Global Execution Context</span>
          <ul class="vym-list-ul-5">
            <li><span class='vym-branch-5' style='color:#000000' id='mc:0,bo:1,bo:6,bo:2,bo:1,bo:0'>creates:</span>
            <ul class="vym-list-ul-6">
              <li><span class='vym-branch-6' style='color:#000000' id='mc:0,bo:1,bo:6,bo:2,bo:1,bo:0,bo:0'>Global object, this, window</span>  </li>
              <li><span class='vym-branch-6' style='color:#000000' id='mc:0,bo:1,bo:6,bo:2,bo:1,bo:0,bo:1'>hoisting functions and setting variables to undefined</span>  </li>
            </ul>  </li>
            <li><span class='vym-branch-5' style='color:#000000' id='mc:0,bo:1,bo:6,bo:2,bo:1,bo:1'>Executes</span>  </li>
          </ul>  </li>
          <li><span class='vym-branch-4' style='color:#000000' id='mc:0,bo:1,bo:6,bo:2,bo:2'>3) When a Execution Context / Function is finshed executing, it's pop off the
stack</span>  </li>
        </ul>  </li>
        <li><span class='vym-branch-3' style='color:#000000' id='mc:0,bo:1,bo:6,bo:3'>Even if a function invokes itself, a execution context is created</span>
        <ul class="vym-list-ul-4">
          <li><span class='vym-branch-4' style='color:#000000' id='mc:0,bo:1,bo:6,bo:3,bo:0'>Creation of this / global object  is creating within that funciton</span>  </li>
        </ul>  </li>
      </ul>  </li>
      <li><span class='vym-branch-2' style='color:#000000' id='mc:0,bo:1,bo:7'>Functions, Context, Variable Enviroments</span>
      <ul class="vym-list-ul-3">
        <li><span class='vym-branch-3' style='color:#000000' id='mc:0,bo:1,bo:7,bo:0'>Variable Enviorment</span>
        <ul class="vym-list-ul-4">
          <li><span class='vym-branch-4' style='color:#000000' id='mc:0,bo:1,bo:7,bo:0,bo:0'>Where the varibales lives in the memory</span>  </li>
          <li><span class='vym-branch-4' style='color:#000000' id='mc:0,bo:1,bo:7,bo:0,bo:1'>Where is the variable?</span>  </li>
          <li><span class='vym-branch-4' style='color:#000000' id='mc:0,bo:1,bo:7,bo:0,bo:2'>Each execution context has a variable enviroment (it's own memory space)</span>  </li>
          <li><span class='vym-branch-4' style='color:#000000' id='mc:0,bo:1,bo:7,bo:0,bo:3'>Code Example</span>
<table class="vym-note"><tr><td class="vym-note-flag">
<td>
function b() {<br/>        var myVar;<br/>    console.log(myVar); //<br/>}<br/><br/>function a() {<br/>        var myVar = 2;<br/>    console.log(myVar);<br/>        b();<br/>}<br/><br/>var myVar = 1;<br/>console.log(myVar); //<br/>a();<br/>console.log(myVar);<br/><br/>Output//<br/>1<br/>2<br/>undefined<br/>1
</td></tr></table>

          <ul class="vym-list-ul-5">
            <li><span class='vym-branch-5' style='color:#000000' id='mc:0,bo:1,bo:7,bo:0,bo:3,bo:0'>Each varibales are in there own scope</span>  </li>
          </ul>  </li>
        </ul>  </li>
      </ul>  </li>
      <li><span class='vym-branch-2' style='color:#000000' id='mc:0,bo:1,bo:8'>The Scope Chain</span>
      <ul class="vym-list-ul-3">
        <li><span class='vym-branch-3' style='color:#000000' id='mc:0,bo:1,bo:8,bo:0'>Example Code 1</span>
<table class="vym-note"><tr><td class="vym-note-flag">
<td>
function b() {<br/>console.log(myVar);<br/>}<br/><br/>function a() {<br/>var myVar = 2;<br/>b();<br/>}<br/><br/>var myVar = 1;<br/>a();<br/><br/>//output<br/>//1
</td></tr></table>
  </li>
        <li><span class='vym-branch-3' style='color:#000000' id='mc:0,bo:1,bo:8,bo:1'><a href="file:///home/juxley/Pictures/scopechain1.png"><img src="flags/flag-url-16x16.png">JavaScript does more than look in the variable enviroment of the current
execution context</a></span>
        <ul class="vym-list-ul-4">
          <li><span class='vym-branch-4' style='color:#000000' id='mc:0,bo:1,bo:8,bo:1,bo:0'>variable this</span>  </li>
          <li><span class='vym-branch-4' style='color:#000000' id='mc:0,bo:1,bo:8,bo:1,bo:1'>Each execution has a reference  to the outer enviroment</span>  </li>
          <li><span class='vym-branch-4' style='color:#000000' id='mc:0,bo:1,bo:8,bo:1,bo:2'>Outer enviroment ~ Lexical Enviroment</span>
          <ul class="vym-list-ul-5">
            <li><span class='vym-branch-5' style='color:#000000' id='mc:0,bo:1,bo:8,bo:1,bo:2,bo:0'>Lexical Enviroment</span>
            <ul class="vym-list-ul-6">
              <li><span class='vym-branch-6' style='color:#000000' id='mc:0,bo:1,bo:8,bo:1,bo:2,bo:0,bo:0'>The physical location of where code is written</span>  </li>
            </ul>  </li>
          </ul>  </li>
        </ul>  </li>
        <li><span class='vym-branch-3' style='color:#000000' id='mc:0,bo:1,bo:8,bo:2'>Execution stack is create by invocation, not locatoin</span>  </li>
        <li><span class='vym-branch-3' style='color:#000000' id='mc:0,bo:1,bo:8,bo:3'>Finding the variable reference, it goes down the Scope Chain to find</span>  </li>
        <li><span class='vym-branch-3' style='color:#000000' id='mc:0,bo:1,bo:8,bo:4'>&quot;Who created me?&quot;</span>
        <ul class="vym-list-ul-4">
          <li><span class='vym-branch-4' style='color:#000000' id='mc:0,bo:1,bo:8,bo:4,bo:0'>Example Code 2</span>
<table class="vym-note"><tr><td class="vym-note-flag">
<td>
function a() {<br/><br/>	function b() {<br/>		console.log(myVar);<br/>	}<br/><br/>var myVar = 2;<br/>b();<br/>}<br/><br/>var myVar = 1;<br/>a();<br/>//cannot call b() as it's in the global execution context<br/><br/>//output<br/>//1
</td></tr></table>
  </li>
        </ul>  </li>
        <li><span class='vym-branch-3' style='color:#000000' id='mc:0,bo:1,bo:8,bo:5'>Where a function sits lexically determines it's out reference</span>  </li>
      </ul>  </li>
      <li><span class='vym-branch-2' style='color:#000000' id='mc:0,bo:1,bo:9'>Scope, ES6, let</span>
      <ul class="vym-list-ul-3">
        <li><span class='vym-branch-3' style='color:#000000' id='mc:0,bo:1,bo:9,bo:0'>Scope: Where code is avaiable in code</span>
        <ul class="vym-list-ul-4">
          <li><span class='vym-branch-4' style='color:#000000' id='mc:0,bo:1,bo:9,bo:0,bo:0'>And if it's the same variable or a copy (another innovcation / object)</span>
          <ul class="vym-list-ul-5">
            <li><span class='vym-branch-5' style='color:#000000' id='mc:0,bo:1,bo:9,bo:0,bo:0,bo:0'></span>  </li>
          </ul>  </li>
        </ul>  </li>
        <li><span class='vym-branch-3' style='color:#000000' id='mc:0,bo:1,bo:9,bo:1'>ECMAScript 6 / 2015</span>
        <ul class="vym-list-ul-4">
          <li><span class='vym-branch-4' style='color:#000000' id='mc:0,bo:1,bo:9,bo:1,bo:0'>let: a new way to declare variables</span>
          <ul class="vym-list-ul-5">
            <li><span class='vym-branch-5' style='color:#000000' id='mc:0,bo:1,bo:9,bo:1,bo:0,bo:0'>Block scoping</span>  </li>
            <li><span class='vym-branch-5' style='color:#000000' id='mc:0,bo:1,bo:9,bo:1,bo:0,bo:1'>Only available within the block it's declared in</span>  </li>
            <li><span class='vym-branch-5' style='color:#000000' id='mc:0,bo:1,bo:9,bo:1,bo:0,bo:2'>Cannot use the let variable until the code is ran</span>  </li>
          </ul>  </li>
        </ul>  </li>
      </ul>  </li>
      <li><span class='vym-branch-2' style='color:#000000' id='mc:0,bo:1,bo:10'>Asynchronous Callbacks</span>
      <ul class="vym-list-ul-3">
        <li><span class='vym-branch-3' style='color:#000000' id='mc:0,bo:1,bo:10,bo:0'>More than one at a time</span>  </li>
        <li><span class='vym-branch-3' style='color:#000000' id='mc:0,bo:1,bo:10,bo:1'>Event Queue</span>
        <ul class="vym-list-ul-4">
          <li><span class='vym-branch-4' style='color:#000000' id='mc:0,bo:1,bo:10,bo:1,bo:0'>Queues is looked at when execution stack is empty</span>  </li>
          <li><span class='vym-branch-4' style='color:#000000' id='mc:0,bo:1,bo:10,bo:1,bo:1'>JavaScript looks at th queue perodically</span>
          <ul class="vym-list-ul-5">
            <li><span class='vym-branch-5' style='color:#000000' id='mc:0,bo:1,bo:10,bo:1,bo:1,bo:0'>Event Loop</span>  </li>
          </ul>  </li>
          <li><span class='vym-branch-4' style='color:#000000' id='mc:0,bo:1,bo:10,bo:1,bo:2'>click event</span>
          <ul class="vym-list-ul-5">
            <li><span class='vym-branch-5' style='color:#000000' id='mc:0,bo:1,bo:10,bo:1,bo:2,bo:0'>exeuction context for the function happens,</span>  </li>
            <li><span class='vym-branch-5' style='color:#000000' id='mc:0,bo:1,bo:10,bo:1,bo:2,bo:1'>The code is still line by line</span>  </li>
            <li><span class='vym-branch-5' style='color:#000000' id='mc:0,bo:1,bo:10,bo:1,bo:2,bo:2'>*The stack has to be empty*</span>  </li>
          </ul>  </li>
        </ul>  </li>
        <li><span class='vym-branch-3' style='color:#000000' id='mc:0,bo:1,bo:10,bo:2'>Exeuction Stack</span>  </li>
        <li><span class='vym-branch-3' style='color:#000000' id='mc:0,bo:1,bo:10,bo:3'>Code Example</span>
<table class="vym-note"><tr><td class="vym-note-flag">
<td>
function waitThreeSeconds() {<br/> var ms = 3000 + new Date().getTime();<br/> while(new Date() &lt; ms){}<br/> console.log('finshed function'); <br/>}<br/><br/>function clickHandler() {<br/> console.log('click event');<br/>}<br/><br/>document.addEventListener('',  clickHandler();<br/><br/>waitThreeSeconds();<br/>console.log('finshes execution');<br/><br/>//log<br/>finshed function<br/>finshes exeuction<br/>click event
</td></tr></table>

        <ul class="vym-list-ul-4">
          <li><span class='vym-branch-4' style='color:#000000' id='mc:0,bo:1,bo:10,bo:3,bo:0'>The click event is consoled lasted</span>  </li>
          <li><span class='vym-branch-4' style='color:#000000' id='mc:0,bo:1,bo:10,bo:3,bo:1'>How does JavaScript, a synchronoistic langauge, deal with asynchronistic events?</span>
          <ul class="vym-list-ul-5">
            <li><span class='vym-branch-5' style='color:#000000' id='mc:0,bo:1,bo:10,bo:3,bo:1,bo:0'>It will run it's code and place it into the event queue</span>  </li>
          </ul>  </li>
        </ul>  </li>
        <li><span class='vym-branch-3' style='color:#000000' id='mc:0,bo:1,bo:10,bo:4'>The asynchrnous part is outside of the JavaScript engine</span>
        <ul class="vym-list-ul-4">
          <li><span class='vym-branch-4' style='color:#000000' id='mc:0,bo:1,bo:10,bo:4,bo:0'>These async events will then be process in order that they happen</span>  </li>
        </ul>  </li>
      </ul>  </li>
    </ul>
  <h2><span class='vym-branch-1' style='color:#000000' id='mc:0,bo:2'>Types and Operators</span></h2>
    <ul class="vym-list-ul-2">
      <li><span class='vym-branch-2' style='color:#000000' id='mc:0,bo:2,bo:0'>Coneptual Aside: Types</span>
      <ul class="vym-list-ul-3">
        <li><span class='vym-branch-3' style='color:#000000' id='mc:0,bo:2,bo:0,bo:0'>Dynamic Typing</span>
        <ul class="vym-list-ul-4">
          <li><span class='vym-branch-4' style='color:#000000' id='mc:0,bo:2,bo:0,bo:0,bo:0'>You don't tell JavaScript engine what type, it'll figure it out while the code
is running</span>  </li>
        </ul>  </li>
        <li><span class='vym-branch-3' style='color:#000000' id='mc:0,bo:2,bo:0,bo:1'>Static Typing</span>
        <ul class="vym-list-ul-4">
          <li><span class='vym-branch-4' style='color:#000000' id='mc:0,bo:2,bo:0,bo:1,bo:0'>Java, C++, you need to have a certain type into it</span>  </li>
          <li><span class='vym-branch-4' style='color:#000000' id='mc:0,bo:2,bo:0,bo:1,bo:1'>You get an error otherwise</span>  </li>
        </ul>  </li>
      </ul>  </li>
      <li><span class='vym-branch-2' style='color:#000000' id='mc:0,bo:2,bo:1'>Primiative Type</span>
      <ul class="vym-list-ul-3">
        <li><span class='vym-branch-3' style='color:#000000' id='mc:0,bo:2,bo:1,bo:0'>A single value</span>  </li>
        <li><span class='vym-branch-3' style='color:#000000' id='mc:0,bo:2,bo:1,bo:1'>Not an object</span>  </li>
        <li><span class='vym-branch-3' style='color:#000000' id='mc:0,bo:2,bo:1,bo:2'>Six Types in JavaScript</span>
        <ul class="vym-list-ul-4">
          <li><span class='vym-branch-4' style='color:#000000' id='mc:0,bo:2,bo:1,bo:2,bo:0'>Undefined</span>
          <ul class="vym-list-ul-5">
            <li><span class='vym-branch-5' style='color:#000000' id='mc:0,bo:2,bo:1,bo:2,bo:0,bo:0'>Let JavaScript say when this doesn't exists</span>  </li>
          </ul>  </li>
          <li><span class='vym-branch-4' style='color:#000000' id='mc:0,bo:2,bo:1,bo:2,bo:1'>Null</span>
          <ul class="vym-list-ul-5">
            <li><span class='vym-branch-5' style='color:#000000' id='mc:0,bo:2,bo:1,bo:2,bo:1,bo:0'>Use this if you want sometihng to mean &quot;not in existence&quot;</span>  </li>
          </ul>  </li>
          <li><span class='vym-branch-4' style='color:#000000' id='mc:0,bo:2,bo:1,bo:2,bo:2'>Boolean</span>
          <ul class="vym-list-ul-5">
            <li><span class='vym-branch-5' style='color:#000000' id='mc:0,bo:2,bo:1,bo:2,bo:2,bo:0'>true</span>  </li>
            <li><span class='vym-branch-5' style='color:#000000' id='mc:0,bo:2,bo:1,bo:2,bo:2,bo:1'>false</span>  </li>
          </ul>  </li>
          <li><span class='vym-branch-4' style='color:#000000' id='mc:0,bo:2,bo:1,bo:2,bo:3'>Number</span>
          <ul class="vym-list-ul-5">
            <li><span class='vym-branch-5' style='color:#000000' id='mc:0,bo:2,bo:1,bo:2,bo:3,bo:0'>floating point number</span>  </li>
            <li><span class='vym-branch-5' style='color:#000000' id='mc:0,bo:2,bo:1,bo:2,bo:3,bo:1'>Always some decimal at the end of it</span>  </li>
          </ul>  </li>
          <li><span class='vym-branch-4' style='color:#000000' id='mc:0,bo:2,bo:1,bo:2,bo:4'>String</span>
          <ul class="vym-list-ul-5">
            <li><span class='vym-branch-5' style='color:#000000' id='mc:0,bo:2,bo:1,bo:2,bo:4,bo:0'>list of chatacters</span>  </li>
          </ul>  </li>
          <li><span class='vym-branch-4' style='color:#000000' id='mc:0,bo:2,bo:1,bo:2,bo:5'>Symbol</span>
          <ul class="vym-list-ul-5">
            <li><span class='vym-branch-5' style='color:#000000' id='mc:0,bo:2,bo:1,bo:2,bo:5,bo:0'>es6</span>  </li>
          </ul>  </li>
        </ul>  </li>
      </ul>  </li>
      <li><span class='vym-branch-2' style='color:#000000' id='mc:0,bo:2,bo:2'>Conceptual Asdie: Operators</span>
      <ul class="vym-list-ul-3">
        <li><span class='vym-branch-3' style='color:#000000' id='mc:0,bo:2,bo:2,bo:0'>A function that is syntaxtcally different</span>  </li>
        <li><span class='vym-branch-3' style='color:#000000' id='mc:0,bo:2,bo:2,bo:1'>Usually takes 2 inputs and results in 1 output</span>  </li>
        <li><span class='vym-branch-3' style='color:#000000' id='mc:0,bo:2,bo:2,bo:2'>notations</span>
        <ul class="vym-list-ul-4">
          <li><span class='vym-branch-4' style='color:#000000' id='mc:0,bo:2,bo:2,bo:2,bo:0'>+(3, 4) Prefix notation</span>  </li>
          <li><span class='vym-branch-4' style='color:#000000' id='mc:0,bo:2,bo:2,bo:2,bo:1'>3+4 infix</span>  </li>
          <li><span class='vym-branch-4' style='color:#000000' id='mc:0,bo:2,bo:2,bo:2,bo:2'>(3,4)+ post fix</span>  </li>
        </ul>  </li>
        <li><span class='vym-branch-3' style='color:#000000' id='mc:0,bo:2,bo:2,bo:3'>The operators are functions in infix notation</span>  </li>
        <li><span class='vym-branch-3' style='color:#000000' id='mc:0,bo:2,bo:2,bo:4'>Operators are functions that return values</span>  </li>
      </ul>  </li>
      <li><span class='vym-branch-2' style='color:#000000' id='mc:0,bo:2,bo:3'>Operator Precedence and Associativity</span>
      <ul class="vym-list-ul-3">
        <li><span class='vym-branch-3' style='color:#000000' id='mc:0,bo:2,bo:3,bo:0'>Operator Precedence</span>
        <ul class="vym-list-ul-4">
          <li><span class='vym-branch-4' style='color:#000000' id='mc:0,bo:2,bo:3,bo:0,bo:0'>Which operators gets called first</span>  </li>
          <li><span class='vym-branch-4' style='color:#000000' id='mc:0,bo:2,bo:3,bo:0,bo:1'>Higher precendene wins</span>  </li>
          <li><span class='vym-branch-4' style='color:#000000' id='mc:0,bo:2,bo:3,bo:0,bo:2'>JS engine picks the highest precendence</span>  </li>
        </ul>  </li>
        <li><span class='vym-branch-3' style='color:#000000' id='mc:0,bo:2,bo:3,bo:1'>Operator Associativity</span>
        <ul class="vym-list-ul-4">
          <li><span class='vym-branch-4' style='color:#000000' id='mc:0,bo:2,bo:3,bo:1,bo:0'>What order a function/operator gets called in (right to left, left to right)</span>  </li>
          <li><span class='vym-branch-4' style='color:#000000' id='mc:0,bo:2,bo:3,bo:1,bo:1'>When they have the same precendence, associativity determines what gets ccalled
first</span>  </li>
        </ul>  </li>
        <li><span class='vym-branch-3' style='color:#000000' id='mc:0,bo:2,bo:3,bo:2'><a href="file:///home/juxley/Documents/Websites/Operator-Precedence-In-Javascript.pdf"><img src="flags/flag-url-16x16.png">file:///home/juxley/Documents/Websites/Operator-Precedence-In-Javascript.pdf</a></span>  </li>
        <li><span class='vym-branch-3' style='color:#000000' id='mc:0,bo:2,bo:3,bo:3'>Helps us to tell what the order that a operator (function) is called</span>  </li>
        <li><span class='vym-branch-3' style='color:#000000' id='mc:0,bo:2,bo:3,bo:4'>Why is this important? JavaScript is dynamically typed</span>  </li>
      </ul>  </li>
      <li><span class='vym-branch-2' style='color:#000000' id='mc:0,bo:2,bo:4'>Conceptual Aside: Coercion</span>
      <ul class="vym-list-ul-3">
        <li><span class='vym-branch-3' style='color:#000000' id='mc:0,bo:2,bo:4,bo:0'>Converting a value from one type to another</span>  </li>
        <li><span class='vym-branch-3' style='color:#000000' id='mc:0,bo:2,bo:4,bo:1'>&quot;helllo &quot; + &quot;world&quot;</span>  </li>
        <li><span class='vym-branch-3' style='color:#000000' id='mc:0,bo:2,bo:4,bo:2'>1 + 2</span>
        <ul class="vym-list-ul-4">
          <li><span class='vym-branch-4' style='color:#000000' id='mc:0,bo:2,bo:4,bo:2,bo:0'>3</span>  </li>
        </ul>  </li>
        <li><span class='vym-branch-3' style='color:#000000' id='mc:0,bo:2,bo:4,bo:3'>1 + &quot;2&quot;</span>
        <ul class="vym-list-ul-4">
          <li><span class='vym-branch-4' style='color:#000000' id='mc:0,bo:2,bo:4,bo:3,bo:0'>12</span>  </li>
          <li><span class='vym-branch-4' style='color:#000000' id='mc:0,bo:2,bo:4,bo:3,bo:1'>The value is coercied as a string</span>  </li>
          <li><span class='vym-branch-4' style='color:#000000' id='mc:0,bo:2,bo:4,bo:3,bo:2'>In the memory, string and number 1 look very different</span>  </li>
          <li><span class='vym-branch-4' style='color:#000000' id='mc:0,bo:2,bo:4,bo:3,bo:3'>JS engine makes a best guess</span>
          <ul class="vym-list-ul-5">
            <li><span class='vym-branch-5' style='color:#000000' id='mc:0,bo:2,bo:4,bo:3,bo:3,bo:0'>THIS choice!</span>  </li>
          </ul>  </li>
        </ul>  </li>
        <li><span class='vym-branch-3' style='color:#000000' id='mc:0,bo:2,bo:4,bo:4'>This happens since JS is dynmaically typed</span>
        <ul class="vym-list-ul-4">
          <li><span class='vym-branch-4' style='color:#000000' id='mc:0,bo:2,bo:4,bo:4,bo:0'>Happen in the JS engine</span>  </li>
        </ul>  </li>
        <li><span class='vym-branch-3' style='color:#000000' id='mc:0,bo:2,bo:4,bo:5'>operators are function, they run code as well</span>  </li>
        <li><span class='vym-branch-3' style='color:#000000' id='mc:0,bo:2,bo:4,bo:6'>Coercion is a fundalmental part of the language, don't forget it!</span>  </li>
      </ul>  </li>
      <li><span class='vym-branch-2' style='color:#000000' id='mc:0,bo:2,bo:5'>Comparison Operators</span>
      <ul class="vym-list-ul-3">
        <li><span class='vym-branch-3' style='color:#000000' id='mc:0,bo:2,bo:5,bo:0'>3 &lt; 2  &lt;  1</span>
        <ul class="vym-list-ul-4">
          <li><span class='vym-branch-4' style='color:#000000' id='mc:0,bo:2,bo:5,bo:0,bo:0'>true</span>  </li>
        </ul>  </li>
        <li><span class='vym-branch-3' style='color:#000000' id='mc:0,bo:2,bo:5,bo:1'>1 &lt; 2 &lt; 3</span>
        <ul class="vym-list-ul-4">
          <li><span class='vym-branch-4' style='color:#000000' id='mc:0,bo:2,bo:5,bo:1,bo:0'>true</span>  </li>
        </ul>  </li>
        <li><span class='vym-branch-3' style='color:#000000' id='mc:0,bo:2,bo:5,bo:2'>Boolen left &amp; right associativity</span>  </li>
        <li><span class='vym-branch-3' style='color:#000000' id='mc:0,bo:2,bo:5,bo:3'>null</span>
        <ul class="vym-list-ul-4">
          <li><span class='vym-branch-4' style='color:#000000' id='mc:0,bo:2,bo:5,bo:3,bo:0'>Coerced to a number results into 0</span>  </li>
        </ul>  </li>
        <li><span class='vym-branch-3' style='color:#000000' id='mc:0,bo:2,bo:5,bo:4'>NaN</span>
        <ul class="vym-list-ul-4">
          <li><span class='vym-branch-4' style='color:#000000' id='mc:0,bo:2,bo:5,bo:4,bo:0'>Coericing undeified</span>  </li>
        </ul>  </li>
        <li><span class='vym-branch-3' style='color:#000000' id='mc:0,bo:2,bo:5,bo:5'>null == 0</span>  </li>
        <li><span class='vym-branch-3' style='color:#000000' id='mc:0,bo:2,bo:5,bo:6'>Strict equals solves these weird coercives issues</span>
        <ul class="vym-list-ul-4">
          <li><span class='vym-branch-4' style='color:#000000' id='mc:0,bo:2,bo:5,bo:6,bo:0'>use strict equals when comparing quanities</span>  </li>
          <li><span class='vym-branch-4' style='color:#000000' id='mc:0,bo:2,bo:5,bo:6,bo:1'>function ==(a, b)</span>  </li>
          <li><span class='vym-branch-4' style='color:#000000' id='mc:0,bo:2,bo:5,bo:6,bo:2'>function ===(a, b)</span>  </li>
          <li><span class='vym-branch-4' style='color:#000000' id='mc:0,bo:2,bo:5,bo:6,bo:3'>These are only function with different outcomes</span>  </li>
        </ul>  </li>
        <li><span class='vym-branch-3' style='color:#000000' id='mc:0,bo:2,bo:5,bo:7'><a href="/home/juxley/Documents/Mind Maps/Equalty-Comparison-And-Sameness.pdf"><img src="flags/flag-url-16x16.png">Equality Sheet</a></span>  </li>
      </ul>  </li>
      <li><span class='vym-branch-2' style='color:#000000' id='mc:0,bo:2,bo:6'>Existence &amp; Boolean</span>
      <ul class="vym-list-ul-3">
        <li><span class='vym-branch-3' style='color:#000000' id='mc:0,bo:2,bo:6,bo:0'>Things that imply a lack of existence = false</span>
        <ul class="vym-list-ul-4">
          <li><span class='vym-branch-4' style='color:#000000' id='mc:0,bo:2,bo:6,bo:0,bo:0'>We can use this to our advantage with if statements</span>  </li>
          <li><span class='vym-branch-4' style='color:#000000' id='mc:0,bo:2,bo:6,bo:0,bo:1'>if (a || a === 0) // if a has something</span>  </li>
        </ul>  </li>
        <li><span class='vym-branch-3' style='color:#000000' id='mc:0,bo:2,bo:6,bo:1'>Code Example</span>
<table class="vym-note"><tr><td class="vym-note-flag">
<td>
let a;<br/><br/>// a gets data from remote<br/><br/>if (a) {<br/>  <br/>}<br/><br/>//if a is nothing, it will be undefined, which will get coercied  to false.
</td></tr></table>
  </li>
      </ul>  </li>
      <li><span class='vym-branch-2' style='color:#000000' id='mc:0,bo:2,bo:7'>Default Values</span>
      <ul class="vym-list-ul-3">
        <li><span class='vym-branch-3' style='color:#000000' id='mc:0,bo:2,bo:7,bo:0'>Code Example</span>
<table class="vym-note"><tr><td class="vym-note-flag">
<td>
function greet(name) {<br/>  console.log("Hello " + name);<br/>}<br/><br/>greet("Jason");<br/>// Hello Jason<br/><br/>greet();<br/>// Hello undefined<br/><br/><br/>function greet2(name) {<br/>  name = name || &lt;Your name here&gt;;<br/>  console.log("Hello " + name);<br/>}
</td></tr></table>

        <ul class="vym-list-ul-4">
          <li><span class='vym-branch-4' style='color:#000000' id='mc:0,bo:2,bo:7,bo:0,bo:0'>JavaScript creates the memory for the name variable, which would be undeined</span>  </li>
          <li><span class='vym-branch-4' style='color:#000000' id='mc:0,bo:2,bo:7,bo:0,bo:1'>Then, undefined got coericed into a string</span>  </li>
        </ul>  </li>
        <li><span class='vym-branch-3' style='color:#000000' id='mc:0,bo:2,bo:7,bo:1'>JavaScript doesn't care if you don't pass in a paramater for a function</span>  </li>
        <li><span class='vym-branch-3' style='color:#000000' id='mc:0,bo:2,bo:7,bo:2'>What if we want a default value/</span>  </li>
        <li><span class='vym-branch-3' style='color:#000000' id='mc:0,bo:2,bo:7,bo:3'>|| doesn't always return true or false</span>
        <ul class="vym-list-ul-4">
          <li><span class='vym-branch-4' style='color:#000000' id='mc:0,bo:2,bo:7,bo:3,bo:0'>Gives the first one that coerces into true</span>  </li>
        </ul>  </li>
      </ul>  </li>
      <li><span class='vym-branch-2' style='color:#000000' id='mc:0,bo:2,bo:8'>Framework Aside</span>
      <ul class="vym-list-ul-3">
        <li><span class='vym-branch-3' style='color:#000000' id='mc:0,bo:2,bo:8,bo:0'>Framework / LIbaryary = same thing. Reusable code</span>  </li>
        <li><span class='vym-branch-3' style='color:#000000' id='mc:0,bo:2,bo:8,bo:1'>scritp tag</span>
        <ul class="vym-list-ul-4">
          <li><span class='vym-branch-4' style='color:#000000' id='mc:0,bo:2,bo:8,bo:1,bo:0'>They get stacked ontop of each other</span>  </li>
          <li><span class='vym-branch-4' style='color:#000000' id='mc:0,bo:2,bo:8,bo:1,bo:1'>JS is usually minfied anyway</span>  </li>
          <li><span class='vym-branch-4' style='color:#000000' id='mc:0,bo:2,bo:8,bo:1,bo:2'>The code is stacked onto itself, like it's on the file</span>  </li>
        </ul>  </li>
        <li><span class='vym-branch-3' style='color:#000000' id='mc:0,bo:2,bo:8,bo:2'>window.varName = window.varName || &quot;Another string&quot;;</span>
        <ul class="vym-list-ul-4">
          <li><span class='vym-branch-4' style='color:#000000' id='mc:0,bo:2,bo:8,bo:2,bo:0'>Oh, you already used that variable name, I'll excuse myself</span>  </li>
          <li><span class='vym-branch-4' style='color:#000000' id='mc:0,bo:2,bo:8,bo:2,bo:1'>The window object checks the Global Execution Context</span>  </li>
        </ul>  </li>
      </ul>  </li>
    </ul>
  <h2><span class='vym-branch-1' style='color:#000000' id='mc:0,bo:3'>Objects and Functions</span></h2>
    <ul class="vym-list-ul-2">
      <li><span class='vym-branch-2' style='color:#000000' id='mc:0,bo:3,bo:0'>objects and the Dot</span>
      <ul class="vym-list-ul-3">
        <li><span class='vym-branch-3' style='color:#000000' id='mc:0,bo:3,bo:0,bo:0'>Names and values</span>  </li>
        <li><span class='vym-branch-3' style='color:#000000' id='mc:0,bo:3,bo:0,bo:1'>Object 0-1</span>
        <ul class="vym-list-ul-4">
          <li><span class='vym-branch-4' style='color:#000000' id='mc:0,bo:3,bo:0,bo:1,bo:0'>Primitave &quot;property&quot; 0-11</span>
          <ul class="vym-list-ul-5">
            <li><span class='vym-branch-5' style='color:#000000' id='mc:0,bo:3,bo:0,bo:1,bo:0,bo:0'>booleans, strings, numbers, etc.</span>  </li>
          </ul>  </li>
          <li><span class='vym-branch-4' style='color:#000000' id='mc:0,bo:3,bo:0,bo:1,bo:1'>Another (child) Object &quot;property&quot; 0-12</span>  </li>
          <li><span class='vym-branch-4' style='color:#000000' id='mc:0,bo:3,bo:0,bo:1,bo:2'>function &quot;method&quot; 0-13</span>  </li>
          <li><span class='vym-branch-4' style='color:#000000' id='mc:0,bo:3,bo:0,bo:1,bo:3'>Numbers are related like addresses</span>  </li>
          <li><span class='vym-branch-4' style='color:#000000' id='mc:0,bo:3,bo:0,bo:1,bo:4'>it knows where the other object are</span>  </li>
        </ul>  </li>
        <li><span class='vym-branch-3' style='color:#000000' id='mc:0,bo:3,bo:0,bo:2'>Operator</span>
        <ul class="vym-list-ul-4">
          <li><span class='vym-branch-4' style='color:#000000' id='mc:0,bo:3,bo:0,bo:2,bo:0'>computed memeber access</span>
          <ul class="vym-list-ul-5">
            <li><span class='vym-branch-5' style='color:#000000' id='mc:0,bo:3,bo:0,bo:2,bo:0,bo:0'>person[&quot;firstname&quot;] = &quot;Jason&quot;;</span>  </li>
          </ul>  </li>
          <li><span class='vym-branch-4' style='color:#000000' id='mc:0,bo:3,bo:0,bo:2,bo:1'>Member access</span>
          <ul class="vym-list-ul-5">
            <li><span class='vym-branch-5' style='color:#000000' id='mc:0,bo:3,bo:0,bo:2,bo:1,bo:0'>The dot</span>  </li>
            <li><span class='vym-branch-5' style='color:#000000' id='mc:0,bo:3,bo:0,bo:2,bo:1,bo:1'>person.firstname</span>  </li>
          </ul>  </li>
          <li><span class='vym-branch-4' style='color:#000000' id='mc:0,bo:3,bo:0,bo:2,bo:2'>just functoin / operators to FIND these properties</span>  </li>
        </ul>  </li>
      </ul>  </li>
      <li><span class='vym-branch-2' style='color:#000000' id='mc:0,bo:3,bo:1'>Object Literals</span>
      <ul class="vym-list-ul-3">
        <li><span class='vym-branch-3' style='color:#000000' id='mc:0,bo:3,bo:1,bo:0'>var person = { name: &quot;Jason&quot;, sign: &quot;Leo&quot; };</span>  </li>
        <li><span class='vym-branch-3' style='color:#000000' id='mc:0,bo:3,bo:1,bo:1'>JavaScript is liberal with whitespaces</span>  </li>
        <li><span class='vym-branch-3' style='color:#000000' id='mc:0,bo:3,bo:1,bo:2'>Example code</span>
<table class="vym-note"><tr><td class="vym-note-flag">
<td>
var jason = {<br/>  firstname : "Jason",<br/>  lastname : "Ribbe",<br/>  address : {<br/>		street: "12 Fake St",<br/>		city: "Lalaland",<br/>		state: "Colorado"<br/>  }<br/>};<br/><br/>function greet(person) {<br/>	console.log("Hello " + person.firstname);<br/>}<br/><br/>greet(jason);<br/><br/>greet({<br/>  firstname: "Herbit",<br/>  lastname: "MagicJS"<br/>});<br/><br/>console.log(person);
</td></tr></table>
  </li>
        <li><span class='vym-branch-3' style='color:#000000' id='mc:0,bo:3,bo:1,bo:3'>Where ever I want, I can make an object!</span>  </li>
        <li><span class='vym-branch-3' style='color:#000000' id='mc:0,bo:3,bo:1,bo:4'>The code that you're written isn't what is happening under the hood<img src="flags/flag-flash.png"><img src="flags/flag-exclamationmark.png"></span>  </li>
      </ul>  </li>
      <li><span class='vym-branch-2' style='color:#000000' id='mc:0,bo:3,bo:2'>Framework Aside: Faking Namespaces</span>
      <ul class="vym-list-ul-3">
        <li><span class='vym-branch-3' style='color:#000000' id='mc:0,bo:3,bo:2,bo:0'>Namespaces</span>
        <ul class="vym-list-ul-4">
          <li><span class='vym-branch-4' style='color:#000000' id='mc:0,bo:3,bo:2,bo:0,bo:0'>A container for variables and functions</span>  </li>
        </ul>  </li>
        <li><span class='vym-branch-3' style='color:#000000' id='mc:0,bo:3,bo:2,bo:1'>JavaScript doesn't have namespaces, it doesn't need to; it can fake it.</span>  </li>
        <li><span class='vym-branch-3' style='color:#000000' id='mc:0,bo:3,bo:2,bo:2'>Problem: a case where a global variable needs 2 values</span>  </li>
        <li><span class='vym-branch-3' style='color:#000000' id='mc:0,bo:3,bo:2,bo:3'>Solution: use an object to make sure there is not namespace collations</span>
        <ul class="vym-list-ul-4">
          <li><span class='vym-branch-4' style='color:#000000' id='mc:0,bo:3,bo:2,bo:3,bo:0'>Example code</span>
          <ul class="vym-list-ul-5">
            <li><span class='vym-branch-5' style='color:#000000' id='mc:0,bo:3,bo:2,bo:3,bo:0,bo:0'></span>  </li>
          </ul>  </li>
        </ul>  </li>
        <li><span class='vym-branch-3' style='color:#000000' id='mc:0,bo:3,bo:2,bo:4'>Pitfall</span>
        <ul class="vym-list-ul-4">
          <li><span class='vym-branch-4' style='color:#000000' id='mc:0,bo:3,bo:2,bo:4,bo:0'>var english = {}; english.greetings.greet1 = &quot;Hello&quot;;</span>
          <ul class="vym-list-ul-5">
            <li><span class='vym-branch-5' style='color:#000000' id='mc:0,bo:3,bo:2,bo:4,bo:0,bo:0'>Output:Uncaught type error: greetings is undefined</span>  </li>
            <li><span class='vym-branch-5' style='color:#000000' id='mc:0,bo:3,bo:2,bo:4,bo:0,bo:1'>english.greeting will be undefined</span>  </li>
          </ul>  </li>
        </ul>  </li>
      </ul>  </li>
      <li><span class='vym-branch-2' style='color:#000000' id='mc:0,bo:3,bo:3'>JSON and Object Literal</span>
      <ul class="vym-list-ul-3">
        <li><span class='vym-branch-3' style='color:#000000' id='mc:0,bo:3,bo:3,bo:0'>Inspired by object literal</span>
        <ul class="vym-list-ul-4">
          <li><span class='vym-branch-4' style='color:#000000' id='mc:0,bo:3,bo:3,bo:0,bo:0'>Not the same as object literals</span>  </li>
        </ul>  </li>
        <li><span class='vym-branch-3' style='color:#000000' id='mc:0,bo:3,bo:3,bo:1'>JavaScript Object Nottation</span>  </li>
        <li><span class='vym-branch-3' style='color:#000000' id='mc:0,bo:3,bo:3,bo:2'>Many formats were send across the wire (the internet)</span>  </li>
        <li><span class='vym-branch-3' style='color:#000000' id='mc:0,bo:3,bo:3,bo:3'>Example code</span>
<table class="vym-note"><tr><td class="vym-note-flag">
<td>
var objectLiteral = {<br/>    firstname: 'Mary',<br/>    isAProgrammer: true<br/>}<br/><br/>console.log(JSON.stringify(objectLiteral));<br/><br/>var jsonValue = JSON.parse('{ "firstname": "Mary", "isAProgrammer": true }');<br/><br/>console.log(jsonValue);
</td></tr></table>
  </li>
        <li><span class='vym-branch-3' style='color:#000000' id='mc:0,bo:3,bo:3,bo:4'>JSON is more strict</span>  </li>
      </ul>  </li>
      <li><span class='vym-branch-2' style='color:#000000' id='mc:0,bo:3,bo:4'>Functions are objects<img src="flags/flag-info.png"></span>
<table class="vym-note"><tr><td class="vym-note-flag">
<td>
nb
</td></tr></table>

      <ul class="vym-list-ul-3">
        <li><span class='vym-branch-3' style='color:#000000' id='mc:0,bo:3,bo:4,bo:0'>1st class functions</span>
        <ul class="vym-list-ul-4">
          <li><span class='vym-branch-4' style='color:#000000' id='mc:0,bo:3,bo:4,bo:0,bo:0'>Everything you can do other types, you can do with functions</span>  </li>
          <li><span class='vym-branch-4' style='color:#000000' id='mc:0,bo:3,bo:4,bo:0,bo:1'>You can have functions as paramerts, set them equal to variables, write them on
the fly</span>  </li>
        </ul>  </li>
        <li><span class='vym-branch-3' style='color:#000000' id='mc:0,bo:3,bo:4,bo:1'>A function is a special type of object</span>
        <ul class="vym-list-ul-4">
          <li><span class='vym-branch-4' style='color:#000000' id='mc:0,bo:3,bo:4,bo:1,bo:0'>You can attach properties and methods to a function</span>
          <ul class="vym-list-ul-5">
            <li><span class='vym-branch-5' style='color:#000000' id='mc:0,bo:3,bo:4,bo:1,bo:0,bo:0'>Primative</span>  </li>
            <li><span class='vym-branch-5' style='color:#000000' id='mc:0,bo:3,bo:4,bo:1,bo:0,bo:1'>Object</span>  </li>
            <li><span class='vym-branch-5' style='color:#000000' id='mc:0,bo:3,bo:4,bo:1,bo:0,bo:2'>Functions</span>  </li>
            <li><span class='vym-branch-5' style='color:#000000' id='mc:0,bo:3,bo:4,bo:1,bo:0,bo:3'>Example Code</span>
<table class="vym-note"><tr><td class="vym-note-flag">
<td>
function greet() {<br/>  console.log("Hello");<br/>}<br/><br/>greet.lang = "english";<br/><br/>console.log(greet);<br/>console.log(greet.language);<br/><br/>//output<br/>/*<br/>function greet() {<br/>  console.log("Hello");<br/>}<br/>"english"<br/>*/
</td></tr></table>
  </li>
          </ul>  </li>
          <li><span class='vym-branch-4' style='color:#000000' id='mc:0,bo:3,bo:4,bo:1,bo:1'>Special parts</span>
          <ul class="vym-list-ul-5">
            <li><span class='vym-branch-5' style='color:#000000' id='mc:0,bo:3,bo:4,bo:1,bo:1,bo:0'>Names</span>
            <ul class="vym-list-ul-6">
              <li><span class='vym-branch-6' style='color:#000000' id='mc:0,bo:3,bo:4,bo:1,bo:1,bo:0,bo:0'>Doesn't have to have one</span>  </li>
            </ul>  </li>
            <li><span class='vym-branch-5' style='color:#000000' id='mc:0,bo:3,bo:4,bo:1,bo:1,bo:1'>Code property</span>
            <ul class="vym-list-ul-6">
              <li><span class='vym-branch-6' style='color:#000000' id='mc:0,bo:3,bo:4,bo:1,bo:1,bo:1,bo:0'>Invocable</span>
              <ul class="vym-list-ul-7">
                <li><span class='vym-branch-7' style='color:#000000' id='mc:0,bo:3,bo:4,bo:1,bo:1,bo:1,bo:0,bo:0'>Run this code please! (execution context, exeuction, etc.)</span>  </li>
              </ul>  </li>
            </ul>  </li>
          </ul>  </li>
        </ul>  </li>
      </ul>  </li>
      <li><span class='vym-branch-2' style='color:#000000' id='mc:0,bo:3,bo:5'>Function Statements and Function Expressions</span>
      <ul class="vym-list-ul-3">
        <li><span class='vym-branch-3' style='color:#000000' id='mc:0,bo:3,bo:5,bo:0'>Expression: a unit of code that results in a value</span>
        <ul class="vym-list-ul-4">
          <li><span class='vym-branch-4' style='color:#000000' id='mc:0,bo:3,bo:5,bo:0,bo:0'>Doesn't have to save inside a variable</span>  </li>
          <li><span class='vym-branch-4' style='color:#000000' id='mc:0,bo:3,bo:5,bo:0,bo:1'>Examples</span>
<table class="vym-note"><tr><td class="vym-note-flag">
<td>
var a  = 3<br/>1 + 2;;
</td></tr></table>
  </li>
          <li><span class='vym-branch-4' style='color:#000000' id='mc:0,bo:3,bo:5,bo:0,bo:2'>function expression</span>
<table class="vym-note"><tr><td class="vym-note-flag">
<td>
var anonynomus = function () {<br/>  console.log("hello");<br/>}
</td></tr></table>

          <ul class="vym-list-ul-5">
            <li><span class='vym-branch-5' style='color:#000000' id='mc:0,bo:3,bo:5,bo:0,bo:2,bo:0'>It doesn't have a name, it's an anonymous function stored in memory with the
name of anaoymous greet</span>  </li>
          </ul>  </li>
          <li><span class='vym-branch-4' style='color:#000000' id='mc:0,bo:3,bo:5,bo:0,bo:3'>Returns an object, while a function statement will say &quot;yeah there's a function
there&quot; and won't execute it in any way</span>  </li>
          <li><span class='vym-branch-4' style='color:#000000' id='mc:0,bo:3,bo:5,bo:0,bo:4'>Variable set to undefined first</span>  </li>
        </ul>  </li>
        <li><span class='vym-branch-3' style='color:#000000' id='mc:0,bo:3,bo:5,bo:1'>STatement: does work</span>
        <ul class="vym-list-ul-4">
          <li><span class='vym-branch-4' style='color:#000000' id='mc:0,bo:3,bo:5,bo:1,bo:0'>If statement</span>  </li>
          <li><span class='vym-branch-4' style='color:#000000' id='mc:0,bo:3,bo:5,bo:1,bo:1'>function statement</span>
<table class="vym-note"><tr><td class="vym-note-flag">
<td>
function greet() {<br/>  console.log("Hi");<br/>}
</td></tr></table>

          <ul class="vym-list-ul-5">
            <li><span class='vym-branch-5' style='color:#000000' id='mc:0,bo:3,bo:5,bo:1,bo:1,bo:0'>It doesn't result in a value</span>  </li>
            <li><span class='vym-branch-5' style='color:#000000' id='mc:0,bo:3,bo:5,bo:1,bo:1,bo:1'>Available in memory</span>  </li>
            <li><span class='vym-branch-5' style='color:#000000' id='mc:0,bo:3,bo:5,bo:1,bo:1,bo:2'>Hoisted</span>  </li>
          </ul>  </li>
        </ul>  </li>
        <li><span class='vym-branch-3' style='color:#000000' id='mc:0,bo:3,bo:5,bo:2'>Good good is being understandable and consie</span>  </li>
        <li><span class='vym-branch-3' style='color:#000000' id='mc:0,bo:3,bo:5,bo:3'>function log(a) {</span>
<table class="vym-note"><tr><td class="vym-note-flag">
<td>
<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.0//EN" "http://www.w3.org/TR/REC-html40/strict.dtd">

<p class="vym-note-paragraph"><span style=" font-family:'Sans'; font-size:10pt; font-weight:600; color:#680000;">...<br /><br />function log(a) {</span></p>
<p class="vym-note-paragraph"><span style=" font-family:'Sans'; font-size:10pt; font-weight:600; color:#680000;"> console.log(a);</span></p>
<p class="vym-note-paragraph"><span style=" font-family:'Sans'; font-size:10pt; font-weight:600; color:#680000;"> a();</span></p>
<p class="vym-note-paragraph"><span style=" font-family:'Sans'; font-size:10pt; font-weight:600; color:#680000;">}</span></p>
<p class="vym-note-paragraph"><br /></p>
<p class="vym-note-paragraph"><span style=" font-family:'Sans'; font-size:10pt; font-weight:600; color:#680000;">log(3);</span></p>
<p class="vym-note-paragraph"><span style=" font-family:'Sans'; font-size:10pt; font-weight:600; color:#680000;">log(&quot;three&quot;);</span></p>
<p class="vym-note-paragraph"><span style=" font-family:'Sans'; font-size:10pt; font-weight:600; color:#680000;">log({greeting: hi});</span></p>
<p class="vym-note-paragraph"><br /></p>
<p class="vym-note-paragraph"><span style=" font-family:'Sans'; font-size:10pt; font-weight:600; color:#680000;">log(function() {</span></p>
<p class="vym-note-paragraph"><span style=" font-family:'Sans'; font-size:10pt; font-weight:600; color:#680000;">  console.log(&quot;hi&quot;);</span></p>
<p class="vym-note-paragraph"><span style=" font-family:'Sans'; font-size:10pt; font-weight:600; color:#680000;">});</span></p>
<p class="vym-note-paragraph"><br /></p>
<p class="vym-note-paragraph"><br /></p>
<p class="vym-note-paragraph"><br /></p>
</td></tr></table>
  </li>
        <li><span class='vym-branch-3' style='color:#000000' id='mc:0,bo:3,bo:5,bo:4'>Passing function around, give function to function as parameters, use them like
variables = functional programming</span>  </li>
        <li><span class='vym-branch-3' style='color:#000000' id='mc:0,bo:3,bo:5,bo:5'>first class function'; functions in JS are objects</span>  </li>
      </ul>  </li>
      <li><span class='vym-branch-2' style='color:#000000' id='mc:0,bo:3,bo:6'>By Reference / By Value</span>
      <ul class="vym-list-ul-3">
        <li><span class='vym-branch-3' style='color:#000000' id='mc:0,bo:3,bo:6,bo:0'>By Value</span>
        <ul class="vym-list-ul-4">
          <li><span class='vym-branch-4' style='color:#000000' id='mc:0,bo:3,bo:6,bo:0,bo:0'>b = a</span>  </li>
          <li><span class='vym-branch-4' style='color:#000000' id='mc:0,bo:3,bo:6,bo:0,bo:1'><a href="/home/juxley/Pictures/byreferencebyvalue1.png"><img src="flags/flag-url-16x16.png">Model</a></span>  </li>
          <li><span class='vym-branch-4' style='color:#000000' id='mc:0,bo:3,bo:6,bo:0,bo:2'>Primitve types! (all, except objects)</span>  </li>
          <li><span class='vym-branch-4' style='color:#000000' id='mc:0,bo:3,bo:6,bo:0,bo:3'>After copying, the variables can stay on their own.</span>  </li>
        </ul>  </li>
        <li><span class='vym-branch-3' style='color:#000000' id='mc:0,bo:3,bo:6,bo:1'>By Reference</span>
        <ul class="vym-list-ul-4">
          <li><span class='vym-branch-4' style='color:#000000' id='mc:0,bo:3,bo:6,bo:1,bo:0'>Objects (all objects, which includes functions)</span>  </li>
          <li><span class='vym-branch-4' style='color:#000000' id='mc:0,bo:3,bo:6,bo:1,bo:1'>Two names point to the same place in memory</span>  </li>
          <li><span class='vym-branch-4' style='color:#000000' id='mc:0,bo:3,bo:6,bo:1,bo:2'><a href="/home/juxley/Pictures/byreference.png"><img src="flags/flag-url-16x16.png">Model</a></span>  </li>
        </ul>  </li>
        <li><span class='vym-branch-3' style='color:#000000' id='mc:0,bo:3,bo:6,bo:2'>Code</span>
<table class="vym-note"><tr><td class="vym-note-flag">
<td>
//by value<br/>var a = 3;<br/>var b;<br/><br/>b = a;<br/>a = 2;<br/><br/><br/>//by reference<br/><br/>var c = { greeting: "hi" };<br/>var d = c;<br/>c.greet = "hello"; //mutated<br/><br/>//by reference, even as a parameter<br/><br/>function changeGreet(obj) {<br/>  obj.greet = "Hola";<br/>}<br/><br/>c.greet = d.greet = obj.greet;<br/>c.greet = { greeting: "hiya" };  // new place in memeory for that to live
</td></tr></table>
  </li>
        <li><span class='vym-branch-3' style='color:#000000' id='mc:0,bo:3,bo:6,bo:3'>mutated</span>
        <ul class="vym-list-ul-4">
          <li><span class='vym-branch-4' style='color:#000000' id='mc:0,bo:3,bo:6,bo:3,bo:0'>To chang a avlue</span>  </li>
        </ul>  </li>
        <li><span class='vym-branch-3' style='color:#000000' id='mc:0,bo:3,bo:6,bo:4'>immuatable</span>
        <ul class="vym-list-ul-4">
          <li><span class='vym-branch-4' style='color:#000000' id='mc:0,bo:3,bo:6,bo:4,bo:0'>Cannot be change</span>  </li>
        </ul>  </li>
      </ul>  </li>
      <li><span class='vym-branch-2' style='color:#000000' id='mc:0,bo:3,bo:7'><a href="/home/juxley/Pictures/this.png"><img src="flags/flag-url-16x16.png">Objects, Functions, and &quot;this&quot;</a></span>
      <ul class="vym-list-ul-3">
        <li><span class='vym-branch-3' style='color:#000000' id='mc:0,bo:3,bo:7,bo:0'>Each time an execution context is made, JavaScript makes the 'this' object</span>  </li>
        <li><span class='vym-branch-3' style='color:#000000' id='mc:0,bo:3,bo:7,bo:1'>3 Execution Conext</span>
        <ul class="vym-list-ul-4">
          <li><span class='vym-branch-4' style='color:#000000' id='mc:0,bo:3,bo:7,bo:1,bo:0'>All 3 'this' point to the global object, the Window object</span>  </li>
          <li><span class='vym-branch-4' style='color:#000000' id='mc:0,bo:3,bo:7,bo:1,bo:1'>Code Example</span>
<table class="vym-note"><tr><td class="vym-note-flag">
<td>
function a() {<br/>  console.log(this);<br/>  this.newVar = "Hello"<br/>} <br/><br/>var b = function() {<br/>  console.log(this);<br/>};<br/><br/>a();<br/>console.log("Hello"); // works<br/> <br/>b();<br/><br/>var c = {<br/>  name: "c object",<br/>  log: function() {<br/><br/>   var self = this;<br/><br/>	  self.name = "updated c object";<br/>      console.log(self);<br/>   <br/><br/>  var setName = function(newName) {<br/>    this.name = newName; //on the global objects<br/>    self.name = newName;<br/>  }<br/>   setName("OOPS! this.anme is on the global object, while self.name is on the c<br/>object")<br/>   console.log(self);<br/>  }<br/>}
</td></tr></table>
  </li>
          <li><span class='vym-branch-4' style='color:#000000' id='mc:0,bo:3,bo:7,bo:1,bo:2'>'this' will point to the ojbect is attached to. It will point to the object it
contains to.</span>  </li>
          <li><span class='vym-branch-4' style='color:#000000' id='mc:0,bo:3,bo:7,bo:1,bo:3'>You can access the properties within the object using 'this'</span>  </li>
          <li><span class='vym-branch-4' style='color:#000000' id='mc:0,bo:3,bo:7,bo:1,bo:4'>when just invocating a funciton, 'this' points to the global object</span>  </li>
          <li><span class='vym-branch-4' style='color:#000000' id='mc:0,bo:3,bo:7,bo:1,bo:5'>when in a object, 'this points to the object itself</span>  </li>
        </ul>  </li>
      </ul>  </li>
      <li><span class='vym-branch-2' style='color:#000000' id='mc:0,bo:3,bo:8'><a href="/home/juxley/Pictures/collectionofanything.png"><img src="flags/flag-url-16x16.png">Conceptual Aside: Collection of Anything</a></span>  </li>
      <li><span class='vym-branch-2' style='color:#000000' id='mc:0,bo:3,bo:9'>arguments and &quot;spread&quot;</span>
      <ul class="vym-list-ul-3">
        <li><span class='vym-branch-3' style='color:#000000' id='mc:0,bo:3,bo:9,bo:0'></span>  </li>
        <li><span class='vym-branch-3' style='color:#000000' id='mc:0,bo:3,bo:9,bo:1'>arguments hold all the values of all of the parameters passed into a function</span>  </li>
        <li><span class='vym-branch-3' style='color:#000000' id='mc:0,bo:3,bo:9,bo:2'>Arguments =&gt; The parameters yyou pass into a function</span>  </li>
        <li><span class='vym-branch-3' style='color:#000000' id='mc:0,bo:3,bo:9,bo:3'>JavaScript gives you a key word that stores tthem in</span>  </li>
        <li><span class='vym-branch-3' style='color:#000000' id='mc:0,bo:3,bo:9,bo:4'>Example</span>
<table class="vym-note"><tr><td class="vym-note-flag">
<td>
function greet(first, last, langauge, ...other) {<br/>  langauge = langauge || "en";<br/><br/>  if (arguments.length === 0) {<br/>  console.('Missing Parametrs');<br/>  console.log('------');<br/>  return<br/>}<br/><br/>  console.log({first, last, langauge});<br/>  console.log(arguments);<br/>  console.log("arg 0: "<br/>  console.log("----------------------");<br/>}<br/><br/>greet();q<br/>greet("jason");<br/>greet("Jason", "Ribble", "cz");
</td></tr></table>
  </li>
        <li><span class='vym-branch-3' style='color:#000000' id='mc:0,bo:3,bo:9,bo:5'>Hving default parameters</span>  </li>
        <li><span class='vym-branch-3' style='color:#000000' id='mc:0,bo:3,bo:9,bo:6'>arguments keyword IS NOT really an array.</span>
        <ul class="vym-list-ul-4">
          <li><span class='vym-branch-4' style='color:#000000' id='mc:0,bo:3,bo:9,bo:6,bo:0'>Know as array-like</span>  </li>
        </ul>  </li>
        <li><span class='vym-branch-3' style='color:#000000' id='mc:0,bo:3,bo:9,bo:7'>Arguments are depreeated</span>  </li>
        <li><span class='vym-branch-3' style='color:#000000' id='mc:0,bo:3,bo:9,bo:8'>Spread!</span>
        <ul class="vym-list-ul-4">
          <li><span class='vym-branch-4' style='color:#000000' id='mc:0,bo:3,bo:9,bo:8,bo:0'>...other</span>  </li>
          <li><span class='vym-branch-4' style='color:#000000' id='mc:0,bo:3,bo:9,bo:8,bo:1'>Take the paramets and put them in an array called other</span>  </li>
        </ul>  </li>
      </ul>  </li>
      <li><span class='vym-branch-2' style='color:#000000' id='mc:0,bo:3,bo:10'>Framework Aside : function overloading</span>
<table class="vym-note"><tr><td class="vym-note-flag">
<td>
function greet(first, last, lang) {<br/><br/>if (lang === "en") {<br/>  console.log("hello " + first + " " + last);<br/>}<br/><br/>if (lang === "es") {<br/>  console.log("hola " + first + " " + last);<br/>}<br/><br/>}<br/><br/>function greetEn(first, last) {<br/>  greet(first, last, 'en');<br/>}<br/><br/>function greetEs(first, last) {<br/>  greet(first, last, 'es');<br/>}
</td></tr></table>

      <ul class="vym-list-ul-3">
        <li><span class='vym-branch-3' style='color:#000000' id='mc:0,bo:3,bo:10,bo:0'>JavaScript doesn't have this, and we don't care</span>  </li>
        <li><span class='vym-branch-3' style='color:#000000' id='mc:0,bo:3,bo:10,bo:1'>We have 1st class functions</span>  </li>
        <li><span class='vym-branch-3' style='color:#000000' id='mc:0,bo:3,bo:10,bo:2'>Example</span>  </li>
      </ul>  </li>
      <li><span class='vym-branch-2' style='color:#000000' id='mc:0,bo:3,bo:11'>Concept Aside: Syntax Parser</span>
      <ul class="vym-list-ul-3">
        <li><span class='vym-branch-3' style='color:#000000' id='mc:0,bo:3,bo:11,bo:0'>The computer transflate it into what the computer can understand</span>  </li>
        <li><span class='vym-branch-3' style='color:#000000' id='mc:0,bo:3,bo:11,bo:1'>A browser is on for JavaScript</span>  </li>
        <li><span class='vym-branch-3' style='color:#000000' id='mc:0,bo:3,bo:11,bo:2'>if it see proper syntax, it'll know what you tend to do</span>  </li>
        <li><span class='vym-branch-3' style='color:#000000' id='mc:0,bo:3,bo:11,bo:3'>character by  character making assumptions, rules, and might even make changes
to your code; trying to determine what you intend to do</span>  </li>
      </ul>  </li>
      <li><span class='vym-branch-2' style='color:#000000' id='mc:0,bo:3,bo:12'>Dangerous Aside!!!!!!! Automatic Semicolin Insertation</span>
      <ul class="vym-list-ul-3">
        <li><span class='vym-branch-3' style='color:#000000' id='mc:0,bo:3,bo:12,bo:0'>The JavaScript syntax parser will put a ; where it expects it to be.</span>  </li>
        <li><span class='vym-branch-3' style='color:#000000' id='mc:0,bo:3,bo:12,bo:1'>Put the semicolons, as you don't want JavaScript to guess for you.</span>  </li>
        <li><span class='vym-branch-3' style='color:#000000' id='mc:0,bo:3,bo:12,bo:2'>Returns (enter) may cause some problems in your code</span>  </li>
        <li><span class='vym-branch-3' style='color:#000000' id='mc:0,bo:3,bo:12,bo:3'>Example (Incorrect)</span>
<table class="vym-note"><tr><td class="vym-note-flag">
<td>
function getPerson() {<br/>  return  //&lt;-Semicolon inserted)<br/>   {<br/>     firstname: 'Tony'<br/>   }<br/>}<br/><br/>console.log(getPerson());
</td></tr></table>
  </li>
        <li><span class='vym-branch-3' style='color:#000000' id='mc:0,bo:3,bo:12,bo:4'>Example (Correct)</span>
<table class="vym-note"><tr><td class="vym-note-flag">
<td>
function getPerson() {<br/>  return { <br/>     firstname: 'Tony'<br/>   }<br/>}<br/><br/>console.log(getPerson());
</td></tr></table>
  </li>
        <li><span class='vym-branch-3' style='color:#000000' id='mc:0,bo:3,bo:12,bo:5'>Put { on the same line as the statement (object, function, if, etc.)</span>  </li>
      </ul>  </li>
      <li><span class='vym-branch-2' style='color:#000000' id='mc:0,bo:3,bo:13'>Conceptual Aside :WhitespacesJ</span>
      <ul class="vym-list-ul-3">
        <li><span class='vym-branch-3' style='color:#000000' id='mc:0,bo:3,bo:13,bo:0'>JavaScript is very liberal</span>  </li>
        <li><span class='vym-branch-3' style='color:#000000' id='mc:0,bo:3,bo:13,bo:1'>Make comments! You add one using white spaces</span>
        <ul class="vym-list-ul-4">
          <li><span class='vym-branch-4' style='color:#000000' id='mc:0,bo:3,bo:13,bo:1,bo:0'></span>  </li>
        </ul>  </li>
        <li><span class='vym-branch-3' style='color:#000000' id='mc:0,bo:3,bo:13,bo:2'>Example</span>
<table class="vym-note"><tr><td class="vym-note-flag">
<td>
var<br/><br/>// look at that<br/>  firstname,<br/>  lastname,<br/>//another one<br/>  lang;<br/><br/>var person {<br/>  // the first name<br/>  firstname: 'Jason',<br/>  // More white space<br/>  lastname: 'Ribble';<br/>}
</td></tr></table>
  </li>
        <li><span class='vym-branch-3' style='color:#000000' id='mc:0,bo:3,bo:13,bo:3'>Programming will be happy to put a lot of coments to take adventage of this</span>  </li>
        <li><span class='vym-branch-3' style='color:#000000' id='mc:0,bo:3,bo:13,bo:4'>When coming back to your own code you'll be happy</span>  </li>
      </ul>  </li>
      <li><span class='vym-branch-2' style='color:#000000' id='mc:0,bo:3,bo:14'>Immeditaly Invoked Function Expressions</span>
      <ul class="vym-list-ul-3">
        <li><span class='vym-branch-3' style='color:#000000' id='mc:0,bo:3,bo:14,bo:0'>Function statment</span>  </li>
        <li><span class='vym-branch-3' style='color:#000000' id='mc:0,bo:3,bo:14,bo:1'>Function Expression</span>  </li>
        <li><span class='vym-branch-3' style='color:#000000' id='mc:0,bo:3,bo:14,bo:2'>Functoins</span>
        <ul class="vym-list-ul-4">
          <li><span class='vym-branch-4' style='color:#000000' id='mc:0,bo:3,bo:14,bo:2,bo:0'>Code property (innovcation)</span>  </li>
          <li><span class='vym-branch-4' style='color:#000000' id='mc:0,bo:3,bo:14,bo:2,bo:1'>Name</span>  </li>
        </ul>  </li>
        <li><span class='vym-branch-3' style='color:#000000' id='mc:0,bo:3,bo:14,bo:3'>Invoking something on the fly</span>  </li>
        <li><span class='vym-branch-3' style='color:#000000' id='mc:0,bo:3,bo:14,bo:4'>IIFE</span>
<table class="vym-note"><tr><td class="vym-note-flag">
<td>
var greeting = function(name) {<br/>   return "Hello " + name;<br/>}("Jason");
</td></tr></table>

        <ul class="vym-list-ul-4">
          <li><span class='vym-branch-4' style='color:#000000' id='mc:0,bo:3,bo:14,bo:4,bo:0'>Invocate a function immeditably after creating it</span>  </li>
          <li><span class='vym-branch-4' style='color:#000000' id='mc:0,bo:3,bo:14,bo:4,bo:1'>The variable holds the returned value, not the function</span>  </li>
        </ul>  </li>
        <li><span class='vym-branch-3' style='color:#000000' id='mc:0,bo:3,bo:14,bo:5'>We can put strings, numbers, and objects anywhere, that's not doing anything; we
can do so.</span>
        <ul class="vym-list-ul-4">
          <li><span class='vym-branch-4' style='color:#000000' id='mc:0,bo:3,bo:14,bo:5,bo:0'>We can't do it with functions; it wants to be a function STATEMENT</span>  </li>
          <li><span class='vym-branch-4' style='color:#000000' id='mc:0,bo:3,bo:14,bo:5,bo:1'>UNLESS we have a function expression, by WRAPPING YOUR FUNCTION IN PARENTHESES</span>  </li>
        </ul>  </li>
        <li><span class='vym-branch-3' style='color:#000000' id='mc:0,bo:3,bo:14,bo:6'>Expression: Something that returns a value</span>  </li>
        <li><span class='vym-branch-3' style='color:#000000' id='mc:0,bo:3,bo:14,bo:7'>What's special about this?</span>
        <ul class="vym-list-ul-4">
          <li><span class='vym-branch-4' style='color:#000000' id='mc:0,bo:3,bo:14,bo:7,bo:0'>we can have a function expression (wrapped in parens to trick the syntax
paratex, then we can write a function and run it at the same time</span>  </li>
          <li><span class='vym-branch-4' style='color:#000000' id='mc:0,bo:3,bo:14,bo:7,bo:1'>Another Example</span>
<table class="vym-note"><tr><td class="vym-note-flag">
<td>
(function(name) { <br/>    var greet = "hello "; <br/>	console.log(greet + name); <br/>})("Jason");
</td></tr></table>
  </li>
        </ul>  </li>
        <li><span class='vym-branch-3' style='color:#000000' id='mc:0,bo:3,bo:14,bo:8'>Framework aside IIFE and Safe Code</span>
        <ul class="vym-list-ul-4">
          <li><span class='vym-branch-4' style='color:#000000' id='mc:0,bo:3,bo:14,bo:8,bo:0'>Ran Code</span>
<table class="vym-note"><tr><td class="vym-note-flag">
<td>
(function(name) { <br/>    var greet = "hello "; <br/>	console.log(greet + name); <br/>})("Jason");
</td></tr></table>
  </li>
          <li><span class='vym-branch-4' style='color:#000000' id='mc:0,bo:3,bo:14,bo:8,bo:1'>Execution Stack</span>
          <ul class="vym-list-ul-5">
            <li><span class='vym-branch-5' style='color:#000000' id='mc:0,bo:3,bo:14,bo:8,bo:1,bo:0'>Hits the function expression, create an object with code (anynomous function)</span>  </li>
            <li><span class='vym-branch-5' style='color:#000000' id='mc:0,bo:3,bo:14,bo:8,bo:1,bo:1'>Hits the parentheses that invokes the funciton</span>  </li>
            <li><span class='vym-branch-5' style='color:#000000' id='mc:0,bo:3,bo:14,bo:8,bo:1,bo:2'>Execution Conext of the anynomous function</span>
            <ul class="vym-list-ul-6">
              <li><span class='vym-branch-6' style='color:#000000' id='mc:0,bo:3,bo:14,bo:8,bo:1,bo:2,bo:0'>The parameter goes into the Execution Conext of the anyonmous function, it is
not touching the global enviroment.</span>  </li>
              <li><span class='vym-branch-6' style='color:#000000' id='mc:0,bo:3,bo:14,bo:8,bo:1,bo:2,bo:1'>This allows us to have 2 variable names in JavaScript; esecially when usng
frameworks.</span>  </li>
            </ul>  </li>
          </ul>  </li>
          <li><span class='vym-branch-4' style='color:#000000' id='mc:0,bo:3,bo:14,bo:8,bo:2'><a href="/home/juxley/Pictures/safeiife.png"><img src="flags/flag-url-16x16.png">Image</a></span>  </li>
          <li><span class='vym-branch-4' style='color:#000000' id='mc:0,bo:3,bo:14,bo:8,bo:3'>The entire framework wll be in an IIFE to prevent code from crashing into other
code</span>
          <ul class="vym-list-ul-5">
            <li><span class='vym-branch-5' style='color:#000000' id='mc:0,bo:3,bo:14,bo:8,bo:3,bo:0'>This will also create reuseable code</span>  </li>
          </ul>  </li>
          <li><span class='vym-branch-4' style='color:#000000' id='mc:0,bo:3,bo:14,bo:8,bo:4'>What if we want someting inthe global object?</span>
          <ul class="vym-list-ul-5">
            <li><span class='vym-branch-5' style='color:#000000' id='mc:0,bo:3,bo:14,bo:8,bo:4,bo:0'>Pass the global object (window) into the IIFE</span>
            <ul class="vym-list-ul-6">
              <li><span class='vym-branch-6' style='color:#000000' id='mc:0,bo:3,bo:14,bo:8,bo:4,bo:0,bo:0'>Example</span>
<table class="vym-note"><tr><td class="vym-note-flag">
<td>
<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.0//EN" "http://www.w3.org/TR/REC-html40/strict.dtd">

<p class="vym-note-paragraph"><span style=" color:#000000;">var greeting = &quot;Hola&quot;;</span></p>
<p class="vym-note-paragraph"><br /></p>
<p class="vym-note-paragraph"><span style=" color:#000000;">(functon (global, greetng) {</span></p>
<p class="vym-note-paragraph"><span style=" color:#000000;">    var greetng = 'Hello';</span></p>
<p class="vym-note-paragraph"><span style=" color:#000000;">    global.greetng = &quot;Hiya'';</span></p>
<p class="vym-note-paragraph"><br /></p>
<p class="vym-note-paragraph"><span style=" color:#000000;">})(window, &quot;Jason&quot;);</span></p>
</td></tr></table>
  </li>
            </ul>  </li>
          </ul>  </li>
        </ul>  </li>
      </ul>  </li>
      <li><span class='vym-branch-2' style='color:#000000' id='mc:0,bo:3,bo:15'>Understanding Closures</span>
      <ul class="vym-list-ul-3">
        <li><span class='vym-branch-3' style='color:#000000' id='mc:0,bo:3,bo:15,bo:0'>Example</span>
<table class="vym-note"><tr><td class="vym-note-flag">
<td>
function greet(whattosay) {<br/>  <br/>  return function(name) {<br/>    console.log(whattosay + " " + name);<br/>  }<br/>}<br/><br/>greet("Hi")("Jason");<br/><br/>let sayHey = greet("Hey");<br/>sayHey("Jason");
</td></tr></table>
  </li>
        <li><span class='vym-branch-3' style='color:#000000' id='mc:0,bo:3,bo:15,bo:1'>How does the sayhey varable still know the whattosay value?</span>  </li>
        <li><span class='vym-branch-3' style='color:#000000' id='mc:0,bo:3,bo:15,bo:2'>This is possible due to closures</span>  </li>
        <li><span class='vym-branch-3' style='color:#000000' id='mc:0,bo:3,bo:15,bo:3'>The greet function needs to &quot;end&quot; after the execution is complete. How does it
work?</span>
        <ul class="vym-list-ul-4">
          <li><span class='vym-branch-4' style='color:#000000' id='mc:0,bo:3,bo:15,bo:3,bo:0'>It's pop off the stack when greet finshes reading &quot;return&quot;</span>  </li>
        </ul>  </li>
        <li><span class='vym-branch-3' style='color:#000000' id='mc:0,bo:3,bo:15,bo:4'>The Execution Conext has a space in memory where the variables live.</span>
        <ul class="vym-list-ul-4">
          <li><span class='vym-branch-4' style='color:#000000' id='mc:0,bo:3,bo:15,bo:4,bo:0'>Using it cleans out, due to garabage collection</span>  </li>
          <li><span class='vym-branch-4' style='color:#000000' id='mc:0,bo:3,bo:15,bo:4,bo:1'>However, when the execution conext is complete, the vairables in memory are
still there</span>  </li>
        </ul>  </li>
        <li><span class='vym-branch-3' style='color:#000000' id='mc:0,bo:3,bo:15,bo:5'>When sayHey hits whatstosay, it'll go up the Scope Chain</span>
        <ul class="vym-list-ul-4">
          <li><span class='vym-branch-4' style='color:#000000' id='mc:0,bo:3,bo:15,bo:5,bo:0'>What's in memoery for the &quot;lost&quot; execution conext, the variable can still go
down the scope chain.</span>  </li>
          <li><span class='vym-branch-4' style='color:#000000' id='mc:0,bo:3,bo:15,bo:5,bo:1'>It's &quot;closed it&quot; the outer variables.</span>  </li>
          <li><span class='vym-branch-4' style='color:#000000' id='mc:0,bo:3,bo:15,bo:5,bo:2'>Closing in the variables that are needed.</span>  </li>
        </ul>  </li>
        <li><span class='vym-branch-3' style='color:#000000' id='mc:0,bo:3,bo:15,bo:6'><a href="/home/juxley/Pictures/closures.png"><img src="flags/flag-url-16x16.png">Clousres are a feature of JavaScript; it'll do it for you.</a></span>
        <ul class="vym-list-ul-4">
          <li><span class='vym-branch-4' style='color:#000000' id='mc:0,bo:3,bo:15,bo:6,bo:0'>&quot;You&quot; don't create a clousre</span>  </li>
        </ul>  </li>
        <li><span class='vym-branch-3' style='color:#000000' id='mc:0,bo:3,bo:15,bo:7'>You don't need to worry that the outer execution conext is running; it'll have
the variables within scope</span>  </li>
        <li><span class='vym-branch-3' style='color:#000000' id='mc:0,bo:3,bo:15,bo:8'>Classic Example</span>
<table class="vym-note"><tr><td class="vym-note-flag">
<td>
function buildFunctions() {<br/> <br/>  var arr = [];<br/>  <br/>  for (var i = 0; i &lt; 3; i++) {<br/>     arr.push(function() {<br/>        console.log(i);<br/>      });<br/>  }<br/>  return arr;<br/>}<br/><br/><br/>var fs = buildFunctions();<br/>fs[0]();<br/>fs[1]();<br/>fs[2]();
</td></tr></table>

        <ul class="vym-list-ul-4">
          <li><span class='vym-branch-4' style='color:#000000' id='mc:0,bo:3,bo:15,bo:8,bo:0'><a href="/home/juxley/Pictures/closure2.png"><img src="flags/flag-url-16x16.png">pic</a></span>  </li>
          <li><span class='vym-branch-4' style='color:#000000' id='mc:0,bo:3,bo:15,bo:8,bo:1'>What is the value of the PARENT, what is the value of the memory RIGHT NOW, when
the code is being executed.</span>  </li>
          <li><span class='vym-branch-4' style='color:#000000' id='mc:0,bo:3,bo:15,bo:8,bo:2'>Buildfunctions2</span>
<table class="vym-note"><tr><td class="vym-note-flag">
<td>
function buildIIFE() {<br/> <br/>  var arr = [];<br/>  <br/>  for (var i = 0; i &lt; 3; i++) {<br/>    let j = i; // ES6 that allows for a new part in memory per assigned variable<br/>     arr.push(function() {<br/>        console.log(j);<br/>      });<br/>  }<br/>  return arr;<br/>}<br/><br/><br/>var fs2 = buildIIFE();<br/>fs2[0]();<br/>fs2[1]();<br/>fs2[2]();<br/> 
</td></tr></table>
  </li>
          <li><span class='vym-branch-4' style='color:#000000' id='mc:0,bo:3,bo:15,bo:8,bo:3'>IIFE Version</span>
<table class="vym-note"><tr><td class="vym-note-flag">
<td>
<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.0//EN" "http://www.w3.org/TR/REC-html40/strict.dtd">

<p class="vym-note-paragraph"><span style=" font-family:'Droid Sans Mono,monospace,monospace,Droid Sans Fallback'; font-size:14px; color:#0000ff;">function</span><span style=" font-family:'Droid Sans Mono,monospace,monospace,Droid Sans Fallback'; font-size:14px; color:#000000;"> buildIIFE() {</span></pre>
<p class="vym-note-paragraph"><span style=" font-family:'Droid Sans Mono,monospace,monospace,Droid Sans Fallback'; font-size:14px; color:#000000;"> </span></pre>
<p class="vym-note-paragraph"><span style=" font-family:'Droid Sans Mono,monospace,monospace,Droid Sans Fallback'; font-size:14px; color:#000000;">  </span><span style=" font-family:'Droid Sans Mono,monospace,monospace,Droid Sans Fallback'; font-size:14px; color:#0000ff;">var</span><span style=" font-family:'Droid Sans Mono,monospace,monospace,Droid Sans Fallback'; font-size:14px; color:#000000;"> arr = [];</span></pre>
<p class="vym-note-paragraph"><span style=" font-family:'Droid Sans Mono,monospace,monospace,Droid Sans Fallback'; font-size:14px; color:#000000;">  </span></pre>
<p class="vym-note-paragraph"><span style=" font-family:'Droid Sans Mono,monospace,monospace,Droid Sans Fallback'; font-size:14px; color:#000000;">  </span><span style=" font-family:'Droid Sans Mono,monospace,monospace,Droid Sans Fallback'; font-size:14px; color:#0000ff;">for</span><span style=" font-family:'Droid Sans Mono,monospace,monospace,Droid Sans Fallback'; font-size:14px; color:#000000;"> (</span><span style=" font-family:'Droid Sans Mono,monospace,monospace,Droid Sans Fallback'; font-size:14px; color:#0000ff;">var</span><span style=" font-family:'Droid Sans Mono,monospace,monospace,Droid Sans Fallback'; font-size:14px; color:#000000;"> i = </span><span style=" font-family:'Droid Sans Mono,monospace,monospace,Droid Sans Fallback'; font-size:14px; color:#09885a;">0</span><span style=" font-family:'Droid Sans Mono,monospace,monospace,Droid Sans Fallback'; font-size:14px; color:#000000;">; i &lt; </span><span style=" font-family:'Droid Sans Mono,monospace,monospace,Droid Sans Fallback'; font-size:14px; color:#09885a;">3</span><span style=" font-family:'Droid Sans Mono,monospace,monospace,Droid Sans Fallback'; font-size:14px; color:#000000;">; i++) {</span></pre>
<p class="vym-note-paragraph"><span style=" font-family:'Droid Sans Mono,monospace,monospace,Droid Sans Fallback'; font-size:14px; color:#000000;">     arr.push(</span></pre>
<p class="vym-note-paragraph"><span style=" font-family:'Droid Sans Mono,monospace,monospace,Droid Sans Fallback'; font-size:14px; color:#000000;">       (</span><span style=" font-family:'Droid Sans Mono,monospace,monospace,Droid Sans Fallback'; font-size:14px; color:#0000ff;">function</span><span style=" font-family:'Droid Sans Mono,monospace,monospace,Droid Sans Fallback'; font-size:14px; color:#000000;">(j) {</span></pre>
<p class="vym-note-paragraph"><span style=" font-family:'Droid Sans Mono,monospace,monospace,Droid Sans Fallback'; font-size:14px; color:#000000;">          </span><span style=" font-family:'Droid Sans Mono,monospace,monospace,Droid Sans Fallback'; font-size:14px; color:#0000ff;">return</span><span style=" font-family:'Droid Sans Mono,monospace,monospace,Droid Sans Fallback'; font-size:14px; color:#000000;"> </span><span style=" font-family:'Droid Sans Mono,monospace,monospace,Droid Sans Fallback'; font-size:14px; color:#0000ff;">function</span><span style=" font-family:'Droid Sans Mono,monospace,monospace,Droid Sans Fallback'; font-size:14px; color:#000000;">() {</span></pre>
<p class="vym-note-paragraph"><span style=" font-family:'Droid Sans Mono,monospace,monospace,Droid Sans Fallback'; font-size:14px; color:#000000;">             console.log(j);</span></pre>
<p class="vym-note-paragraph"><span style=" font-family:'Droid Sans Mono,monospace,monospace,Droid Sans Fallback'; font-size:14px; color:#000000;">          }</span></pre>
<p class="vym-note-paragraph"><span style=" font-family:'Droid Sans Mono,monospace,monospace,Droid Sans Fallback'; font-size:14px; color:#000000;">          }(i)));</span></pre>
<p class="vym-note-paragraph"><span style=" font-family:'Droid Sans Mono,monospace,monospace,Droid Sans Fallback'; font-size:14px; color:#000000;">    }</span></pre>
<p class="vym-note-paragraph"><span style=" font-family:'Droid Sans Mono,monospace,monospace,Droid Sans Fallback'; font-size:14px; color:#000000;">  </span><span style=" font-family:'Droid Sans Mono,monospace,monospace,Droid Sans Fallback'; font-size:14px; color:#0000ff;">return</span><span style=" font-family:'Droid Sans Mono,monospace,monospace,Droid Sans Fallback'; font-size:14px; color:#000000;"> arr;</span></pre>
<p class="vym-note-paragraph"><span style=" font-family:'Droid Sans Mono,monospace,monospace,Droid Sans Fallback'; font-size:14px; color:#000000;">}</span></pre>
<p class="vym-note-paragraph"><span style=" font-family:'Droid Sans Mono,monospace,monospace,Droid Sans Fallback'; font-size:14px; color:#000000;"><br /></span></p>
<p class="vym-note-paragraph"><span style=" font-family:'Droid Sans Mono,monospace,monospace,Droid Sans Fallback'; font-size:14px; color:#0000ff;">var</span><span style=" font-family:'Droid Sans Mono,monospace,monospace,Droid Sans Fallback'; font-size:14px; color:#000000;"> fs2 = buildIIFE();</span></pre>
<p class="vym-note-paragraph"><span style=" font-family:'Droid Sans Mono,monospace,monospace,Droid Sans Fallback'; font-size:14px; color:#000000;">fs2[</span><span style=" font-family:'Droid Sans Mono,monospace,monospace,Droid Sans Fallback'; font-size:14px; color:#09885a;">0</span><span style=" font-family:'Droid Sans Mono,monospace,monospace,Droid Sans Fallback'; font-size:14px; color:#000000;">]();</span></pre>
<p class="vym-note-paragraph"><span style=" font-family:'Droid Sans Mono,monospace,monospace,Droid Sans Fallback'; font-size:14px; color:#000000;">fs2[</span><span style=" font-family:'Droid Sans Mono,monospace,monospace,Droid Sans Fallback'; font-size:14px; color:#09885a;">1</span><span style=" font-family:'Droid Sans Mono,monospace,monospace,Droid Sans Fallback'; font-size:14px; color:#000000;">]();</span></pre>
<p class="vym-note-paragraph"><span style=" font-family:'Droid Sans Mono,monospace,monospace,Droid Sans Fallback'; font-size:14px; color:#000000;">fs2[</span><span style=" font-family:'Droid Sans Mono,monospace,monospace,Droid Sans Fallback'; font-size:14px; color:#09885a;">2</span><span style=" font-family:'Droid Sans Mono,monospace,monospace,Droid Sans Fallback'; font-size:14px; color:#000000;">]();</span></pre>
<p class="vym-note-paragraph"> </p>
</td></tr></table>
  </li>
        </ul>  </li>
        <li><span class='vym-branch-3' style='color:#000000' id='mc:0,bo:3,bo:15,bo:9'>Framework Aside: Function Factories</span>
        <ul class="vym-list-ul-4">
          <li><span class='vym-branch-4' style='color:#000000' id='mc:0,bo:3,bo:15,bo:9,bo:0'>Clousres give us the ability to have set parameters in a function; building it
off another function</span>  </li>
          <li><span class='vym-branch-4' style='color:#000000' id='mc:0,bo:3,bo:15,bo:9,bo:1'>When calling the built funciton; the orginal parameter passed through, doesn't
have access to the parameter</span>  </li>
          <li><span class='vym-branch-4' style='color:#000000' id='mc:0,bo:3,bo:15,bo:9,bo:2'>Example</span>
<table class="vym-note"><tr><td class="vym-note-flag">
<td>
function makeGreeting(lang) {<br/>  return function(first, last) {<br/>    if (lang === "en") {<br/> 			console.log("Hello " + first + " " + last")<br/>    }<br/>    <br/>		if (lang === "es") {<br/> 			console.log("Hola " + first + " " + last")<br/>    }<br/>  }<br/>}<br/><br/>var greetEnglish = makeGreeting("en")<br/><br/>var greetSpanish = makeGreeting("es")<br/><br/>greetEnglish("Jason", "Ribble")<br/>greetSpanish("Javier", "Ribblo")
</td></tr></table>
  </li>
          <li><span class='vym-branch-4' style='color:#000000' id='mc:0,bo:3,bo:15,bo:9,bo:3'>When calling the function twice, they aren't in the same memeory space since
they are in another execution context</span>  </li>
          <li><span class='vym-branch-4' style='color:#000000' id='mc:0,bo:3,bo:15,bo:9,bo:4'><a href="/home/juxley/Pictures/closures_factorybuilding.png"><img src="flags/flag-url-16x16.png">Image</a></span>  </li>
        </ul>  </li>
        <li><span class='vym-branch-3' style='color:#000000' id='mc:0,bo:3,bo:15,bo:10'>Closures and CallbacksC</span>
        <ul class="vym-list-ul-4">
          <li><span class='vym-branch-4' style='color:#000000' id='mc:0,bo:3,bo:15,bo:10,bo:0'>Example</span>
<table class="vym-note"><tr><td class="vym-note-flag">
<td>
function sayHiLater() {<br/>   var greet = "hi"<br/><br/>	 setTimeOut(function() {<br/>        console.log(greet)<br/>    }, 3000)<br/><br/>}<br/><br/>sayHiLater()
</td></tr></table>
  </li>
          <li><span class='vym-branch-4' style='color:#000000' id='mc:0,bo:3,bo:15,bo:10,bo:1'>We are passing a function as a variable (first class function)</span>  </li>
          <li><span class='vym-branch-4' style='color:#000000' id='mc:0,bo:3,bo:15,bo:10,bo:2'>We used a function expression (declaring a function on the fly)</span>  </li>
          <li><span class='vym-branch-4' style='color:#000000' id='mc:0,bo:3,bo:15,bo:10,bo:3'>We have greet as clousres</span>  </li>
          <li><span class='vym-branch-4' style='color:#000000' id='mc:0,bo:3,bo:15,bo:10,bo:4'>All of long you've used clousres and first call functoin :D</span>  </li>
          <li><span class='vym-branch-4' style='color:#000000' id='mc:0,bo:3,bo:15,bo:10,bo:5'>Callback; when you're done working, call the function the other function for me
when yo'ure odne</span>  </li>
          <li><span class='vym-branch-4' style='color:#000000' id='mc:0,bo:3,bo:15,bo:10,bo:6'>Callback function: a function given to another function to be run when the other
function is finished</span>
          <ul class="vym-list-ul-5">
            <li><span class='vym-branch-5' style='color:#000000' id='mc:0,bo:3,bo:15,bo:10,bo:6,bo:0'>The function invoked &quot;callsback&quot; by calling the function given when finished</span>  </li>
            <li><span class='vym-branch-5' style='color:#000000' id='mc:0,bo:3,bo:15,bo:10,bo:6,bo:1'>Example Callback</span>
<table class="vym-note"><tr><td class="vym-note-flag">
<td>
<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.0//EN" "http://www.w3.org/TR/REC-html40/strict.dtd">

<p class="vym-note-paragraph"><span style=" color:#000000;">function tellMeWhenDone(callback) {</span></p>
<p class="vym-note-paragraph"><span style=" color:#000000;">  let a= 20000 // work...</span></p>
<p class="vym-note-paragraph"><span style=" color:#000000;">  let b = 30000/ work...</span></p>
<p class="vym-note-paragraph"><br /></p>
<p class="vym-note-paragraph"><span style=" color:#000000;">  callback()</span></p>
<p class="vym-note-paragraph"><span style=" color:#000000;">}</span></p>
<p class="vym-note-paragraph"><br /></p>
<p class="vym-note-paragraph"><span style=" color:#000000;">tellMeWhenDone(function() {</span></p>
<p class="vym-note-paragraph"><span style=" color:#000000;">  console.log(&quot;I'm done&quot;)</span></p>
<p class="vym-note-paragraph"><span style=" color:#000000;">})</span></p>
</td></tr></table>
  </li>
          </ul>  </li>
        </ul>  </li>
      </ul>  </li>
      <li><span class='vym-branch-2' style='color:#000000' id='mc:0,bo:3,bo:16'>call(), apply() bind()</span>
      <ul class="vym-list-ul-3">
        <li><span class='vym-branch-3' style='color:#000000' id='mc:0,bo:3,bo:16,bo:0'>Controlling what the &quot;this&quot; variable can be?</span>
        <ul class="vym-list-ul-4">
          <li><span class='vym-branch-4' style='color:#000000' id='mc:0,bo:3,bo:16,bo:0,bo:0'>That's what these function can do</span>  </li>
        </ul>  </li>
        <li><span class='vym-branch-3' style='color:#000000' id='mc:0,bo:3,bo:16,bo:1'>All function get special methods</span>
        <ul class="vym-list-ul-4">
          <li><span class='vym-branch-4' style='color:#000000' id='mc:0,bo:3,bo:16,bo:1,bo:0'>bind</span>
<table class="vym-note"><tr><td class="vym-note-flag">
<td>
let person = {<br/>  first: "Jason",<br/>  last: "Ribble",<br/>  getFullName: functino() {<br/>    console.log(this.first + " " + this.last)<br/>  }<br/>}<br/><br/> //Will not work as is since _this_ points to logName<br/><br/>var logName = function(lang1, lang2) {<br/>  console.log("Logged: " + this.getFullName)<br/>}//.bind(person) we can do it on the fly<br/><br/><br/>var logPerson = logName.bind(person)<br/>// This will work since bind points _this_ to the person object, which has the<br/>getFullName method<br/><br/>logName()<br/>logPerson()
</td></tr></table>

          <ul class="vym-list-ul-5">
            <li><span class='vym-branch-5' style='color:#000000' id='mc:0,bo:3,bo:16,bo:1,bo:0,bo:0'>Creates a copy, and passing what we want the &quot;this vairable&quot; is</span>  </li>
            <li><span class='vym-branch-5' style='color:#000000' id='mc:0,bo:3,bo:16,bo:1,bo:0,bo:1'>Doesn't call it</span>  </li>
          </ul>  </li>
          <li><span class='vym-branch-4' style='color:#000000' id='mc:0,bo:3,bo:16,bo:1,bo:1'>call</span>
<table class="vym-note"><tr><td class="vym-note-flag">
<td>
logName.call(person, "en", "es")
</td></tr></table>

          <ul class="vym-list-ul-5">
            <li><span class='vym-branch-5' style='color:#000000' id='mc:0,bo:3,bo:16,bo:1,bo:1,bo:0'>logName.call invokes the function, yet we can pass  the &quot;this&quot; variable, and
pass in parameters</span>  </li>
          </ul>  </li>
          <li><span class='vym-branch-4' style='color:#000000' id='mc:0,bo:3,bo:16,bo:1,bo:2'>apply</span>
<table class="vym-note"><tr><td class="vym-note-flag">
<td>
logName.apply(person, [en, es])
</td></tr></table>

          <ul class="vym-list-ul-5">
            <li><span class='vym-branch-5' style='color:#000000' id='mc:0,bo:3,bo:16,bo:1,bo:2,bo:0'>aSame as call, yet you'll have to use arrays; which would help with mathmatics</span>  </li>
            <li><span class='vym-branch-5' style='color:#000000' id='mc:0,bo:3,bo:16,bo:1,bo:2,bo:1'>Can also use a IIFE</span>
<table class="vym-note"><tr><td class="vym-note-flag">
<td>
(function(blah) {<br/>  obj.method(blah)<br/>}).call(obj, blahParm)
</td></tr></table>

            <ul class="vym-list-ul-6">
              <li><span class='vym-branch-6' style='color:#000000' id='mc:0,bo:3,bo:16,bo:1,bo:2,bo:1,bo:0'>When would we use this?</span>  </li>
              <li><span class='vym-branch-6' style='color:#000000' id='mc:0,bo:3,bo:16,bo:1,bo:2,bo:1,bo:1'>Function Borrowing</span>
<table class="vym-note"><tr><td class="vym-note-flag">
<td>
var person2 = {<br/>  first: "Clark", <br/>  last: "Kozak"<br/>}<br/><br/>person.getFullName.apply(person2)
</td></tr></table>

              <ul class="vym-list-ul-7">
                <li><span class='vym-branch-7' style='color:#000000' id='mc:0,bo:3,bo:16,bo:1,bo:2,bo:1,bo:1,bo:0'>We borrwed a functoin and used the person2 object</span>  </li>
              </ul>  </li>
              <li><span class='vym-branch-6' style='color:#000000' id='mc:0,bo:3,bo:16,bo:1,bo:2,bo:1,bo:2'>Function Currying (bind)</span>
<table class="vym-note"><tr><td class="vym-note-flag">
<td>
function mult(a , b) {<br/>  return a * b<br/>}<br/><br/>let multBy2 = mult.bind(this, 2) // 2 will be the permenant value of the a<br/>variable<br/><br/><br/><br/>/*<br/>A "normal" example will look like this<br/><br/>function multBy2 (b) {<br/>  let a = 2<br/>  return a * b<br/>}<br/><br/><br/>*/
</td></tr></table>

              <ul class="vym-list-ul-7">
                <li><span class='vym-branch-7' style='color:#000000' id='mc:0,bo:3,bo:16,bo:1,bo:2,bo:1,bo:2,bo:0'>Sets permant values of the parameters for the copied (new) funciton)</span>  </li>
                <li><span class='vym-branch-7' style='color:#000000' id='mc:0,bo:3,bo:16,bo:1,bo:2,bo:1,bo:2,bo:1'>BWA: function currying: building a copy of a function yet with set parametrs,
good for mathmatics</span>  </li>
              </ul>  </li>
            </ul>  </li>
          </ul>  </li>
        </ul>  </li>
        <li><span class='vym-branch-3' style='color:#000000' id='mc:0,bo:3,bo:16,bo:2'><a href="/home/juxley/Pictures/functionbreakdone.png"><img src="flags/flag-url-16x16.png">Image</a></span>  </li>
      </ul>  </li>
      <li><span class='vym-branch-2' style='color:#000000' id='mc:0,bo:3,bo:17'>Functional Programming</span>
      <ul class="vym-list-ul-3">
        <li><span class='vym-branch-3' style='color:#000000' id='mc:0,bo:3,bo:17,bo:0'>JavaScript looks like other functional programming</span>
        <ul class="vym-list-ul-4">
          <li><span class='vym-branch-4' style='color:#000000' id='mc:0,bo:3,bo:17,bo:0,bo:0'></span>  </li>
          <li><span class='vym-branch-4' style='color:#000000' id='mc:0,bo:3,bo:17,bo:0,bo:1'></span>  </li>
        </ul>  </li>
        <li><span class='vym-branch-3' style='color:#000000' id='mc:0,bo:3,bo:17,bo:1'>Think and code in terms of functions</span>  </li>
        <li><span class='vym-branch-3' style='color:#000000' id='mc:0,bo:3,bo:17,bo:2'>Introduces a new approach of thinking in programming due to first class
functions</span>  </li>
        <li><span class='vym-branch-3' style='color:#000000' id='mc:0,bo:3,bo:17,bo:3'>mapForEach example</span>
<table class="vym-note"><tr><td class="vym-note-flag">
<td>
<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.0//EN" "http://www.w3.org/TR/REC-html40/strict.dtd">

<p class="vym-note-paragraph"><span style=" font-family:'Droid Sans Mono,monospace,monospace,Droid Sans Fallback'; font-size:14px; color:#0000ff;">function</span><span style=" font-family:'Droid Sans Mono,monospace,monospace,Droid Sans Fallback'; font-size:14px; color:#000000;"> mapForEach(arr, fn) {</span></p>
<p class="vym-note-paragraph"><span style=" font-family:'Droid Sans Mono,monospace,monospace,Droid Sans Fallback'; font-size:14px; color:#000000;">  </span><span style=" font-family:'Droid Sans Mono,monospace,monospace,Droid Sans Fallback'; font-size:14px; color:#0000ff;">var</span><span style=" font-family:'Droid Sans Mono,monospace,monospace,Droid Sans Fallback'; font-size:14px; color:#000000;"> newArr = []</span></p>
<p class="vym-note-paragraph"><span style=" font-family:'Droid Sans Mono,monospace,monospace,Droid Sans Fallback'; font-size:14px; color:#000000;">  </span><span style=" font-family:'Droid Sans Mono,monospace,monospace,Droid Sans Fallback'; font-size:14px; color:#0000ff;">for</span><span style=" font-family:'Droid Sans Mono,monospace,monospace,Droid Sans Fallback'; font-size:14px; color:#000000;"> (</span><span style=" font-family:'Droid Sans Mono,monospace,monospace,Droid Sans Fallback'; font-size:14px; color:#0000ff;">var</span><span style=" font-family:'Droid Sans Mono,monospace,monospace,Droid Sans Fallback'; font-size:14px; color:#000000;"> i = </span><span style=" font-family:'Droid Sans Mono,monospace,monospace,Droid Sans Fallback'; font-size:14px; color:#09885a;">0</span><span style=" font-family:'Droid Sans Mono,monospace,monospace,Droid Sans Fallback'; font-size:14px; color:#000000;">; i &lt; arr.length; i++) {</span></p>
<p class="vym-note-paragraph"><span style=" font-family:'Droid Sans Mono,monospace,monospace,Droid Sans Fallback'; font-size:14px; color:#000000;">    newArr.push(</span></p>
<p class="vym-note-paragraph"><span style=" font-family:'Droid Sans Mono,monospace,monospace,Droid Sans Fallback'; font-size:14px; color:#000000;">      fn(arr[i])</span></p>
<p class="vym-note-paragraph"><span style=" font-family:'Droid Sans Mono,monospace,monospace,Droid Sans Fallback'; font-size:14px; color:#000000;">    )</span></p>
<p class="vym-note-paragraph"><span style=" font-family:'Droid Sans Mono,monospace,monospace,Droid Sans Fallback'; font-size:14px; color:#000000;">  }</span></p>
<p class="vym-note-paragraph"><span style=" font-family:'Droid Sans Mono,monospace,monospace,Droid Sans Fallback'; font-size:14px; color:#000000;">  </span><span style=" font-family:'Droid Sans Mono,monospace,monospace,Droid Sans Fallback'; font-size:14px; color:#0000ff;">return</span><span style=" font-family:'Droid Sans Mono,monospace,monospace,Droid Sans Fallback'; font-size:14px; color:#000000;"> newArr</span></p>
<p class="vym-note-paragraph"><span style=" font-family:'Droid Sans Mono,monospace,monospace,Droid Sans Fallback'; font-size:14px; color:#000000;">}</span></p>
<p class="vym-note-paragraph"><span style=" font-family:'Droid Sans Mono,monospace,monospace,Droid Sans Fallback'; font-size:14px; color:#000000;"><br /></span></p>
<p class="vym-note-paragraph"><span style=" font-family:'Droid Sans Mono,monospace,monospace,Droid Sans Fallback'; font-size:14px; color:#0000ff;">var</span><span style=" font-family:'Droid Sans Mono,monospace,monospace,Droid Sans Fallback'; font-size:14px; color:#000000;"> arr1 = [</span><span style=" font-family:'Droid Sans Mono,monospace,monospace,Droid Sans Fallback'; font-size:14px; color:#09885a;">1</span><span style=" font-family:'Droid Sans Mono,monospace,monospace,Droid Sans Fallback'; font-size:14px; color:#000000;">, </span><span style=" font-family:'Droid Sans Mono,monospace,monospace,Droid Sans Fallback'; font-size:14px; color:#09885a;">2</span><span style=" font-family:'Droid Sans Mono,monospace,monospace,Droid Sans Fallback'; font-size:14px; color:#000000;">, </span><span style=" font-family:'Droid Sans Mono,monospace,monospace,Droid Sans Fallback'; font-size:14px; color:#09885a;">3</span><span style=" font-family:'Droid Sans Mono,monospace,monospace,Droid Sans Fallback'; font-size:14px; color:#000000;">]</span></p>
<p class="vym-note-paragraph"><span style=" font-family:'Droid Sans Mono,monospace,monospace,Droid Sans Fallback'; font-size:14px; color:#000000;"><br /></span></p>
<p class="vym-note-paragraph"><span style=" font-family:'Droid Sans Mono,monospace,monospace,Droid Sans Fallback'; font-size:14px; color:#0000ff;">var</span><span style=" font-family:'Droid Sans Mono,monospace,monospace,Droid Sans Fallback'; font-size:14px; color:#000000;"> arr2 = mapForEach(arr1, </span><span style=" font-family:'Droid Sans Mono,monospace,monospace,Droid Sans Fallback'; font-size:14px; color:#0000ff;">function</span><span style=" font-family:'Droid Sans Mono,monospace,monospace,Droid Sans Fallback'; font-size:14px; color:#000000;">(item) {</span></p>
<p class="vym-note-paragraph"><span style=" font-family:'Droid Sans Mono,monospace,monospace,Droid Sans Fallback'; font-size:14px; color:#000000;">  </span><span style=" font-family:'Droid Sans Mono,monospace,monospace,Droid Sans Fallback'; font-size:14px; color:#0000ff;">return</span><span style=" font-family:'Droid Sans Mono,monospace,monospace,Droid Sans Fallback'; font-size:14px; color:#000000;"> item * </span><span style=" font-family:'Droid Sans Mono,monospace,monospace,Droid Sans Fallback'; font-size:14px; color:#09885a;">2</span></p>
<p class="vym-note-paragraph"><span style=" font-family:'Droid Sans Mono,monospace,monospace,Droid Sans Fallback'; font-size:14px; color:#000000;">})</span></p>
<p class="vym-note-paragraph"><span style=" font-family:'Droid Sans Mono,monospace,monospace,Droid Sans Fallback'; font-size:14px; color:#000000;"><br /></span></p>
<p class="vym-note-paragraph"><span style=" font-family:'Droid Sans Mono,monospace,monospace,Droid Sans Fallback'; font-size:14px; color:#0000ff;">var</span><span style=" font-family:'Droid Sans Mono,monospace,monospace,Droid Sans Fallback'; font-size:14px; color:#000000;"> arr3 = mapForEach(arr1, </span><span style=" font-family:'Droid Sans Mono,monospace,monospace,Droid Sans Fallback'; font-size:14px; color:#0000ff;">function</span><span style=" font-family:'Droid Sans Mono,monospace,monospace,Droid Sans Fallback'; font-size:14px; color:#000000;">(item) {</span></p>
<p class="vym-note-paragraph"><span style=" font-family:'Droid Sans Mono,monospace,monospace,Droid Sans Fallback'; font-size:14px; color:#000000;">  </span><span style=" font-family:'Droid Sans Mono,monospace,monospace,Droid Sans Fallback'; font-size:14px; color:#0000ff;">return</span><span style=" font-family:'Droid Sans Mono,monospace,monospace,Droid Sans Fallback'; font-size:14px; color:#000000;"> item &gt; </span><span style=" font-family:'Droid Sans Mono,monospace,monospace,Droid Sans Fallback'; font-size:14px; color:#09885a;">2</span></p>
<p class="vym-note-paragraph"><span style=" font-family:'Droid Sans Mono,monospace,monospace,Droid Sans Fallback'; font-size:14px; color:#000000;">})</span></p>
<p class="vym-note-paragraph"><span style=" font-family:'Droid Sans Mono,monospace,monospace,Droid Sans Fallback'; font-size:14px; color:#000000;"><br /></span></p>
<p class="vym-note-paragraph"><span style=" font-family:'Droid Sans Mono,monospace,monospace,Droid Sans Fallback'; font-size:14px; color:#0000ff;">var</span><span style=" font-family:'Droid Sans Mono,monospace,monospace,Droid Sans Fallback'; font-size:14px; color:#000000;"> checkPastLimit = </span><span style=" font-family:'Droid Sans Mono,monospace,monospace,Droid Sans Fallback'; font-size:14px; color:#0000ff;">function</span><span style=" font-family:'Droid Sans Mono,monospace,monospace,Droid Sans Fallback'; font-size:14px; color:#000000;">(limiter, item) {</span></p>
<p class="vym-note-paragraph"><span style=" font-family:'Droid Sans Mono,monospace,monospace,Droid Sans Fallback'; font-size:14px; color:#000000;">  </span><span style=" font-family:'Droid Sans Mono,monospace,monospace,Droid Sans Fallback'; font-size:14px; color:#0000ff;">return</span><span style=" font-family:'Droid Sans Mono,monospace,monospace,Droid Sans Fallback'; font-size:14px; color:#000000;"> item &gt; limiter</span></p>
<p class="vym-note-paragraph"><span style=" font-family:'Droid Sans Mono,monospace,monospace,Droid Sans Fallback'; font-size:14px; color:#000000;">}</span></p>
<p class="vym-note-paragraph"><span style=" font-family:'Droid Sans Mono,monospace,monospace,Droid Sans Fallback'; font-size:14px; color:#000000;"><br /></span></p>
<p class="vym-note-paragraph"><span style=" font-family:'Droid Sans Mono,monospace,monospace,Droid Sans Fallback'; font-size:14px; color:#aaaaaa;">// how can we pass checkPastLimit to mapForEach? We can use bind</span></p>
<p class="vym-note-paragraph"><span style=" font-family:'Droid Sans Mono,monospace,monospace,Droid Sans Fallback'; font-size:14px; color:#000000;"><br /></span></p>
<p class="vym-note-paragraph"><span style=" font-family:'Droid Sans Mono,monospace,monospace,Droid Sans Fallback'; font-size:14px; color:#0000ff;">var</span><span style=" font-family:'Droid Sans Mono,monospace,monospace,Droid Sans Fallback'; font-size:14px; color:#000000;"> arr4 = mapForEach(arr1, checkPastLimit.bind(</span><span style=" font-family:'Droid Sans Mono,monospace,monospace,Droid Sans Fallback'; font-size:14px; color:#0000ff;">this</span><span style=" font-family:'Droid Sans Mono,monospace,monospace,Droid Sans Fallback'; font-size:14px; color:#000000;">, </span><span style=" font-family:'Droid Sans Mono,monospace,monospace,Droid Sans Fallback'; font-size:14px; color:#09885a;">1</span><span style=" font-family:'Droid Sans Mono,monospace,monospace,Droid Sans Fallback'; font-size:14px; color:#000000;">))</span></p>
<p class="vym-note-paragraph"><span style=" font-family:'Droid Sans Mono,monospace,monospace,Droid Sans Fallback'; font-size:14px; color:#000000;"><br /></span></p>
<p class="vym-note-paragraph"><span style=" font-family:'Droid Sans Mono,monospace,monospace,Droid Sans Fallback'; font-size:14px; color:#aaaaaa;">//how can we have checkPastLimit only accept a limiter?)</span></p>
<p class="vym-note-paragraph"><span style=" font-family:'Droid Sans Mono,monospace,monospace,Droid Sans Fallback'; font-size:14px; color:#000000;"><br /></span></p>
<p class="vym-note-paragraph"><span style=" font-family:'Droid Sans Mono,monospace,monospace,Droid Sans Fallback'; font-size:14px; color:#0000ff;">var</span><span style=" font-family:'Droid Sans Mono,monospace,monospace,Droid Sans Fallback'; font-size:14px; color:#000000;"> checkForThisLimit = </span><span style=" font-family:'Droid Sans Mono,monospace,monospace,Droid Sans Fallback'; font-size:14px; color:#0000ff;">function</span><span style=" font-family:'Droid Sans Mono,monospace,monospace,Droid Sans Fallback'; font-size:14px; color:#000000;">(limit) {</span></p>
<p class="vym-note-paragraph"><span style=" font-family:'Droid Sans Mono,monospace,monospace,Droid Sans Fallback'; font-size:14px; color:#000000;">  </span><span style=" font-family:'Droid Sans Mono,monospace,monospace,Droid Sans Fallback'; font-size:14px; color:#0000ff;">return</span><span style=" font-family:'Droid Sans Mono,monospace,monospace,Droid Sans Fallback'; font-size:14px; color:#000000;"> checkPastLimit.bind(</span><span style=" font-family:'Droid Sans Mono,monospace,monospace,Droid Sans Fallback'; font-size:14px; color:#0000ff;">this</span><span style=" font-family:'Droid Sans Mono,monospace,monospace,Droid Sans Fallback'; font-size:14px; color:#000000;">, limit) </span><span style=" font-family:'Droid Sans Mono,monospace,monospace,Droid Sans Fallback'; font-size:14px; color:#aaaaaa;">// this is how I did it</span></p>
<p class="vym-note-paragraph"><span style=" font-family:'Droid Sans Mono,monospace,monospace,Droid Sans Fallback'; font-size:14px; color:#000000;">}</span></p>
<p class="vym-note-paragraph"><span style=" font-family:'Droid Sans Mono,monospace,monospace,Droid Sans Fallback'; font-size:14px; color:#000000;"><br /></span></p>
<p class="vym-note-paragraph"><span style=" font-family:'Droid Sans Mono,monospace,monospace,Droid Sans Fallback'; font-size:14px; color:#aaaaaa;">//This is how he did it</span></p>
<p class="vym-note-paragraph"><span style=" font-family:'Droid Sans Mono,monospace,monospace,Droid Sans Fallback'; font-size:14px; color:#0000ff;">var</span><span style=" font-family:'Droid Sans Mono,monospace,monospace,Droid Sans Fallback'; font-size:14px; color:#000000;"> checkPastLimitSimplified = </span><span style=" font-family:'Droid Sans Mono,monospace,monospace,Droid Sans Fallback'; font-size:14px; color:#0000ff;">function</span><span style=" font-family:'Droid Sans Mono,monospace,monospace,Droid Sans Fallback'; font-size:14px; color:#000000;">(limit) {</span></p>
<p class="vym-note-paragraph"><span style=" font-family:'Droid Sans Mono,monospace,monospace,Droid Sans Fallback'; font-size:14px; color:#000000;">  </span><span style=" font-family:'Droid Sans Mono,monospace,monospace,Droid Sans Fallback'; font-size:14px; color:#0000ff;">return</span><span style=" font-family:'Droid Sans Mono,monospace,monospace,Droid Sans Fallback'; font-size:14px; color:#000000;"> </span><span style=" font-family:'Droid Sans Mono,monospace,monospace,Droid Sans Fallback'; font-size:14px; color:#0000ff;">function</span><span style=" font-family:'Droid Sans Mono,monospace,monospace,Droid Sans Fallback'; font-size:14px; color:#000000;">(limit, item) {</span></p>
<p class="vym-note-paragraph"><span style=" font-family:'Droid Sans Mono,monospace,monospace,Droid Sans Fallback'; font-size:14px; color:#000000;">    </span><span style=" font-family:'Droid Sans Mono,monospace,monospace,Droid Sans Fallback'; font-size:14px; color:#0000ff;">return</span><span style=" font-family:'Droid Sans Mono,monospace,monospace,Droid Sans Fallback'; font-size:14px; color:#000000;"> item &gt; limit</span></p>
<p class="vym-note-paragraph"><span style=" font-family:'Droid Sans Mono,monospace,monospace,Droid Sans Fallback'; font-size:14px; color:#000000;">  }.bind(</span><span style=" font-family:'Droid Sans Mono,monospace,monospace,Droid Sans Fallback'; font-size:14px; color:#0000ff;">this</span><span style=" font-family:'Droid Sans Mono,monospace,monospace,Droid Sans Fallback'; font-size:14px; color:#000000;">, limit)</span></p>
<p class="vym-note-paragraph"><span style=" font-family:'Droid Sans Mono,monospace,monospace,Droid Sans Fallback'; font-size:14px; color:#000000;">}</span></p>
<p class="vym-note-paragraph"><span style=" font-family:'Droid Sans Mono,monospace,monospace,Droid Sans Fallback'; font-size:14px; color:#000000;"><br /></span></p>
<p class="vym-note-paragraph"><span style=" font-family:'Droid Sans Mono,monospace,monospace,Droid Sans Fallback'; font-size:14px; color:#0000ff;">var</span><span style=" font-family:'Droid Sans Mono,monospace,monospace,Droid Sans Fallback'; font-size:14px; color:#000000;"> arr5 = checkForThisLimit(</span><span style=" font-family:'Droid Sans Mono,monospace,monospace,Droid Sans Fallback'; font-size:14px; color:#09885a;">1</span><span style=" font-family:'Droid Sans Mono,monospace,monospace,Droid Sans Fallback'; font-size:14px; color:#000000;">)</span></p>
<p class="vym-note-paragraph"><span style=" font-family:'Droid Sans Mono,monospace,monospace,Droid Sans Fallback'; font-size:14px; color:#0000ff;">var</span><span style=" font-family:'Droid Sans Mono,monospace,monospace,Droid Sans Fallback'; font-size:14px; color:#000000;"> arr6 = checkPastLimitSimplified(</span><span style=" font-family:'Droid Sans Mono,monospace,monospace,Droid Sans Fallback'; font-size:14px; color:#09885a;">1</span><span style=" font-family:'Droid Sans Mono,monospace,monospace,Droid Sans Fallback'; font-size:14px; color:#000000;">)</span></p>
<p class="vym-note-paragraph"><span style=" font-family:'Droid Sans Mono,monospace,monospace,Droid Sans Fallback'; font-size:14px; color:#000000;"><br /><br /></span></p>
<p class="vym-note-paragraph"><span style=" font-family:'Droid Sans Mono,monospace,monospace,Droid Sans Fallback'; font-size:14px; color:#000000;">console.log({arr1, arr2, arr3, arr4, arr5, arr6})</span></p>
<p class="vym-note-paragraph"> </p>
</td></tr></table>

        <ul class="vym-list-ul-4">
          <li><span class='vym-branch-4' style='color:#000000' id='mc:0,bo:3,bo:17,bo:3,bo:0'>Telling the parameter function to do the work to each item</span>  </li>
          <li><span class='vym-branch-4' style='color:#000000' id='mc:0,bo:3,bo:17,bo:3,bo:1'>Clean, easy to read, consie, REUSEABLE code</span>  </li>
        </ul>  </li>
        <li><span class='vym-branch-3' style='color:#000000' id='mc:0,bo:3,bo:17,bo:4'>In functional programming, don't mutated data.</span>
        <ul class="vym-list-ul-4">
          <li><span class='vym-branch-4' style='color:#000000' id='mc:0,bo:3,bo:17,bo:4,bo:0'>Return something new</span>  </li>
          <li><span class='vym-branch-4' style='color:#000000' id='mc:0,bo:3,bo:17,bo:4,bo:1'>Mutated the data early</span>  </li>
          <li><span class='vym-branch-4' style='color:#000000' id='mc:0,bo:3,bo:17,bo:4,bo:2'>It could become an entire course</span>  </li>
          <li><span class='vym-branch-4' style='color:#000000' id='mc:0,bo:3,bo:17,bo:4,bo:3'>This is what take JavaScript to the next level</span>  </li>
        </ul>  </li>
        <li><span class='vym-branch-3' style='color:#000000' id='mc:0,bo:3,bo:17,bo:5'>Part 2</span>
        <ul class="vym-list-ul-4">
          <li><span class='vym-branch-4' style='color:#000000' id='mc:0,bo:3,bo:17,bo:5,bo:0'><a href="http://underscorejs.org"><img src="flags/flag-url-16x16.png">underscore.js library</a></span>
          <ul class="vym-list-ul-5">
            <li><span class='vym-branch-5' style='color:#000000' id='mc:0,bo:3,bo:17,bo:5,bo:0,bo:0'></span>  </li>
          </ul>  </li>
          <li><span class='vym-branch-4' style='color:#000000' id='mc:0,bo:3,bo:17,bo:5,bo:1'>An Open Source Eduation</span>
          <ul class="vym-list-ul-5">
            <li><span class='vym-branch-5' style='color:#000000' id='mc:0,bo:3,bo:17,bo:5,bo:1,bo:0'>Read and Write good JavaScript</span>  </li>
            <li><span class='vym-branch-5' style='color:#000000' id='mc:0,bo:3,bo:17,bo:5,bo:1,bo:1'>You'll need to understand the foundation of JavaScript</span>  </li>
          </ul>  </li>
          <li><span class='vym-branch-4' style='color:#000000' id='mc:0,bo:3,bo:17,bo:5,bo:2'>underscore.js example</span>
<table class="vym-note"><tr><td class="vym-note-flag">
<td>
var arr6 = _.map([1, 2, 3], function(item) {return item * 3})<br/>console.log(arr6)<br/><br/>var arr7 = _.filter([2, 3, 4, 5, 6 ,7], function(item) { return item % 2 === 0<br/>})<br/>console.log(arr7)
</td></tr></table>
  </li>
        </ul>  </li>
      </ul>  </li>
    </ul>
  <h2><span class='vym-branch-1' style='color:#000000' id='mc:0,bo:4'>Object Oriented JavaScript and Prototypal Inhertiance</span></h2>
    <ul class="vym-list-ul-2">
      <li><span class='vym-branch-2' style='color:#000000' id='mc:0,bo:4,bo:0'>Conceptual Aside: Classical vs Proptoypal Inhertiance</span>
      <ul class="vym-list-ul-3">
        <li><span class='vym-branch-3' style='color:#000000' id='mc:0,bo:4,bo:0,bo:0'>BWA: Inhertiance: when an object gets access to antoher objects properties and
methods</span>  </li>
        <li><span class='vym-branch-3' style='color:#000000' id='mc:0,bo:4,bo:0,bo:1'>Classical</span>
        <ul class="vym-list-ul-4">
          <li><span class='vym-branch-4' style='color:#000000' id='mc:0,bo:4,bo:0,bo:1,bo:0'>Common structure in Java</span>  </li>
          <li><span class='vym-branch-4' style='color:#000000' id='mc:0,bo:4,bo:0,bo:1,bo:1'>Cons: verbose</span>  </li>
          <li><span class='vym-branch-4' style='color:#000000' id='mc:0,bo:4,bo:0,bo:1,bo:2'>Extedned vocabulary</span>  </li>
        </ul>  </li>
        <li><span class='vym-branch-3' style='color:#000000' id='mc:0,bo:4,bo:0,bo:2'>Prototypal</span>
        <ul class="vym-list-ul-4">
          <li><span class='vym-branch-4' style='color:#000000' id='mc:0,bo:4,bo:0,bo:2,bo:0'>Flexible, simple, easy to understand</span>  </li>
          <li><span class='vym-branch-4' style='color:#000000' id='mc:0,bo:4,bo:0,bo:2,bo:1'>Very different than other programming languages</span>  </li>
        </ul>  </li>
      </ul>  </li>
      <li><span class='vym-branch-2' style='color:#000000' id='mc:0,bo:4,bo:1'>Understanding the Prototype</span>
      <ul class="vym-list-ul-3">
        <li><span class='vym-branch-3' style='color:#000000' id='mc:0,bo:4,bo:1,bo:0'>All objects (including functions) has the prototype object</span>  </li>
        <li><span class='vym-branch-3' style='color:#000000' id='mc:0,bo:4,bo:1,bo:1'><a href="/home/juxley/Pictures/proto.png"><img src="flags/flag-url-16x16.png">Image</a></span>  </li>
        <li><span class='vym-branch-3' style='color:#000000' id='mc:0,bo:4,bo:1,bo:2'>It will look like prop2 within proto</span>  </li>
        <li><span class='vym-branch-3' style='color:#000000' id='mc:0,bo:4,bo:1,bo:3'>Each object can has it's own prototype</span>  </li>
        <li><span class='vym-branch-3' style='color:#000000' id='mc:0,bo:4,bo:1,bo:4'>obj.prop2 will go down the PROTOTYPE CHAIN</span>
        <ul class="vym-list-ul-4">
          <li><span class='vym-branch-4' style='color:#000000' id='mc:0,bo:4,bo:1,bo:4,bo:0'>The JS Engine will search for the property for us</span>  </li>
        </ul>  </li>
        <li><span class='vym-branch-3' style='color:#000000' id='mc:0,bo:4,bo:1,bo:5'>Code Example</span>
<table class="vym-note"><tr><td class="vym-note-flag">
<td>
var person {<br/>  first: "default",<br/>  last: "deafult"<br/>  getFullName: function(this.first + " " + this.last<br/>}<br/><br/>var john {<br/>  first: "John",<br/>  last: "Doe"<br/>}<br/><br/>//NEVER DO THIS EVER.  IT WILL SLOW DOWN YOUR STUFF<br/><br/>john.__proto__ = person //weird name so to not type it accidently<br/><br/>//john object now inherits person<br/><br/>console.log(john.getFullName)<br/>console.log(john.first) // outputs John because it doesn't need to go down the<br/>Prototype chain. It will stop when it finds what it is looking for<br/><br/>var jane {<br/>  first: "Jane"<br/>}<br/><br/>jane.__proto__ = person<br/>console.log(jane.getFullName
</td></tr></table>

        <ul class="vym-list-ul-4">
          <li><span class='vym-branch-4' style='color:#000000' id='mc:0,bo:4,bo:1,bo:5,bo:0'>NEVER DO THIS EVER.  IT WILL SLOW DOWN YOUR STUFF</span>  </li>
          <li><span class='vym-branch-4' style='color:#000000' id='mc:0,bo:4,bo:1,bo:5,bo:1'>this also knows the object that orginated the call</span>  </li>
        </ul>  </li>
      </ul>  </li>
      <li><span class='vym-branch-2' style='color:#000000' id='mc:0,bo:4,bo:2'>Everything is an Object (or a primative)</span>
      <ul class="vym-list-ul-3">
        <li><span class='vym-branch-3' style='color:#000000' id='mc:0,bo:4,bo:2,bo:0'>functions, arrays, etc. all have a prototype</span>  </li>
        <li><span class='vym-branch-3' style='color:#000000' id='mc:0,bo:4,bo:2,bo:1'>Execept the base object</span>
        <ul class="vym-list-ul-4">
          <li><span class='vym-branch-4' style='color:#000000' id='mc:0,bo:4,bo:2,bo:1,bo:0'>Everything eventually leads to the base Object</span>  </li>
        </ul>  </li>
        <li><span class='vym-branch-3' style='color:#000000' id='mc:0,bo:4,bo:2,bo:2'>Code</span>
<table class="vym-note"><tr><td class="vym-note-flag">
<td>
var a = {} // a.__proto__: Object {} // the base object<br/>var b = function() {} // b.__proto: function Empty()<br/>var c = [] //
</td></tr></table>
  </li>
        <li><span class='vym-branch-3' style='color:#000000' id='mc:0,bo:4,bo:2,bo:3'>All of the base prototypes have share methods with ALL of the other objects,
functions, and arrays</span>  </li>
        <li><span class='vym-branch-3' style='color:#000000' id='mc:0,bo:4,bo:2,bo:4'>The JavaScript engine has already set the proto of soething</span>  </li>
        <li><span class='vym-branch-3' style='color:#000000' id='mc:0,bo:4,bo:2,bo:5'>The prototype of the protype points to the base Object</span>  </li>
      </ul>  </li>
      <li><span class='vym-branch-2' style='color:#000000' id='mc:0,bo:4,bo:3'>Reflection and Extension</span>
      <ul class="vym-list-ul-3">
        <li><span class='vym-branch-3' style='color:#000000' id='mc:0,bo:4,bo:3,bo:0'>BWA: Reflection: An object can look at itself, listing and changing its
properties and methods</span>  </li>
        <li><span class='vym-branch-3' style='color:#000000' id='mc:0,bo:4,bo:3,bo:1'>Example</span>
<table class="vym-note"><tr><td class="vym-note-flag">
<td>
<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.0//EN" "http://www.w3.org/TR/REC-html40/strict.dtd">

<p class="vym-note-paragraph"><span style=" font-family:'DejaVu Sans Mono'; font-size:12pt; color:#000000;">var person {</span></p>
<p class="vym-note-paragraph"><span style=" font-family:'DejaVu Sans Mono'; font-size:12pt; color:#000000;">  first: &quot;default&quot;,</span></p>
<p class="vym-note-paragraph"><span style=" font-family:'DejaVu Sans Mono'; font-size:12pt; color:#000000;">  last: &quot;deafult&quot;</span></p>
<p class="vym-note-paragraph"><span style=" font-family:'DejaVu Sans Mono'; font-size:12pt; color:#000000;">  getFullName: function(this.first + &quot; &quot; + this.last</span></p>
<p class="vym-note-paragraph"><span style=" font-family:'DejaVu Sans Mono'; font-size:12pt; color:#000000;">}</span></p>
<p class="vym-note-paragraph"><br /></p>
<p class="vym-note-paragraph"><span style=" font-family:'DejaVu Sans Mono'; font-size:12pt; color:#000000;">var john {</span></p>
<p class="vym-note-paragraph"><span style=" font-family:'DejaVu Sans Mono'; font-size:12pt; color:#000000;">  first: &quot;John&quot;,</span></p>
<p class="vym-note-paragraph"><span style=" font-family:'DejaVu Sans Mono'; font-size:12pt; color:#000000;">  last: &quot;Doe&quot;</span></p>
<p class="vym-note-paragraph"><span style=" font-family:'DejaVu Sans Mono'; font-size:12pt; color:#000000;">}</span></p>
<p class="vym-note-paragraph"><br /></p>
<p class="vym-note-paragraph"><span style=" font-family:'DejaVu Sans Mono'; font-size:12pt; color:#000000;">//NEVER DO THIS EVER.  IT WILL SLOW DOWN YOUR STUFF</span></p>
<p class="vym-note-paragraph"><br /></p>
<p class="vym-note-paragraph"><span style=" font-family:'DejaVu Sans Mono'; font-size:12pt; color:#000000;">john.__proto__ = person //weird name so to not type it accidently</span></p>
<p class="vym-note-paragraph"><br /></p>
<p class="vym-note-paragraph"><span style=" font-family:'DejaVu Sans Mono'; font-size:12pt; color:#000000;">//This is an example of reflection as it lists an objects properties and methods</span></p>
<p class="vym-note-paragraph"><span style=" font-family:'DejaVu Sans Mono'; font-size:12pt; color:#000000;">for (var prop in john) {</span></p>
<p class="vym-note-paragraph"><span style=" font-family:'DejaVu Sans Mono'; font-size:12pt; color:#000000;">  if (john.hasOwnProperty(prop)) {</span></p>
<p class="vym-note-paragraph"><span style=" font-family:'DejaVu Sans Mono'; font-size:12pt; color:#000000;">  console.log(prop + &quot;: &quot; + john[prop])</span></p>
<p class="vym-note-paragraph"><span style=" font-family:'DejaVu Sans Mono'; font-size:12pt; color:#000000;">  }</span></p>
<p class="vym-note-paragraph"><span style=" font-family:'DejaVu Sans Mono'; font-size:12pt; color:#000000;">}</span></p>
<p class="vym-note-paragraph"><br /></p>
<p class="vym-note-paragraph"><span style=" font-family:'DejaVu Sans Mono'; font-size:12pt; color:#000000;">var jane = {</span></p>
<p class="vym-note-paragraph"><span style=" font-family:'DejaVu Sans Mono'; font-size:12pt; color:#000000;">  getFormalName: //function...<br />}</span></p>
<p class="vym-note-paragraph"><br /></p>
<p class="vym-note-paragraph"><span style=" font-family:'DejaVu Sans Mono'; font-size:12pt; color:#000000;">var mike = {</span></p>
<p class="vym-note-paragraph"><span style=" font-family:'DejaVu Sans Mono'; font-size:12pt; color:#000000;">  getFirst: //function...</span></p>
<p class="vym-note-paragraph"><span style=" font-family:'DejaVu Sans Mono'; font-size:12pt; color:#000000;">}</span></p>
<p class="vym-note-paragraph"><br /></p>
<p class="vym-note-paragraph"><span style=" font-family:'DejaVu Sans Mono'; font-size:12pt; color:#000000;">var </span></p>
<p class="vym-note-paragraph"><span style=" font-family:'DejaVu Sans Mono'; font-size:12pt; color:#000000;">//using underscore.js</span></p>
<p class="vym-note-paragraph"><span style=" font-family:'DejaVu Sans Mono'; font-size:12pt; color:#000000;">_.extend(john, jane, mike)</span></p>
<p class="vym-note-paragraph"><br /></p>
<p class="vym-note-paragraph"><span style=" font-family:'DejaVu Sans Mono'; font-size:12pt; color:#000000;">//now john will have the same properties and methods as jane and mike without extending the prototype chain</span></p>
<p class="vym-note-paragraph"><br /></p>
</td></tr></table>

        <ul class="vym-list-ul-4">
          <li><span class='vym-branch-4' style='color:#000000' id='mc:0,bo:4,bo:3,bo:1,bo:0'>This is an example of reflection as it lists an objects properties and methods</span>  </li>
        </ul>  </li>
        <li><span class='vym-branch-3' style='color:#000000' id='mc:0,bo:4,bo:3,bo:2'>Extend</span>
<table class="vym-note"><tr><td class="vym-note-flag">
<td>
_
</td></tr></table>

        <ul class="vym-list-ul-4">
          <li><span class='vym-branch-4' style='color:#000000' id='mc:0,bo:4,bo:3,bo:2,bo:0'>Compliment to JS prototype</span>
          <ul class="vym-list-ul-5">
            <li><span class='vym-branch-5' style='color:#000000' id='mc:0,bo:4,bo:3,bo:2,bo:0,bo:0'></span>  </li>
          </ul>  </li>
          <li><span class='vym-branch-4' style='color:#000000' id='mc:0,bo:4,bo:3,bo:2,bo:1'>underscore.js creates one</span>  </li>
        </ul>  </li>
      </ul>  </li>
    </ul>
  <h2><span class='vym-branch-1' style='color:#000000' id='mc:0,bo:5'>Building Objects</span></h2>
    <ul class="vym-list-ul-2">
      <li><span class='vym-branch-2' style='color:#000000' id='mc:0,bo:5,bo:0'>Function Constructors, 'new', and the History of JavaScript</span>
      <ul class="vym-list-ul-3">
        <li><span class='vym-branch-3' style='color:#000000' id='mc:0,bo:5,bo:0,bo:0'>History</span>
        <ul class="vym-list-ul-4">
          <li><span class='vym-branch-4' style='color:#000000' id='mc:0,bo:5,bo:0,bo:0,bo:0'>Programming war!!!</span>  </li>
          <li><span class='vym-branch-4' style='color:#000000' id='mc:0,bo:5,bo:0,bo:0,bo:1'>Call JavaScript; to attract Java developers (marketing!)</span>  </li>
          <li><span class='vym-branch-4' style='color:#000000' id='mc:0,bo:5,bo:0,bo:0,bo:2'>var john = new Person()</span>
          <ul class="vym-list-ul-5">
            <li><span class='vym-branch-5' style='color:#000000' id='mc:0,bo:5,bo:0,bo:0,bo:2,bo:0'>Looks a bit like Java</span>  </li>
          </ul>  </li>
        </ul>  </li>
        <li><span class='vym-branch-3' style='color:#000000' id='mc:0,bo:5,bo:0,bo:1'>Example Code</span>
<table class="vym-note"><tr><td class="vym-note-flag">
<td>
function Person(firstname, lastname) {<br/>this. firstname = firstname<br/>this.lastname = lastname <br/>console.log("this function is invoked")<br/><br/>//return console.log("I got in the way")<br/>}<br/>var john = new Person("John", "Doe")<br/>console.log(john)<br/><br/>var jason = new Person("Jason", "Ribble") // invoked and set in a different<br/>place in language
</td></tr></table>
  </li>
        <li><span class='vym-branch-3' style='color:#000000' id='mc:0,bo:5,bo:0,bo:2'>Learning the proper way to build objects to assign properites, methods, and
settting the prototypes</span>  </li>
        <li><span class='vym-branch-3' style='color:#000000' id='mc:0,bo:5,bo:0,bo:3'>new is an opperator</span>
        <ul class="vym-list-ul-4">
          <li><span class='vym-branch-4' style='color:#000000' id='mc:0,bo:5,bo:0,bo:3,bo:0'>immediatedly an empty object is created</span>  </li>
          <li><span class='vym-branch-4' style='color:#000000' id='mc:0,bo:5,bo:0,bo:3,bo:1'>Then it calls the Person() function</span>
          <ul class="vym-list-ul-5">
            <li><span class='vym-branch-5' style='color:#000000' id='mc:0,bo:5,bo:0,bo:3,bo:1,bo:0'>Execution conext is made, and &quot;this&quot; is created</span>  </li>
            <li><span class='vym-branch-5' style='color:#000000' id='mc:0,bo:5,bo:0,bo:3,bo:1,bo:1'>The &quot;This&quot; points to the empty object that new created</span>  </li>
          </ul>  </li>
          <li><span class='vym-branch-4' style='color:#000000' id='mc:0,bo:5,bo:0,bo:3,bo:2'>Having a function create an object</span>  </li>
        </ul>  </li>
        <li><span class='vym-branch-3' style='color:#000000' id='mc:0,bo:5,bo:0,bo:4'>Function Constructors = function</span>
        <ul class="vym-list-ul-4">
          <li><span class='vym-branch-4' style='color:#000000' id='mc:0,bo:5,bo:0,bo:4,bo:0'>A normal function, used to create objecs</span>  </li>
          <li><span class='vym-branch-4' style='color:#000000' id='mc:0,bo:5,bo:0,bo:4,bo:1'>The &quot;this&quot; variable points to an new empty object, and the object is return from
the function automatically</span>  </li>
        </ul>  </li>
      </ul>  </li>
      <li><span class='vym-branch-2' style='color:#000000' id='mc:0,bo:5,bo:1'>Function Constructors and .prototype</span>
      <ul class="vym-list-ul-3">
        <li><span class='vym-branch-3' style='color:#000000' id='mc:0,bo:5,bo:1,bo:0'><a href="/home/juxley/Picture/funcproto.png"><img src="flags/flag-url-16x16.png">Image</a></span>  </li>
        <li><span class='vym-branch-3' style='color:#000000' id='mc:0,bo:5,bo:1,bo:1'>When function constructors are called with new, it creates an empty object</span>  </li>
        <li><span class='vym-branch-3' style='color:#000000' id='mc:0,bo:5,bo:1,bo:2'>The .prototype points to this object</span>  </li>
        <li><span class='vym-branch-3' style='color:#000000' id='mc:0,bo:5,bo:1,bo:3'>It has properties and methods; and it has</span>  </li>
        <li><span class='vym-branch-3' style='color:#000000' id='mc:0,bo:5,bo:1,bo:4'>Why add it to the prototype and not the function constructor?</span>
        <ul class="vym-list-ul-4">
          <li><span class='vym-branch-4' style='color:#000000' id='mc:0,bo:5,bo:1,bo:4,bo:0'>The method sits in the prototype in memory only one time</span>  </li>
          <li><span class='vym-branch-4' style='color:#000000' id='mc:0,bo:5,bo:1,bo:4,bo:1'>The object can be created many times and point to the one method</span>  </li>
        </ul>  </li>
        <li><span class='vym-branch-3' style='color:#000000' id='mc:0,bo:5,bo:1,bo:5'>Example</span>
<table class="vym-note"><tr><td class="vym-note-flag">
<td>
<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.0//EN" "http://www.w3.org/TR/REC-html40/strict.dtd">

<p class="vym-note-paragraph"><span style=" color:#000000;">function Person(first, last) {</span></p>
<p class="vym-note-paragraph"><span style=" color:#000000;">          this.first = first</span></p>
<p class="vym-note-paragraph"><span style=" color:#000000;">          this.last = last</span></p>
<p class="vym-note-paragraph"><span style=" color:#000000;">          console.log(&quot;Invoked&quot;)</span></p>
<p class="vym-note-paragraph"><span style=" color:#000000;">}</span></p>
<p class="vym-note-paragraph"><br /></p>
<p class="vym-note-paragraph"><span style=" color:#000000;">Person.prototype.getFullName = function() {</span></p>
<p class="vym-note-paragraph"><span style=" color:#000000;">          return this.first + &quot; &quot; + this.last</span></p>
<p class="vym-note-paragraph"><span style=" color:#000000;">}</span></p>
<p class="vym-note-paragraph"><br /></p>
<p class="vym-note-paragraph"><span style=" color:#000000;">let jason = new Person(&quot;Jason&quot;, &quot;Ribble&quot;)</span></p>
<p class="vym-note-paragraph"><span style=" color:#000000;">let mike = new Person(&quot;Mike&quot;, &quot;Row&quot;)</span></p>
<p class="vym-note-paragraph"><br /></p>
<p class="vym-note-paragraph"><span style=" color:#000000;">console.log(jason.getFullName())</span></p>
<p class="vym-note-paragraph"><span style=" color:#000000;">console.log(mike.getFullName())</span></p>
</td></tr></table>

        <ul class="vym-list-ul-4">
          <li><span class='vym-branch-4' style='color:#000000' id='mc:0,bo:5,bo:1,bo:5,bo:0'>One of the valid ways of setting the prototype in JavaScript</span>  </li>
        </ul>  </li>
      </ul>  </li>
      <li><span class='vym-branch-2' style='color:#000000' id='mc:0,bo:5,bo:2'>Dangerous Aside: new and function constructors</span>
      <ul class="vym-list-ul-3">
        <li><span class='vym-branch-3' style='color:#000000' id='mc:0,bo:5,bo:2,bo:0'>if you don't have the &quot;new&quot; keyword, then the object will be undefinied since
the function doesn't return anything</span>  </li>
        <li><span class='vym-branch-3' style='color:#000000' id='mc:0,bo:5,bo:2,bo:1'>Coding Convention: Functoin Constructors have capital letters</span>  </li>
        <li><span class='vym-branch-3' style='color:#000000' id='mc:0,bo:5,bo:2,bo:2'>there are going to be making a new way for function constructor?</span>  </li>
      </ul>  </li>
      <li><span class='vym-branch-2' style='color:#000000' id='mc:0,bo:5,bo:3'>Conceptual Aside: Built In Function Constructors</span>
      <ul class="vym-list-ul-3">
        <li><span class='vym-branch-3' style='color:#000000' id='mc:0,bo:5,bo:3,bo:0'>var a = new Number(&quot;3&quot;) // Numbe {[Primiative Value], 3}</span>  </li>
        <li><span class='vym-branch-3' style='color:#000000' id='mc:0,bo:5,bo:3,bo:1'>var b = new String(&quot;Jason&quot;)</span>
        <ul class="vym-list-ul-4">
          <li><span class='vym-branch-4' style='color:#000000' id='mc:0,bo:5,bo:3,bo:1,bo:0'>b.indexOf(&quot;o&quot;)</span>  </li>
          <li><span class='vym-branch-4' style='color:#000000' id='mc:0,bo:5,bo:3,bo:1,bo:1'>String.prototype.indexOf(&quot;o&quot;)</span>  </li>
        </ul>  </li>
        <li><span class='vym-branch-3' style='color:#000000' id='mc:0,bo:5,bo:3,bo:2'>You are not creating primiative, you are creating objects</span>  </li>
        <li><span class='vym-branch-3' style='color:#000000' id='mc:0,bo:5,bo:3,bo:3'>&quot;Jason&quot;.length</span>
        <ul class="vym-list-ul-4">
          <li><span class='vym-branch-4' style='color:#000000' id='mc:0,bo:5,bo:3,bo:3,bo:0'>It will &quot;box&quot; the string in an object for you, so you can use properties and
methods of the prototype'</span>  </li>
        </ul>  </li>
        <li><span class='vym-branch-3' style='color:#000000' id='mc:0,bo:5,bo:3,bo:4'>var d = new Date(&quot;3/1/15&quot;)</span>  </li>
        <li><span class='vym-branch-3' style='color:#000000' id='mc:0,bo:5,bo:3,bo:5'>We can tac on features onto Strings, Numbers, Dates</span>  </li>
        <li><span class='vym-branch-3' style='color:#000000' id='mc:0,bo:5,bo:3,bo:6'>By understanding this, we can extend the language</span>  </li>
        <li><span class='vym-branch-3' style='color:#000000' id='mc:0,bo:5,bo:3,bo:7'>Warning! make sure that you don't overwrite pre-existing methods or prototypes</span>  </li>
        <li><span class='vym-branch-3' style='color:#000000' id='mc:0,bo:5,bo:3,bo:8'>Strings and Array do get boxing, while Numbers do not</span>  </li>
        <li><span class='vym-branch-3' style='color:#000000' id='mc:0,bo:5,bo:3,bo:9'>new Number !== a primative number</span>  </li>
      </ul>  </li>
      <li><span class='vym-branch-2' style='color:#000000' id='mc:0,bo:5,bo:4'>Dangerous Aside: Build In Function Constructor</span>
      <ul class="vym-list-ul-3">
        <li><span class='vym-branch-3' style='color:#000000' id='mc:0,bo:5,bo:4,bo:0'>Example code</span>
<table class="vym-note"><tr><td class="vym-note-flag">
<td>
var a = 3<br/>var b = new Number(3)<br/>a == b //true<br/>a === b //false<br/><br/>//proper way to use this<br/>var c = Number("3") // to have the string go to a number
</td></tr></table>
  </li>
        <li><span class='vym-branch-3' style='color:#000000' id='mc:0,bo:5,bo:4,bo:1'>Function Constructors are not pritatives</span>  </li>
        <li><span class='vym-branch-3' style='color:#000000' id='mc:0,bo:5,bo:4,bo:2'>To avoid this, use literals</span>  </li>
        <li><span class='vym-branch-3' style='color:#000000' id='mc:0,bo:5,bo:4,bo:3'>If you do use them, understand what is goin gon</span>  </li>
        <li><span class='vym-branch-3' style='color:#000000' id='mc:0,bo:5,bo:4,bo:4'>If you using the Date, use moment.js</span>  </li>
        <li><span class='vym-branch-3' style='color:#000000' id='mc:0,bo:5,bo:4,bo:5'>It's dangerous to use function constructor for primatives</span>  </li>
        <li><span class='vym-branch-3' style='color:#000000' id='mc:0,bo:5,bo:4,bo:6'>You can also use this a function, not a constructor</span>  </li>
      </ul>  </li>
      <li><span class='vym-branch-2' style='color:#000000' id='mc:0,bo:5,bo:5'>Dangerous Aside: Arrays and for.in</span>
      <ul class="vym-list-ul-3">
        <li><span class='vym-branch-3' style='color:#000000' id='mc:0,bo:5,bo:5,bo:0'>Arrays are objects!</span>  </li>
        <li><span class='vym-branch-3' style='color:#000000' id='mc:0,bo:5,bo:5,bo:1'>Code</span>
<table class="vym-note"><tr><td class="vym-note-flag">
<td>
<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.0//EN" "http://www.w3.org/TR/REC-html40/strict.dtd">

<p class="vym-note-paragraph"><span style=" color:#000000;">let arr = [1, 2, 3[</span></p>
<p class="vym-note-paragraph"><span style=" color:#000000;">for (let prop in arr) {</span></p>
<p class="vym-note-paragraph"><span style=" color:#000000;">   console.log(prop + &quot; &quot; + arr[prop])h</span></p>
<p class="vym-note-paragraph"><span style=" color:#000000;">}</span></p>
</td></tr></table>
  </li>
        <li><span class='vym-branch-3' style='color:#000000' id='mc:0,bo:5,bo:5,bo:2'>If someone extends the Array.prototype with additional features, and we attempt
to use for..in then we will see the Array.protype since it goes down the
prototype chain</span>  </li>
      </ul>  </li>
    </ul>
  

<map name='imagemap'>
  <area shape='rect' coords='2369.84,6441.88,2631.34,6478.88' href='#mc:0'>
  <area shape='rect' coords='2741.04,4919.26,2860.69,4953.26' href='#mc:0,bo:0'>
  <area shape='rect' coords='2881.69,4826.26,3095.96,4856.26' href='#mc:0,bo:0,bo:0'>
  <area shape='rect' coords='3116.96,4828.26,3189.35,4854.26' href='#mc:0,bo:0,bo:0,bo:0'>
  <area shape='rect' coords='2881.69,4897.26,2982.29,4927.26' href='#mc:0,bo:0,bo:1'>
  <area shape='rect' coords='3003.29,4858.26,3219.13,4910.26' href='#mc:0,bo:0,bo:1,bo:0'>
  <area shape='rect' coords='3003.29,4912.26,3060.61,4938.26' href='#mc:0,bo:0,bo:1,bo:1'>
  <area shape='rect' coords='3003.29,4940.26,3052.11,4966.26' href='#mc:0,bo:0,bo:1,bo:2'>
  <area shape='rect' coords='2881.69,4992.26,2976.68,5022.26' href='#mc:0,bo:0,bo:2'>
  <area shape='rect' coords='2997.68,4968.26,3253,5046.26' href='#mc:0,bo:0,bo:2,bo:0'>
  <area shape='rect' coords='2805.37,6687.49,3186.67,6721.49' href='#mc:0,bo:1'>
  <area shape='rect' coords='3207.67,5344.49,3297.11,5374.49' href='#mc:0,bo:1,bo:0'>
  <area shape='rect' coords='3318.11,5156.49,3435.53,5182.49' href='#mc:0,bo:1,bo:0,bo:0'>
  <area shape='rect' coords='3456.53,5087.49,3614.08,5113.49' href='#mc:0,bo:1,bo:0,bo:0,bo:0'>
  <area shape='rect' coords='3456.53,5142.49,3581.81,5168.49' href='#mc:0,bo:1,bo:0,bo:0,bo:1'>
  <area shape='rect' coords='3602.81,5115.49,3802.62,5141.49' href='#mc:0,bo:1,bo:0,bo:0,bo:1,bo:0'>
  <area shape='rect' coords='3602.81,5143.49,3853.08,5195.49' href='#mc:0,bo:1,bo:0,bo:0,bo:1,bo:1'>
  <area shape='rect' coords='3456.53,5197.49,3684.7,5223.49' href='#mc:0,bo:1,bo:0,bo:0,bo:2'>
  <area shape='rect' coords='3456.53,5225.49,3628.2,5251.49' href='#mc:0,bo:1,bo:0,bo:0,bo:3'>
  <area shape='rect' coords='3318.11,5307.49,3436.48,5333.49' href='#mc:0,bo:1,bo:0,bo:1'>
  <area shape='rect' coords='3457.48,5253.49,3716.23,5305.49' href='#mc:0,bo:1,bo:0,bo:1,bo:0'>
  <area shape='rect' coords='3457.48,5307.49,3691.78,5359.49' href='#mc:0,bo:1,bo:0,bo:1,bo:1'>
  <area shape='rect' coords='3457.48,5361.49,3671.93,5387.49' href='#mc:0,bo:1,bo:0,bo:1,bo:2'>
  <area shape='rect' coords='3318.11,5443.49,3441.01,5469.49' href='#mc:0,bo:1,bo:0,bo:2'>
  <area shape='rect' coords='3462.01,5389.49,3725.53,5441.49' href='#mc:0,bo:1,bo:0,bo:2,bo:0'>
  <area shape='rect' coords='3462.01,5443.49,3720.25,5469.49' href='#mc:0,bo:1,bo:0,bo:2,bo:1'>
  <area shape='rect' coords='3462.01,5471.49,3714.87,5523.49' href='#mc:0,bo:1,bo:0,bo:2,bo:2'>
  <area shape='rect' coords='3318.11,5565.49,3410.5,5591.49' href='#mc:0,bo:1,bo:0,bo:3'>
  <area shape='rect' coords='3431.5,5525.49,3702.95,5603.49' href='#mc:0,bo:1,bo:0,bo:3,bo:0'>
  <area shape='rect' coords='3431.5,5605.49,3609.15,5631.49' href='#mc:0,bo:1,bo:0,bo:3,bo:1'>
  <area shape='rect' coords='3207.67,5825.49,3493.43,5855.49' href='#mc:0,bo:1,bo:1'>
  <area shape='rect' coords='3514.43,5634.49,3773.14,5686.49' href='#mc:0,bo:1,bo:1,bo:0'>
  <area shape='rect' coords='3794.14,5633.49,3824.42,5659.49' href='#mc:0,bo:1,bo:1,bo:0,bo:0'>
  <area shape='rect' coords='3794.14,5661.49,3882.22,5687.49' href='#mc:0,bo:1,bo:1,bo:0,bo:1'>
  <area shape='rect' coords='3514.43,5758.49,3649.81,5784.49' href='#mc:0,bo:1,bo:1,bo:1'>
  <area shape='rect' coords='3670.81,5689.49,3701.09,5715.49' href='#mc:0,bo:1,bo:1,bo:1,bo:0'>
  <area shape='rect' coords='3670.81,5717.49,3727.34,5743.49' href='#mc:0,bo:1,bo:1,bo:1,bo:1'>
  <area shape='rect' coords='3670.81,5745.49,3889.12,5797.49' href='#mc:0,bo:1,bo:1,bo:1,bo:2'>
  <area shape='rect' coords='3910.12,5758.49,4118.73,5784.49' href='#mc:0,bo:1,bo:1,bo:1,bo:2,bo:0'>
  <area shape='rect' coords='3670.81,5799.49,3822.97,5825.49' href='#mc:0,bo:1,bo:1,bo:1,bo:3'>
  <area shape='rect' coords='3670.81,5827.49,3867.33,5853.49' href='#mc:0,bo:1,bo:1,bo:1,bo:4'>
  <area shape='rect' coords='3514.43,5882.49,3695.33,5908.49' href='#mc:0,bo:1,bo:1,bo:2'>
  <area shape='rect' coords='3716.33,5855.49,3948.23,5907.49' href='#mc:0,bo:1,bo:1,bo:2,bo:0'>
  <area shape='rect' coords='3716.33,5909.49,3803.83,5935.49' href='#mc:0,bo:1,bo:1,bo:2,bo:1'>
  <area shape='rect' coords='3514.43,5979.49,3566.08,6005.49' href='#mc:0,bo:1,bo:1,bo:3'>
  <area shape='rect' coords='3587.08,5979.49,3698.25,6005.49' href='#mc:0,bo:1,bo:1,bo:3,bo:0'>
  <area shape='rect' coords='3719.25,5937.49,3809.61,5963.49' href='#mc:0,bo:1,bo:1,bo:3,bo:0,bo:0'>
  <area shape='rect' coords='3719.25,5965.49,3749.53,5991.49' href='#mc:0,bo:1,bo:1,bo:3,bo:0,bo:1'>
  <area shape='rect' coords='3719.25,5993.49,3775.78,6019.49' href='#mc:0,bo:1,bo:1,bo:3,bo:0,bo:2'>
  <area shape='rect' coords='3719.25,6021.49,3788.31,6047.49' href='#mc:0,bo:1,bo:1,bo:3,bo:0,bo:3'>
  <area shape='rect' coords='3207.67,6198.49,3466.9,6258.49' href='#mc:0,bo:1,bo:2'>
  <area shape='rect' coords='3487.9,6049.49,3547,6075.49' href='#mc:0,bo:1,bo:2,bo:0'>
  <area shape='rect' coords='3487.9,6077.49,3780.43,6103.49' href='#mc:0,bo:1,bo:2,bo:1'>
  <area shape='rect' coords='3801.43,6077.49,4023.5,6103.49' href='#mc:0,bo:1,bo:2,bo:1,bo:0'>
  <area shape='rect' coords='3487.9,6160.49,3606.54,6186.49' href='#mc:0,bo:1,bo:2,bo:2'>
  <area shape='rect' coords='3627.54,6105.49,3717.9,6131.49' href='#mc:0,bo:1,bo:2,bo:2,bo:0'>
  <area shape='rect' coords='3627.54,6133.49,3657.83,6159.49' href='#mc:0,bo:1,bo:2,bo:2,bo:1'>
  <area shape='rect' coords='3627.54,6161.49,3730.08,6187.49' href='#mc:0,bo:1,bo:2,bo:2,bo:2'>
  <area shape='rect' coords='3627.54,6189.49,3872.36,6241.49' href='#mc:0,bo:1,bo:2,bo:2,bo:3'>
  <area shape='rect' coords='3893.36,6189.49,4147.37,6241.49' href='#mc:0,bo:1,bo:2,bo:2,bo:3,bo:0'>
  <area shape='rect' coords='3509.9,6285.49,3604.81,6311.49' href='#mc:0,bo:1,bo:2,bo:3'>
  <area shape='rect' coords='3625.81,6243.49,3821.62,6269.49' href='#mc:0,bo:1,bo:2,bo:3,bo:0'>
  <area shape='rect' coords='3625.81,6271.49,3870.75,6297.49' href='#mc:0,bo:1,bo:2,bo:3,bo:1'>
  <area shape='rect' coords='3625.81,6299.49,3796.39,6325.49' href='#mc:0,bo:1,bo:2,bo:3,bo:2'>
  <area shape='rect' coords='3625.81,6327.49,3768.22,6353.49' href='#mc:0,bo:1,bo:2,bo:3,bo:3'>
  <area shape='rect' coords='3487.9,6355.49,3713.04,6407.49' href='#mc:0,bo:1,bo:2,bo:4'>
  <area shape='rect' coords='3207.67,6421.49,3427.14,6451.49' href='#mc:0,bo:1,bo:3'>
  <area shape='rect' coords='3448.14,6409.49,3619.23,6435.49' href='#mc:0,bo:1,bo:3,bo:0'>
  <area shape='rect' coords='3448.14,6437.49,3670.36,6463.49' href='#mc:0,bo:1,bo:3,bo:1'>
  <area shape='rect' coords='3207.67,6557.49,3460.15,6617.49' href='#mc:0,bo:1,bo:4'>
  <area shape='rect' coords='3481.15,6465.49,3670.79,6491.49' href='#mc:0,bo:1,bo:4,bo:0'>
  <area shape='rect' coords='3503.15,6533.49,3598.06,6559.49' href='#mc:0,bo:1,bo:4,bo:1'>
  <area shape='rect' coords='3619.06,6493.49,3865.72,6571.49' href='#mc:0,bo:1,bo:4,bo:1,bo:0'>
  <area shape='rect' coords='3619.06,6573.49,3841.31,6599.49' href='#mc:0,bo:1,bo:4,bo:1,bo:1'>
  <area shape='rect' coords='3481.15,6601.49,3697.93,6653.49' href='#mc:0,bo:1,bo:4,bo:2'>
  <area shape='rect' coords='3481.15,6669.49,3623.67,6695.49' href='#mc:0,bo:1,bo:4,bo:3'>
  <area shape='rect' coords='3644.67,6655.49,3777.12,6681.49' href='#mc:0,bo:1,bo:4,bo:3,bo:0'>
  <area shape='rect' coords='3644.67,6683.49,3866.15,6709.49' href='#mc:0,bo:1,bo:4,bo:3,bo:1'>
  <area shape='rect' coords='3207.67,6762.49,3480.22,6822.49' href='#mc:0,bo:1,bo:5'>
  <area shape='rect' coords='3501.22,6725.49,3760.78,6777.49' href='#mc:0,bo:1,bo:5,bo:0'>
  <area shape='rect' coords='3781.78,6711.49,3937.59,6737.49' href='#mc:0,bo:1,bo:5,bo:0,bo:0'>
  <area shape='rect' coords='3781.78,6739.49,4029.75,6791.49' href='#mc:0,bo:1,bo:5,bo:0,bo:1'>
  <area shape='rect' coords='3501.22,6820.49,3699.62,6846.49' href='#mc:0,bo:1,bo:5,bo:1'>
  <area shape='rect' coords='3720.62,6793.49,3811,6819.49' href='#mc:0,bo:1,bo:5,bo:1,bo:0'>
  <area shape='rect' coords='3720.62,6821.49,3964.86,6873.49' href='#mc:0,bo:1,bo:5,bo:1,bo:1'>
  <area shape='rect' coords='3207.67,7037.49,3518.36,7067.49' href='#mc:0,bo:1,bo:6'>
  <area shape='rect' coords='3539.36,6875.49,3760.56,6901.49' href='#mc:0,bo:1,bo:6,bo:0'>
  <area shape='rect' coords='3561.36,6903.49,3656.26,6929.49' href='#mc:0,bo:1,bo:6,bo:1'>
  <area shape='rect' coords='3539.36,7040.49,3561.36,7062.49' href='file:///home/juxley/Pictures/executionstack.png'>
  <area shape='rect' coords='3561.36,7040.49,3664.47,7066.49' href='#mc:0,bo:1,bo:6,bo:2'>
  <area shape='rect' coords='3685.47,6945.49,3883.25,6971.49' href='#mc:0,bo:1,bo:6,bo:2,bo:0'>
  <area shape='rect' coords='3904.25,6931.49,3950.34,6957.49' href='#mc:0,bo:1,bo:6,bo:2,bo:0,bo:0'>
  <area shape='rect' coords='3904.25,6959.49,3971.7,6985.49' href='#mc:0,bo:1,bo:6,bo:2,bo:0,bo:1'>
  <area shape='rect' coords='3685.47,7028.49,3861.17,7054.49' href='#mc:0,bo:1,bo:6,bo:2,bo:1'>
  <area shape='rect' coords='3882.17,7014.49,3941.34,7040.49' href='#mc:0,bo:1,bo:6,bo:2,bo:1,bo:0'>
  <area shape='rect' coords='3962.34,6987.49,4134.95,7013.49' href='#mc:0,bo:1,bo:6,bo:2,bo:1,bo:0,bo:0'>
  <area shape='rect' coords='3962.34,7015.49,4210.56,7067.49' href='#mc:0,bo:1,bo:6,bo:2,bo:1,bo:0,bo:1'>
  <area shape='rect' coords='3882.17,7069.49,3943.95,7095.49' href='#mc:0,bo:1,bo:6,bo:2,bo:1,bo:1'>
  <area shape='rect' coords='3685.47,7097.49,3932.56,7175.49' href='#mc:0,bo:1,bo:6,bo:2,bo:2'>
  <area shape='rect' coords='3539.36,7177.49,3748.9,7229.49' href='#mc:0,bo:1,bo:6,bo:3'>
  <area shape='rect' coords='3769.9,7177.49,3977.73,7229.49' href='#mc:0,bo:1,bo:6,bo:3,bo:0'>
  <area shape='rect' coords='3207.67,7284.49,3523.61,7314.49' href='#mc:0,bo:1,bo:7'>
  <area shape='rect' coords='3544.61,7286.49,3676.17,7312.49' href='#mc:0,bo:1,bo:7,bo:0'>
  <area shape='rect' coords='3697.17,7231.49,3949.9,7257.49' href='#mc:0,bo:1,bo:7,bo:0,bo:0'>
  <area shape='rect' coords='3697.17,7259.49,3839.06,7285.49' href='#mc:0,bo:1,bo:7,bo:0,bo:1'>
  <area shape='rect' coords='3697.17,7287.49,3933.15,7339.49' href='#mc:0,bo:1,bo:7,bo:0,bo:2'>
  <area shape='rect' coords='3719.17,7341.49,3814.08,7367.49' href='#mc:0,bo:1,bo:7,bo:0,bo:3'>
  <area shape='rect' coords='3835.08,7341.49,4075.64,7367.49' href='#mc:0,bo:1,bo:7,bo:0,bo:3,bo:0'>
  <area shape='rect' coords='3207.67,7530.49,3339.75,7560.49' href='#mc:0,bo:1,bo:8'>
  <area shape='rect' coords='3382.75,7369.49,3488.45,7395.49' href='#mc:0,bo:1,bo:8,bo:0'>
  <area shape='rect' coords='3360.75,7425.49,3382.75,7447.49' href='file:///home/juxley/Pictures/scopechain1.png'>
  <area shape='rect' coords='3382.75,7425.49,3617.84,7503.49' href='#mc:0,bo:1,bo:8,bo:1'>
  <area shape='rect' coords='3638.84,7397.49,3721.01,7423.49' href='#mc:0,bo:1,bo:8,bo:1,bo:0'>
  <area shape='rect' coords='3638.84,7425.49,3878.61,7477.49' href='#mc:0,bo:1,bo:8,bo:1,bo:1'>
  <area shape='rect' coords='3638.84,7492.49,3885.42,7518.49' href='#mc:0,bo:1,bo:8,bo:1,bo:2'>
  <area shape='rect' coords='3906.42,7492.49,4029.33,7518.49' href='#mc:0,bo:1,bo:8,bo:1,bo:2,bo:0'>
  <area shape='rect' coords='4050.33,7479.49,4288.29,7531.49' href='#mc:0,bo:1,bo:8,bo:1,bo:2,bo:0,bo:0'>
  <area shape='rect' coords='3360.75,7533.49,3605.34,7585.49' href='#mc:0,bo:1,bo:8,bo:2'>
  <area shape='rect' coords='3360.75,7587.49,3599.06,7639.49' href='#mc:0,bo:1,bo:8,bo:3'>
  <area shape='rect' coords='3360.75,7641.49,3485.37,7667.49' href='#mc:0,bo:1,bo:8,bo:4'>
  <area shape='rect' coords='3528.37,7641.49,3634.08,7667.49' href='#mc:0,bo:1,bo:8,bo:4,bo:0'>
  <area shape='rect' coords='3360.75,7669.49,3548.26,7721.49' href='#mc:0,bo:1,bo:8,bo:5'>
  <area shape='rect' coords='3207.67,7802.49,3323.25,7832.49' href='#mc:0,bo:1,bo:9'>
  <area shape='rect' coords='3344.25,7736.49,3582.7,7762.49' href='#mc:0,bo:1,bo:9,bo:0'>
  <area shape='rect' coords='3603.7,7723.49,3838.54,7775.49' href='#mc:0,bo:1,bo:9,bo:0,bo:0'>
  <area shape='rect' coords='3859.54,7736.49,3874.29,7762.49' href='#mc:0,bo:1,bo:9,bo:0,bo:0,bo:0'>
  <area shape='rect' coords='3344.25,7831.49,3474.54,7857.49' href='#mc:0,bo:1,bo:9,bo:1'>
  <area shape='rect' coords='3495.54,7831.49,3711.51,7857.49' href='#mc:0,bo:1,bo:9,bo:1,bo:0'>
  <area shape='rect' coords='3732.51,7777.49,3824.36,7803.49' href='#mc:0,bo:1,bo:9,bo:1,bo:0,bo:0'>
  <area shape='rect' coords='3732.51,7805.49,3946.48,7857.49' href='#mc:0,bo:1,bo:9,bo:1,bo:0,bo:1'>
  <area shape='rect' coords='3732.51,7859.49,3957.84,7911.49' href='#mc:0,bo:1,bo:9,bo:1,bo:0,bo:2'>
  <area shape='rect' coords='3207.67,8102.49,3396.56,8132.49' href='#mc:0,bo:1,bo:10'>
  <area shape='rect' coords='3417.56,7913.49,3572.64,7939.49' href='#mc:0,bo:1,bo:10,bo:0'>
  <area shape='rect' coords='3417.56,8023.49,3503.65,8049.49' href='#mc:0,bo:1,bo:10,bo:1'>
  <area shape='rect' coords='3524.65,7941.49,3787.12,7993.49' href='#mc:0,bo:1,bo:10,bo:1,bo:0'>
  <area shape='rect' coords='3524.65,7995.49,3771.14,8021.49' href='#mc:0,bo:1,bo:10,bo:1,bo:1'>
  <area shape='rect' coords='3792.14,7995.49,3867.87,8021.49' href='#mc:0,bo:1,bo:10,bo:1,bo:1,bo:0'>
  <area shape='rect' coords='3524.65,8064.49,3595.97,8090.49' href='#mc:0,bo:1,bo:10,bo:1,bo:2'>
  <area shape='rect' coords='3616.97,8023.49,3831.9,8075.49' href='#mc:0,bo:1,bo:10,bo:1,bo:2,bo:0'>
  <area shape='rect' coords='3616.97,8077.49,3786.28,8103.49' href='#mc:0,bo:1,bo:10,bo:1,bo:2,bo:1'>
  <area shape='rect' coords='3616.97,8105.49,3798.25,8131.49' href='#mc:0,bo:1,bo:10,bo:1,bo:2,bo:2'>
  <area shape='rect' coords='3417.56,8133.49,3520.67,8159.49' href='#mc:0,bo:1,bo:10,bo:2'>
  <area shape='rect' coords='3439.56,8201.49,3534.47,8227.49' href='#mc:0,bo:1,bo:10,bo:3'>
  <area shape='rect' coords='3555.47,8161.49,3764.12,8187.49' href='#mc:0,bo:1,bo:10,bo:3,bo:0'>
  <area shape='rect' coords='3555.47,8189.49,3792.09,8267.49' href='#mc:0,bo:1,bo:10,bo:3,bo:1'>
  <area shape='rect' coords='3813.09,8202.49,4032.78,8254.49' href='#mc:0,bo:1,bo:10,bo:3,bo:1,bo:0'>
  <area shape='rect' coords='3417.56,8269.49,3659.01,8321.49' href='#mc:0,bo:1,bo:10,bo:4'>
  <area shape='rect' coords='3680.01,8269.49,3929.56,8321.49' href='#mc:0,bo:1,bo:10,bo:4,bo:0'>
  <area shape='rect' coords='2505.41,3230.28,2699.7,3264.28' href='#mc:0,bo:2'>
  <area shape='rect' coords='2720.7,2041.28,2902.84,2071.28' href='#mc:0,bo:2,bo:0'>
  <area shape='rect' coords='2923.84,2002.28,3029.41,2028.28' href='#mc:0,bo:2,bo:0,bo:0'>
  <area shape='rect' coords='3050.41,1976.28,3280.04,2054.28' href='#mc:0,bo:2,bo:0,bo:0,bo:0'>
  <area shape='rect' coords='2923.84,2083.28,3009.63,2109.28' href='#mc:0,bo:2,bo:0,bo:1'>
  <area shape='rect' coords='3030.63,2056.28,3261.49,2108.28' href='#mc:0,bo:2,bo:0,bo:1,bo:0'>
  <area shape='rect' coords='3030.63,2110.28,3201.88,2136.28' href='#mc:0,bo:2,bo:0,bo:1,bo:1'>
  <area shape='rect' coords='2720.7,2288.28,2844.09,2318.28' href='#mc:0,bo:2,bo:1'>
  <area shape='rect' coords='2865.09,2138.28,2956.96,2164.28' href='#mc:0,bo:2,bo:1,bo:0'>
  <area shape='rect' coords='2865.09,2166.28,2955.01,2192.28' href='#mc:0,bo:2,bo:1,bo:1'>
  <area shape='rect' coords='2865.09,2318.28,3006.6,2344.28' href='#mc:0,bo:2,bo:1,bo:2'>
  <area shape='rect' coords='3027.6,2207.28,3099.6,2233.28' href='#mc:0,bo:2,bo:1,bo:2,bo:0'>
  <area shape='rect' coords='3120.6,2194.28,3344.71,2246.28' href='#mc:0,bo:2,bo:1,bo:2,bo:0,bo:0'>
  <area shape='rect' coords='3027.6,2261.28,3060.2,2287.28' href='#mc:0,bo:2,bo:1,bo:2,bo:1'>
  <area shape='rect' coords='3081.2,2248.28,3331.65,2300.28' href='#mc:0,bo:2,bo:1,bo:2,bo:1,bo:0'>
  <area shape='rect' coords='3027.6,2316.28,3085.74,2342.28' href='#mc:0,bo:2,bo:1,bo:2,bo:2'>
  <area shape='rect' coords='3106.74,2302.28,3140.15,2328.28' href='#mc:0,bo:2,bo:1,bo:2,bo:2,bo:0'>
  <area shape='rect' coords='3106.74,2330.28,3143.38,2356.28' href='#mc:0,bo:2,bo:1,bo:2,bo:2,bo:1'>
  <area shape='rect' coords='3027.6,2372.28,3087.32,2398.28' href='#mc:0,bo:2,bo:1,bo:2,bo:3'>
  <area shape='rect' coords='3108.32,2358.28,3251.85,2384.28' href='#mc:0,bo:2,bo:1,bo:2,bo:3,bo:0'>
  <area shape='rect' coords='3108.32,2386.28,3338.85,2412.28' href='#mc:0,bo:2,bo:1,bo:2,bo:3,bo:1'>
  <area shape='rect' coords='3027.6,2414.28,3072.13,2440.28' href='#mc:0,bo:2,bo:1,bo:2,bo:4'>
  <area shape='rect' coords='3093.13,2414.28,3201.15,2440.28' href='#mc:0,bo:2,bo:1,bo:2,bo:4,bo:0'>
  <area shape='rect' coords='3027.6,2442.28,3080.68,2468.28' href='#mc:0,bo:2,bo:1,bo:2,bo:5'>
  <area shape='rect' coords='3101.68,2442.28,3130.65,2468.28' href='#mc:0,bo:2,bo:1,bo:2,bo:5,bo:0'>
  <area shape='rect' coords='2720.7,2604.28,2943.57,2634.28' href='#mc:0,bo:2,bo:2'>
  <area shape='rect' coords='2964.57,2470.28,3150.52,2522.28' href='#mc:0,bo:2,bo:2,bo:0'>
  <area shape='rect' coords='2964.57,2524.28,3201.74,2576.28' href='#mc:0,bo:2,bo:2,bo:1'>
  <area shape='rect' coords='2964.57,2606.28,3030.57,2632.28' href='#mc:0,bo:2,bo:2,bo:2'>
  <area shape='rect' coords='3051.57,2578.28,3190.1,2604.28' href='#mc:0,bo:2,bo:2,bo:2,bo:0'>
  <area shape='rect' coords='3051.57,2606.28,3111.26,2632.28' href='#mc:0,bo:2,bo:2,bo:2,bo:1'>
  <area shape='rect' coords='3051.57,2634.28,3141.27,2660.28' href='#mc:0,bo:2,bo:2,bo:2,bo:2'>
  <area shape='rect' coords='2964.57,2662.28,3186.01,2714.28' href='#mc:0,bo:2,bo:2,bo:3'>
  <area shape='rect' coords='2964.57,2716.28,3188.27,2768.28' href='#mc:0,bo:2,bo:2,bo:4'>
  <area shape='rect' coords='2720.7,2931.28,3018.98,2961.28' href='#mc:0,bo:2,bo:3'>
  <area shape='rect' coords='3039.98,2798.28,3178.12,2824.28' href='#mc:0,bo:2,bo:3,bo:0'>
  <area shape='rect' coords='3199.12,2770.28,3403.96,2796.28' href='#mc:0,bo:2,bo:3,bo:0,bo:0'>
  <area shape='rect' coords='3199.12,2798.28,3356.16,2824.28' href='#mc:0,bo:2,bo:3,bo:0,bo:1'>
  <area shape='rect' coords='3199.12,2826.28,3452.15,2852.28' href='#mc:0,bo:2,bo:3,bo:0,bo:2'>
  <area shape='rect' coords='3039.98,2907.28,3181.96,2933.28' href='#mc:0,bo:2,bo:3,bo:1'>
  <area shape='rect' coords='3202.96,2854.28,3432.91,2906.28' href='#mc:0,bo:2,bo:3,bo:1,bo:0'>
  <area shape='rect' coords='3202.96,2908.28,3454.63,2986.28' href='#mc:0,bo:2,bo:3,bo:1,bo:1'>
  <area shape='rect' coords='3039.98,2988.28,3061.98,3010.28' href='file:///home/juxley/Documents/Websites/Operator-Precedence-In-Javascript.pdf'>
  <area shape='rect' coords='3061.98,2988.28,3557.74,3014.28' href='#mc:0,bo:2,bo:3,bo:2'>
  <area shape='rect' coords='3039.98,3016.28,3270.98,3068.28' href='#mc:0,bo:2,bo:3,bo:3'>
  <area shape='rect' coords='3039.98,3070.28,3259.45,3122.28' href='#mc:0,bo:2,bo:3,bo:4'>
  <area shape='rect' coords='2720.7,3313.28,2933.71,3343.28' href='#mc:0,bo:2,bo:4'>
  <area shape='rect' coords='2954.71,3124.28,3182.34,3176.28' href='#mc:0,bo:2,bo:4,bo:0'>
  <area shape='rect' coords='2954.71,3178.28,3069.46,3204.28' href='#mc:0,bo:2,bo:4,bo:1'>
  <area shape='rect' coords='2954.71,3206.28,2991.73,3232.28' href='#mc:0,bo:2,bo:4,bo:2'>
  <area shape='rect' coords='3012.73,3206.28,3028.15,3232.28' href='#mc:0,bo:2,bo:4,bo:2,bo:0'>
  <area shape='rect' coords='2954.71,3289.28,3002.32,3315.28' href='#mc:0,bo:2,bo:4,bo:3'>
  <area shape='rect' coords='3023.32,3234.28,3046.16,3260.28' href='#mc:0,bo:2,bo:4,bo:3,bo:0'>
  <area shape='rect' coords='3023.32,3262.28,3224.24,3288.28' href='#mc:0,bo:2,bo:4,bo:3,bo:1'>
  <area shape='rect' coords='3023.32,3290.28,3283.32,3342.28' href='#mc:0,bo:2,bo:4,bo:3,bo:2'>
  <area shape='rect' coords='3023.32,3344.28,3209.98,3370.28' href='#mc:0,bo:2,bo:4,bo:3,bo:3'>
  <area shape='rect' coords='3230.98,3344.28,3313.23,3370.28' href='#mc:0,bo:2,bo:4,bo:3,bo:3,bo:0'>
  <area shape='rect' coords='2954.71,3372.28,3180.88,3424.28' href='#mc:0,bo:2,bo:4,bo:4'>
  <area shape='rect' coords='3201.88,3385.28,3355.76,3411.28' href='#mc:0,bo:2,bo:4,bo:4,bo:0'>
  <area shape='rect' coords='2954.71,3426.28,3207.66,3478.28' href='#mc:0,bo:2,bo:4,bo:5'>
  <area shape='rect' coords='2954.71,3480.28,3193.54,3532.28' href='#mc:0,bo:2,bo:4,bo:6'>
  <area shape='rect' coords='2720.7,3698.28,2900.82,3728.28' href='#mc:0,bo:2,bo:5'>
  <area shape='rect' coords='2921.82,3534.28,2987.18,3560.28' href='#mc:0,bo:2,bo:5,bo:0'>
  <area shape='rect' coords='3008.18,3534.28,3041.59,3560.28' href='#mc:0,bo:2,bo:5,bo:0,bo:0'>
  <area shape='rect' coords='2921.82,3562.28,2980.43,3588.28' href='#mc:0,bo:2,bo:5,bo:1'>
  <area shape='rect' coords='3001.43,3562.28,3034.84,3588.28' href='#mc:0,bo:2,bo:5,bo:1,bo:0'>
  <area shape='rect' coords='2921.82,3590.28,3118.63,3616.28' href='#mc:0,bo:2,bo:5,bo:2'>
  <area shape='rect' coords='2921.82,3618.28,2952.57,3644.28' href='#mc:0,bo:2,bo:5,bo:3'>
  <area shape='rect' coords='2973.57,3618.28,3193.1,3644.28' href='#mc:0,bo:2,bo:5,bo:3,bo:0'>
  <area shape='rect' coords='2921.82,3646.28,2956.85,3672.28' href='#mc:0,bo:2,bo:5,bo:4'>
  <area shape='rect' coords='2977.85,3646.28,3104.76,3672.28' href='#mc:0,bo:2,bo:5,bo:4,bo:0'>
  <area shape='rect' coords='2921.82,3674.28,2981.59,3700.28' href='#mc:0,bo:2,bo:5,bo:5'>
  <area shape='rect' coords='2921.82,3757.28,3120.21,3809.28' href='#mc:0,bo:2,bo:5,bo:6'>
  <area shape='rect' coords='3141.21,3702.28,3354.84,3754.28' href='#mc:0,bo:2,bo:5,bo:6,bo:0'>
  <area shape='rect' coords='3141.21,3756.28,3248.02,3782.28' href='#mc:0,bo:2,bo:5,bo:6,bo:1'>
  <area shape='rect' coords='3141.21,3784.28,3255.45,3810.28' href='#mc:0,bo:2,bo:5,bo:6,bo:2'>
  <area shape='rect' coords='3141.21,3812.28,3377.76,3864.28' href='#mc:0,bo:2,bo:5,bo:6,bo:3'>
  <area shape='rect' coords='2921.82,3866.28,2943.82,3888.28' href='/home/juxley/Documents/Mind Maps/Equalty-Comparison-And-Sameness.pdf'>
  <area shape='rect' coords='2943.82,3866.28,3038.21,3892.28' href='#mc:0,bo:2,bo:5,bo:7'>
  <area shape='rect' coords='2720.7,3933.28,2880.93,3963.28' href='#mc:0,bo:2,bo:6'>
  <area shape='rect' coords='2901.93,3908.28,3140.57,3960.28' href='#mc:0,bo:2,bo:6,bo:0'>
  <area shape='rect' coords='3161.57,3894.28,3415.6,3946.28' href='#mc:0,bo:2,bo:6,bo:0,bo:0'>
  <area shape='rect' coords='3161.57,3948.28,3389.38,3974.28' href='#mc:0,bo:2,bo:6,bo:0,bo:1'>
  <area shape='rect' coords='2923.93,3976.28,3018.84,4002.28' href='#mc:0,bo:2,bo:6,bo:1'>
  <area shape='rect' coords='2720.7,4110.28,2836.88,4140.28' href='#mc:0,bo:2,bo:7'>
  <area shape='rect' coords='2879.88,4044.28,2974.79,4070.28' href='#mc:0,bo:2,bo:7,bo:0'>
  <area shape='rect' coords='2995.79,4004.28,3254.12,4056.28' href='#mc:0,bo:2,bo:7,bo:0,bo:0'>
  <area shape='rect' coords='2995.79,4058.28,3220.7,4110.28' href='#mc:0,bo:2,bo:7,bo:0,bo:1'>
  <area shape='rect' coords='2857.88,4112.28,3074.99,4164.28' href='#mc:0,bo:2,bo:7,bo:1'>
  <area shape='rect' coords='2857.88,4166.28,3061.6,4192.28' href='#mc:0,bo:2,bo:7,bo:2'>
  <area shape='rect' coords='2857.88,4207.28,3092.32,4233.28' href='#mc:0,bo:2,bo:7,bo:3'>
  <area shape='rect' coords='3113.32,4194.28,3336.9,4246.28' href='#mc:0,bo:2,bo:7,bo:3,bo:0'>
  <area shape='rect' coords='2720.7,4368.28,2858.65,4398.28' href='#mc:0,bo:2,bo:8'>
  <area shape='rect' coords='2879.65,4248.28,3111.98,4300.28' href='#mc:0,bo:2,bo:8,bo:0'>
  <area shape='rect' coords='2879.65,4343.28,2944.81,4369.28' href='#mc:0,bo:2,bo:8,bo:1'>
  <area shape='rect' coords='2965.81,4302.28,3201.57,4328.28' href='#mc:0,bo:2,bo:8,bo:1,bo:0'>
  <area shape='rect' coords='2965.81,4330.28,3143.12,4356.28' href='#mc:0,bo:2,bo:8,bo:1,bo:1'>
  <area shape='rect' coords='2965.81,4358.28,3184.29,4410.28' href='#mc:0,bo:2,bo:8,bo:1,bo:2'>
  <area shape='rect' coords='2879.65,4439.28,3132.76,4491.28' href='#mc:0,bo:2,bo:8,bo:2'>
  <area shape='rect' coords='3153.76,4412.28,3412.29,4464.28' href='#mc:0,bo:2,bo:8,bo:2,bo:0'>
  <area shape='rect' coords='3153.76,4466.28,3386.48,4518.28' href='#mc:0,bo:2,bo:8,bo:2,bo:1'>
  <area shape='rect' coords='1245.2,3683,1450.77,3717' href='#mc:0,bo:3'>
  <area shape='rect' coords='1069.5,148,1224.2,178' href='#mc:0,bo:3,bo:0'>
  <area shape='rect' coords='928.812,11,1048.5,37' href='#mc:0,bo:3,bo:0,bo:0'>
  <area shape='rect' coords='978.391,95,1048.5,121' href='#mc:0,bo:3,bo:0,bo:1'>
  <area shape='rect' coords='794.547,39,957.391,65' href='#mc:0,bo:3,bo:0,bo:1,bo:0'>
  <area shape='rect' coords='570.391,39,773.547,65' href='#mc:0,bo:3,bo:0,bo:1,bo:0,bo:0'>
  <area shape='rect' coords='719.703,67,957.391,93' href='#mc:0,bo:3,bo:0,bo:1,bo:1'>
  <area shape='rect' coords='807.078,95,957.391,121' href='#mc:0,bo:3,bo:0,bo:1,bo:2'>
  <area shape='rect' coords='733.297,123,957.391,149' href='#mc:0,bo:3,bo:0,bo:1,bo:3'>
  <area shape='rect' coords='733.234,151,957.391,177' href='#mc:0,bo:3,bo:0,bo:1,bo:4'>
  <area shape='rect' coords='983.625,234,1048.5,260' href='#mc:0,bo:3,bo:0,bo:2'>
  <area shape='rect' coords='786.5,179,962.625,205' href='#mc:0,bo:3,bo:0,bo:2,bo:0'>
  <area shape='rect' coords='575.672,179,765.5,205' href='#mc:0,bo:3,bo:0,bo:2,bo:0,bo:0'>
  <area shape='rect' coords='859.812,221,962.625,247' href='#mc:0,bo:3,bo:0,bo:2,bo:1'>
  <area shape='rect' coords='784.328,207,838.812,233' href='#mc:0,bo:3,bo:0,bo:2,bo:1,bo:0'>
  <area shape='rect' coords='725.688,235,838.812,261' href='#mc:0,bo:3,bo:0,bo:2,bo:1,bo:1'>
  <area shape='rect' coords='720.141,263,962.625,315' href='#mc:0,bo:3,bo:0,bo:2,bo:2'>
  <area shape='rect' coords='1108.66,397,1224.2,427' href='#mc:0,bo:3,bo:1'>
  <area shape='rect' coords='870.75,317,1087.66,369' href='#mc:0,bo:3,bo:1,bo:0'>
  <area shape='rect' coords='858.141,371,1087.66,397' href='#mc:0,bo:3,bo:1,bo:1'>
  <area shape='rect' coords='994.719,399,1087.66,425' href='#mc:0,bo:3,bo:1,bo:2'>
  <area shape='rect' coords='832.344,427,1087.66,453' href='#mc:0,bo:3,bo:1,bo:3'>
  <area shape='rect' coords='801.906,455,1043.66,507' href='#mc:0,bo:3,bo:1,bo:4'>
  <area shape='rect' coords='928.078,629,1224.2,659' href='#mc:0,bo:3,bo:2'>
  <area shape='rect' coords='821.188,509,907.078,535' href='#mc:0,bo:3,bo:2,bo:0'>
  <area shape='rect' coords='556.234,509,800.188,535' href='#mc:0,bo:3,bo:2,bo:0,bo:0'>
  <area shape='rect' coords='664.375,537,907.078,589' href='#mc:0,bo:3,bo:2,bo:1'>
  <area shape='rect' coords='657.516,591,907.078,643' href='#mc:0,bo:3,bo:2,bo:2'>
  <area shape='rect' coords='677.812,645,907.078,697' href='#mc:0,bo:3,bo:2,bo:3'>
  <area shape='rect' coords='563.875,658,656.812,684' href='#mc:0,bo:3,bo:2,bo:3,bo:0'>
  <area shape='rect' coords='528.125,658,542.875,684' href='#mc:0,bo:3,bo:2,bo:3,bo:0,bo:0'>
  <area shape='rect' coords='864.75,726,907.078,752' href='#mc:0,bo:3,bo:2,bo:4'>
  <area shape='rect' coords='626.688,713,843.75,765' href='#mc:0,bo:3,bo:2,bo:4,bo:0'>
  <area shape='rect' coords='348.406,699,605.688,751' href='#mc:0,bo:3,bo:2,bo:4,bo:0,bo:0'>
  <area shape='rect' coords='389.781,753,605.688,779' href='#mc:0,bo:3,bo:2,bo:4,bo:0,bo:1'>
  <area shape='rect' coords='1041.52,848,1224.2,878' href='#mc:0,bo:3,bo:3'>
  <area shape='rect' coords='865.391,781,1020.52,807' href='#mc:0,bo:3,bo:3,bo:0'>
  <area shape='rect' coords='652.359,781,844.391,807' href='#mc:0,bo:3,bo:3,bo:0,bo:0'>
  <area shape='rect' coords='848.297,809,1020.52,835' href='#mc:0,bo:3,bo:3,bo:1'>
  <area shape='rect' coords='765.641,837,1020.52,889' href='#mc:0,bo:3,bo:3,bo:2'>
  <area shape='rect' coords='927.578,891,1020.52,917' href='#mc:0,bo:3,bo:3,bo:3'>
  <area shape='rect' coords='899.047,919,1020.52,945' href='#mc:0,bo:3,bo:3,bo:4'>
  <area shape='rect' coords='1034.84,1095,1202.2,1125' href='#mc:0,bo:3,bo:4'>
  <area shape='rect' coords='872.562,1000,991.844,1026' href='#mc:0,bo:3,bo:4,bo:0'>
  <area shape='rect' coords='606.094,947,851.562,999' href='#mc:0,bo:3,bo:4,bo:0,bo:0'>
  <area shape='rect' coords='593.969,1001,851.562,1079' href='#mc:0,bo:3,bo:4,bo:0,bo:1'>
  <area shape='rect' coords='766.266,1164,991.844,1190' href='#mc:0,bo:3,bo:4,bo:1'>
  <area shape='rect' coords='480.922,1110,745.266,1162' href='#mc:0,bo:3,bo:4,bo:1,bo:0'>
  <area shape='rect' coords='393.984,1081,459.922,1107' href='#mc:0,bo:3,bo:4,bo:1,bo:0,bo:0'>
  <area shape='rect' coords='412.203,1109,459.922,1135' href='#mc:0,bo:3,bo:4,bo:1,bo:0,bo:1'>
  <area shape='rect' coords='392.75,1137,459.922,1163' href='#mc:0,bo:3,bo:4,bo:1,bo:0,bo:2'>
  <area shape='rect' coords='365.016,1165,459.922,1191' href='#mc:0,bo:3,bo:4,bo:1,bo:0,bo:3'>
  <area shape='rect' coords='659.719,1220,745.266,1246' href='#mc:0,bo:3,bo:4,bo:1,bo:1'>
  <area shape='rect' coords='587.875,1193,638.719,1219' href='#mc:0,bo:3,bo:4,bo:1,bo:1,bo:0'>
  <area shape='rect' coords='404.672,1193,566.875,1219' href='#mc:0,bo:3,bo:4,bo:1,bo:1,bo:0,bo:0'>
  <area shape='rect' coords='542.906,1234,638.719,1260' href='#mc:0,bo:3,bo:4,bo:1,bo:1,bo:1'>
  <area shape='rect' coords='454.859,1234,521.906,1260' href='#mc:0,bo:3,bo:4,bo:1,bo:1,bo:1,bo:0'>
  <area shape='rect' coords='230.219,1221,433.859,1273' href='#mc:0,bo:3,bo:4,bo:1,bo:1,bo:1,bo:0,bo:0'>
  <area shape='rect' coords='959.047,1543,1224.2,1603' href='#mc:0,bo:3,bo:5'>
  <area shape='rect' coords='701.156,1383,938.047,1435' href='#mc:0,bo:3,bo:5,bo:0'>
  <area shape='rect' coords='444.188,1275,680.156,1301' href='#mc:0,bo:3,bo:5,bo:0,bo:0'>
  <area shape='rect' coords='613.781,1303,680.156,1329' href='#mc:0,bo:3,bo:5,bo:0,bo:1'>
  <area shape='rect' coords='551.812,1357,680.156,1383' href='#mc:0,bo:3,bo:5,bo:0,bo:2'>
  <area shape='rect' coords='232.75,1331,508.812,1409' href='#mc:0,bo:3,bo:5,bo:0,bo:2,bo:0'>
  <area shape='rect' coords='439.469,1411,680.156,1515' href='#mc:0,bo:3,bo:5,bo:0,bo:3'>
  <area shape='rect' coords='491.672,1517,680.156,1543' href='#mc:0,bo:3,bo:5,bo:0,bo:4'>
  <area shape='rect' coords='794.719,1587,938.047,1613' href='#mc:0,bo:3,bo:5,bo:1'>
  <area shape='rect' coords='691.094,1545,773.719,1571' href='#mc:0,bo:3,bo:5,bo:1,bo:0'>
  <area shape='rect' coords='649.266,1601,773.719,1627' href='#mc:0,bo:3,bo:5,bo:1,bo:1'>
  <area shape='rect' coords='441.266,1573,606.266,1599' href='#mc:0,bo:3,bo:5,bo:1,bo:1,bo:0'>
  <area shape='rect' coords='473.891,1601,606.266,1627' href='#mc:0,bo:3,bo:5,bo:1,bo:1,bo:1'>
  <area shape='rect' coords='551.219,1629,606.266,1655' href='#mc:0,bo:3,bo:5,bo:1,bo:1,bo:2'>
  <area shape='rect' coords='683.922,1657,938.047,1709' href='#mc:0,bo:3,bo:5,bo:2'>
  <area shape='rect' coords='833.422,1711,938.047,1737' href='#mc:0,bo:3,bo:5,bo:3'>
  <area shape='rect' coords='684.141,1739,938.047,1817' href='#mc:0,bo:3,bo:5,bo:4'>
  <area shape='rect' coords='723.812,1819,938.047,1871' href='#mc:0,bo:3,bo:5,bo:5'>
  <area shape='rect' coords='1039.56,2036,1224.2,2066' href='#mc:0,bo:3,bo:6'>
  <area shape='rect' coords='958.469,1928,1018.56,1954' href='#mc:0,bo:3,bo:6,bo:0'>
  <area shape='rect' coords='900.031,1873,937.469,1899' href='#mc:0,bo:3,bo:6,bo:0,bo:0'>
  <area shape='rect' coords='869.172,1901,891.172,1923' href='/home/juxley/Pictures/byreferencebyvalue1.png'>
  <area shape='rect' coords='891.172,1901,937.469,1927' href='#mc:0,bo:3,bo:6,bo:0,bo:1'>
  <area shape='rect' coords='719.922,1929,937.469,1955' href='#mc:0,bo:3,bo:6,bo:0,bo:2'>
  <area shape='rect' coords='690.625,1957,937.469,2009' href='#mc:0,bo:3,bo:6,bo:0,bo:3'>
  <area shape='rect' coords='930.766,2065,1018.56,2091' href='#mc:0,bo:3,bo:6,bo:1'>
  <area shape='rect' coords='690.953,2011,909.766,2063' href='#mc:0,bo:3,bo:6,bo:1,bo:0'>
  <area shape='rect' coords='670.953,2065,909.766,2117' href='#mc:0,bo:3,bo:6,bo:1,bo:1'>
  <area shape='rect' coords='841.469,2119,863.469,2141' href='/home/juxley/Pictures/byreference.png'>
  <area shape='rect' coords='863.469,2119,909.766,2145' href='#mc:0,bo:3,bo:6,bo:1,bo:2'>
  <area shape='rect' coords='979.188,2147,1018.56,2173' href='#mc:0,bo:3,bo:6,bo:2'>
  <area shape='rect' coords='958.422,2175,1018.56,2201' href='#mc:0,bo:3,bo:6,bo:3'>
  <area shape='rect' coords='827.234,2175,937.422,2201' href='#mc:0,bo:3,bo:6,bo:3,bo:0'>
  <area shape='rect' coords='937,2203,1018.56,2229' href='#mc:0,bo:3,bo:6,bo:4'>
  <area shape='rect' coords='796.953,2203,916,2229' href='#mc:0,bo:3,bo:6,bo:4,bo:0'>
  <area shape='rect' coords='974.547,2404,996.547,2426' href='/home/juxley/Pictures/this.png'>
  <area shape='rect' coords='996.547,2404,1224.2,2434' href='#mc:0,bo:3,bo:7'>
  <area shape='rect' coords='700.922,2231,953.547,2283' href='#mc:0,bo:3,bo:7,bo:0'>
  <area shape='rect' coords='829.062,2433,953.547,2459' href='#mc:0,bo:3,bo:7,bo:1'>
  <area shape='rect' coords='582.688,2285,808.062,2337' href='#mc:0,bo:3,bo:7,bo:1,bo:0'>
  <area shape='rect' coords='713.156,2339,808.062,2365' href='#mc:0,bo:3,bo:7,bo:1,bo:1'>
  <area shape='rect' coords='575.625,2367,808.062,2445' href='#mc:0,bo:3,bo:7,bo:1,bo:2'>
  <area shape='rect' coords='554.75,2447,808.062,2499' href='#mc:0,bo:3,bo:7,bo:1,bo:3'>
  <area shape='rect' coords='574.328,2501,808.062,2553' href='#mc:0,bo:3,bo:7,bo:1,bo:4'>
  <area shape='rect' coords='587.328,2555,808.062,2607' href='#mc:0,bo:3,bo:7,bo:1,bo:5'>
  <area shape='rect' coords='890.359,2609,912.359,2631' href='/home/juxley/Pictures/collectionofanything.png'>
  <area shape='rect' coords='912.359,2609,1224.2,2639' href='#mc:0,bo:3,bo:8'>
  <area shape='rect' coords='1032.06,2830,1224.2,2860' href='#mc:0,bo:3,bo:9'>
  <area shape='rect' coords='996.312,2641,1011.06,2667' href='#mc:0,bo:3,bo:9,bo:0'>
  <area shape='rect' coords='770.391,2669,1011.06,2721' href='#mc:0,bo:3,bo:9,bo:1'>
  <area shape='rect' coords='753.062,2723,1011.06,2775' href='#mc:0,bo:3,bo:9,bo:2'>
  <area shape='rect' coords='785.484,2777,1011.06,2829' href='#mc:0,bo:3,bo:9,bo:3'>
  <area shape='rect' coords='950.906,2831,1011.06,2857' href='#mc:0,bo:3,bo:9,bo:4'>
  <area shape='rect' coords='846.766,2859,1011.06,2885' href='#mc:0,bo:3,bo:9,bo:5'>
  <area shape='rect' coords='780.219,2887,1011.06,2939' href='#mc:0,bo:3,bo:9,bo:6'>
  <area shape='rect' coords='640.156,2900,759.219,2926' href='#mc:0,bo:3,bo:9,bo:6,bo:0'>
  <area shape='rect' coords='837.984,2941,1011.06,2967' href='#mc:0,bo:3,bo:9,bo:7'>
  <area shape='rect' coords='956.641,2996,1011.06,3022' href='#mc:0,bo:3,bo:9,bo:8'>
  <area shape='rect' coords='882.922,2969,935.641,2995' href='#mc:0,bo:3,bo:9,bo:8,bo:0'>
  <area shape='rect' coords='694.797,2997,935.641,3049' href='#mc:0,bo:3,bo:9,bo:8,bo:1'>
  <area shape='rect' coords='917.359,3090,1224.2,3120' href='#mc:0,bo:3,bo:10'>
  <area shape='rect' coords='649.234,3051,874.359,3103' href='#mc:0,bo:3,bo:10,bo:0'>
  <area shape='rect' coords='699.812,3105,874.359,3131' href='#mc:0,bo:3,bo:10,bo:1'>
  <area shape='rect' coords='814.203,3133,874.359,3159' href='#mc:0,bo:3,bo:10,bo:2'>
  <area shape='rect' coords='998.078,3266,1224.2,3296' href='#mc:0,bo:3,bo:11'>
  <area shape='rect' coords='725.844,3161,977.078,3213' href='#mc:0,bo:3,bo:11,bo:0'>
  <area shape='rect' coords='791.25,3215,977.078,3241' href='#mc:0,bo:3,bo:11,bo:1'>
  <area shape='rect' coords='742.891,3243,977.078,3295' href='#mc:0,bo:3,bo:11,bo:2'>
  <area shape='rect' coords='714.734,3297,977.078,3401' href='#mc:0,bo:3,bo:11,bo:3'>
  <area shape='rect' coords='976.859,3508,1224.2,3568' href='#mc:0,bo:3,bo:12'>
  <area shape='rect' coords='718.125,3403,955.859,3455' href='#mc:0,bo:3,bo:12,bo:0'>
  <area shape='rect' coords='717.266,3457,955.859,3509' href='#mc:0,bo:3,bo:12,bo:1'>
  <area shape='rect' coords='689.953,3511,955.859,3563' href='#mc:0,bo:3,bo:12,bo:2'>
  <area shape='rect' coords='829.188,3565,955.859,3591' href='#mc:0,bo:3,bo:12,bo:3'>
  <area shape='rect' coords='839.641,3593,955.859,3619' href='#mc:0,bo:3,bo:12,bo:4'>
  <area shape='rect' coords='708.453,3621,955.859,3673' href='#mc:0,bo:3,bo:12,bo:5'>
  <area shape='rect' coords='978.953,3768,1224.2,3798' href='#mc:0,bo:3,bo:13'>
  <area shape='rect' coords='807.062,3675,957.953,3701' href='#mc:0,bo:3,bo:13,bo:0'>
  <area shape='rect' coords='691.766,3703,957.953,3755' href='#mc:0,bo:3,bo:13,bo:1'>
  <area shape='rect' coords='656.016,3716,670.766,3742' href='#mc:0,bo:3,bo:13,bo:1,bo:0'>
  <area shape='rect' coords='897.797,3757,957.953,3783' href='#mc:0,bo:3,bo:13,bo:2'>
  <area shape='rect' coords='711.469,3785,957.953,3837' href='#mc:0,bo:3,bo:13,bo:3'>
  <area shape='rect' coords='688.891,3839,957.953,3891' href='#mc:0,bo:3,bo:13,bo:4'>
  <area shape='rect' coords='903.531,4378,1224.2,4408' href='#mc:0,bo:3,bo:14'>
  <area shape='rect' coords='763.141,3893,882.531,3919' href='#mc:0,bo:3,bo:14,bo:0'>
  <area shape='rect' coords='751.906,3921,882.531,3947' href='#mc:0,bo:3,bo:14,bo:1'>
  <area shape='rect' coords='815.359,3963,882.531,3989' href='#mc:0,bo:3,bo:14,bo:2'>
  <area shape='rect' coords='616.219,3949,794.359,3975' href='#mc:0,bo:3,bo:14,bo:2,bo:0'>
  <area shape='rect' coords='749.734,3977,794.359,4003' href='#mc:0,bo:3,bo:14,bo:2,bo:1'>
  <area shape='rect' coords='691.859,4005,882.531,4031' href='#mc:0,bo:3,bo:14,bo:3'>
  <area shape='rect' coords='851.797,4073,882.531,4099' href='#mc:0,bo:3,bo:14,bo:4'>
  <area shape='rect' coords='570.594,4033,808.797,4085' href='#mc:0,bo:3,bo:14,bo:4,bo:0'>
  <area shape='rect' coords='569.297,4087,808.797,4139' href='#mc:0,bo:3,bo:14,bo:4,bo:1'>
  <area shape='rect' coords='621.891,4155,882.531,4233' href='#mc:0,bo:3,bo:14,bo:5'>
  <area shape='rect' coords='365.875,4141,600.891,4193' href='#mc:0,bo:3,bo:14,bo:5,bo:0'>
  <area shape='rect' coords='309.812,4195,600.891,4247' href='#mc:0,bo:3,bo:14,bo:5,bo:1'>
  <area shape='rect' coords='647.859,4249,882.531,4301' href='#mc:0,bo:3,bo:14,bo:6'>
  <area shape='rect' coords='717.75,4356,882.531,4382' href='#mc:0,bo:3,bo:14,bo:7'>
  <area shape='rect' coords='458.281,4303,696.75,4407' href='#mc:0,bo:3,bo:14,bo:7,bo:0'>
  <area shape='rect' coords='583.625,4409,696.75,4435' href='#mc:0,bo:3,bo:14,bo:7,bo:1'>
  <area shape='rect' coords='652.922,4652,882.531,4678' href='#mc:0,bo:3,bo:14,bo:8'>
  <area shape='rect' coords='565.781,4437,631.922,4463' href='#mc:0,bo:3,bo:14,bo:8,bo:0'>
  <area shape='rect' coords='528.812,4585,631.922,4611' href='#mc:0,bo:3,bo:14,bo:8,bo:1'>
  <area shape='rect' coords='262.641,4465,507.812,4517' href='#mc:0,bo:3,bo:14,bo:8,bo:1,bo:0'>
  <area shape='rect' coords='272.422,4519,507.812,4571' href='#mc:0,bo:3,bo:14,bo:8,bo:1,bo:1'>
  <area shape='rect' coords='279.547,4626,507.812,4678' href='#mc:0,bo:3,bo:14,bo:8,bo:1,bo:2'>
  <area shape='rect' coords='11.2344,4573,258.547,4651' href='#mc:0,bo:3,bo:14,bo:8,bo:1,bo:2,bo:0'>
  <area shape='rect' coords='11,4653,258.547,4731' href='#mc:0,bo:3,bo:14,bo:8,bo:1,bo:2,bo:1'>
  <area shape='rect' coords='562.797,4733,584.797,4755' href='/home/juxley/Pictures/safeiife.png'>
  <area shape='rect' coords='584.797,4733,631.922,4759' href='#mc:0,bo:3,bo:14,bo:8,bo:2'>
  <area shape='rect' coords='374.406,4761,631.922,4839' href='#mc:0,bo:3,bo:14,bo:8,bo:3'>
  <area shape='rect' coords='131.188,4787,353.406,4813' href='#mc:0,bo:3,bo:14,bo:8,bo:3,bo:0'>
  <area shape='rect' coords='389.203,4841,631.922,4893' href='#mc:0,bo:3,bo:14,bo:8,bo:4'>
  <area shape='rect' coords='117.812,4841,368.203,4893' href='#mc:0,bo:3,bo:14,bo:8,bo:4,bo:0'>
  <area shape='rect' coords='36.6562,4854,96.8125,4880' href='#mc:0,bo:3,bo:14,bo:8,bo:4,bo:0,bo:0'>
  <area shape='rect' coords='1034.44,5609,1224.2,5639' href='#mc:0,bo:3,bo:15'>
  <area shape='rect' coords='953.281,4895,1013.44,4921' href='#mc:0,bo:3,bo:15,bo:0'>
  <area shape='rect' coords='766.281,4923,1013.44,4975' href='#mc:0,bo:3,bo:15,bo:1'>
  <area shape='rect' coords='817.547,4977,1013.44,5003' href='#mc:0,bo:3,bo:15,bo:2'>
  <area shape='rect' coords='766.234,5005,1013.44,5083' href='#mc:0,bo:3,bo:15,bo:3'>
  <area shape='rect' coords='540.625,5018,745.234,5070' href='#mc:0,bo:3,bo:15,bo:3,bo:0'>
  <area shape='rect' coords='785.062,5125,1013.44,5177' href='#mc:0,bo:3,bo:15,bo:4'>
  <area shape='rect' coords='535.953,5085,764.062,5137' href='#mc:0,bo:3,bo:15,bo:4,bo:0'>
  <area shape='rect' coords='518.094,5139,764.062,5217' href='#mc:0,bo:3,bo:15,bo:4,bo:1'>
  <area shape='rect' coords='761.891,5273,1013.44,5325' href='#mc:0,bo:3,bo:15,bo:5'>
  <area shape='rect' coords='501.156,5219,740.891,5297' href='#mc:0,bo:3,bo:15,bo:5,bo:0'>
  <area shape='rect' coords='528.984,5299,740.891,5325' href='#mc:0,bo:3,bo:15,bo:5,bo:1'>
  <area shape='rect' coords='540.344,5327,740.891,5379' href='#mc:0,bo:3,bo:15,bo:5,bo:2'>
  <area shape='rect' coords='767.391,5381,789.391,5403' href='/home/juxley/Pictures/closures.png'>
  <area shape='rect' coords='789.391,5381,1013.44,5433' href='#mc:0,bo:3,bo:15,bo:6'>
  <area shape='rect' coords='570.266,5394,746.391,5420' href='#mc:0,bo:3,bo:15,bo:6,bo:0'>
  <area shape='rect' coords='769.828,5435,1013.44,5513' href='#mc:0,bo:3,bo:15,bo:7'>
  <area shape='rect' coords='909.062,5583,1013.44,5609' href='#mc:0,bo:3,bo:15,bo:8'>
  <area shape='rect' coords='818.5,5515,840.5,5537' href='/home/juxley/Pictures/closure2.png'>
  <area shape='rect' coords='840.5,5515,866.062,5541' href='#mc:0,bo:3,bo:15,bo:8,bo:0'>
  <area shape='rect' coords='590.406,5543,866.062,5621' href='#mc:0,bo:3,bo:15,bo:8,bo:1'>
  <area shape='rect' coords='762.594,5623,866.062,5649' href='#mc:0,bo:3,bo:15,bo:8,bo:2'>
  <area shape='rect' coords='786.141,5651,866.062,5677' href='#mc:0,bo:3,bo:15,bo:8,bo:3'>
  <area shape='rect' coords='781.688,5813,1013.44,5839' href='#mc:0,bo:3,bo:15,bo:9'>
  <area shape='rect' coords='520.453,5679,760.688,5757' href='#mc:0,bo:3,bo:15,bo:9,bo:0'>
  <area shape='rect' coords='523.875,5759,760.688,5837' href='#mc:0,bo:3,bo:15,bo:9,bo:1'>
  <area shape='rect' coords='700.531,5839,760.688,5865' href='#mc:0,bo:3,bo:15,bo:9,bo:2'>
  <area shape='rect' coords='507.641,5867,760.688,5945' href='#mc:0,bo:3,bo:15,bo:9,bo:3'>
  <area shape='rect' coords='691.562,5947,713.562,5969' href='/home/juxley/Pictures/closures_factorybuilding.png'>
  <area shape='rect' coords='713.562,5947,760.688,5973' href='#mc:0,bo:3,bo:15,bo:9,bo:4'>
  <area shape='rect' coords='857.922,6151,1013.44,6177' href='#mc:0,bo:3,bo:15,bo:10'>
  <area shape='rect' coords='776.766,5975,836.922,6001' href='#mc:0,bo:3,bo:15,bo:10,bo:0'>
  <area shape='rect' coords='591.844,6003,836.922,6055' href='#mc:0,bo:3,bo:15,bo:10,bo:1'>
  <area shape='rect' coords='578.172,6057,836.922,6109' href='#mc:0,bo:3,bo:15,bo:10,bo:2'>
  <area shape='rect' coords='670.375,6111,836.922,6137' href='#mc:0,bo:3,bo:15,bo:10,bo:3'>
  <area shape='rect' coords='611.453,6139,836.922,6191' href='#mc:0,bo:3,bo:15,bo:10,bo:4'>
  <area shape='rect' coords='581.906,6193,836.922,6271' href='#mc:0,bo:3,bo:15,bo:10,bo:5'>
  <area shape='rect' coords='603.469,6274,836.922,6352' href='#mc:0,bo:3,bo:15,bo:10,bo:6'>
  <area shape='rect' coords='331.656,6273,582.469,6325' href='#mc:0,bo:3,bo:15,bo:10,bo:6,bo:0'>
  <area shape='rect' coords='468.328,6327,582.469,6353' href='#mc:0,bo:3,bo:15,bo:10,bo:6,bo:1'>
  <area shape='rect' coords='1075.3,6596,1224.2,6626' href='#mc:0,bo:3,bo:16'>
  <area shape='rect' coords='808.297,6355,1054.3,6407' href='#mc:0,bo:3,bo:16,bo:0'>
  <area shape='rect' coords='574.234,6368,787.297,6394' href='#mc:0,bo:3,bo:16,bo:0,bo:0'>
  <area shape='rect' coords='851.141,6611,1054.3,6637' href='#mc:0,bo:3,bo:16,bo:1'>
  <area shape='rect' coords='794.797,6436,830.141,6462' href='#mc:0,bo:3,bo:16,bo:1,bo:0'>
  <area shape='rect' coords='486.453,6409,751.797,6461' href='#mc:0,bo:3,bo:16,bo:1,bo:0,bo:0'>
  <area shape='rect' coords='662.344,6463,751.797,6489' href='#mc:0,bo:3,bo:16,bo:1,bo:0,bo:1'>
  <area shape='rect' coords='801.938,6517,830.141,6543' href='#mc:0,bo:3,bo:16,bo:1,bo:1'>
  <area shape='rect' coords='518.891,6491,758.938,6569' href='#mc:0,bo:3,bo:16,bo:1,bo:1,bo:0'>
  <area shape='rect' coords='788.922,6692,830.141,6718' href='#mc:0,bo:3,bo:16,bo:1,bo:2'>
  <area shape='rect' coords='481.25,6571,745.922,6623' href='#mc:0,bo:3,bo:16,bo:1,bo:2,bo:0'>
  <area shape='rect' coords='624.609,6719,745.922,6745' href='#mc:0,bo:3,bo:16,bo:1,bo:2,bo:1'>
  <area shape='rect' coords='420.156,6625,581.609,6651' href='#mc:0,bo:3,bo:16,bo:1,bo:2,bo:1,bo:0'>
  <area shape='rect' coords='453.078,6666,581.609,6692' href='#mc:0,bo:3,bo:16,bo:1,bo:2,bo:1,bo:1'>
  <area shape='rect' coords='179.578,6653,410.078,6705' href='#mc:0,bo:3,bo:16,bo:1,bo:2,bo:1,bo:1,bo:0'>
  <area shape='rect' coords='425.844,6760,581.609,6786' href='#mc:0,bo:3,bo:16,bo:1,bo:2,bo:1,bo:2'>
  <area shape='rect' coords='137.781,6707,382.844,6759' href='#mc:0,bo:3,bo:16,bo:1,bo:2,bo:1,bo:2,bo:0'>
  <area shape='rect' coords='134.938,6761,382.844,6839' href='#mc:0,bo:3,bo:16,bo:1,bo:2,bo:1,bo:2,bo:1'>
  <area shape='rect' coords='985.172,6841,1007.17,6863' href='/home/juxley/Pictures/functionbreakdone.png'>
  <area shape='rect' coords='1007.17,6841,1054.3,6867' href='#mc:0,bo:3,bo:16,bo:2'>
  <area shape='rect' coords='1028.92,7114,1224.2,7144' href='#mc:0,bo:3,bo:17'>
  <area shape='rect' coords='779.359,6870,1007.92,6922' href='#mc:0,bo:3,bo:17,bo:0'>
  <area shape='rect' coords='743.609,6869,758.359,6895' href='#mc:0,bo:3,bo:17,bo:0,bo:0'>
  <area shape='rect' coords='743.609,6897,758.359,6923' href='#mc:0,bo:3,bo:17,bo:0,bo:1'>
  <area shape='rect' coords='777.062,6925,1007.92,6951' href='#mc:0,bo:3,bo:17,bo:1'>
  <area shape='rect' coords='748.953,6953,1007.92,7005' href='#mc:0,bo:3,bo:17,bo:2'>
  <area shape='rect' coords='868.281,7047,1007.92,7073' href='#mc:0,bo:3,bo:17,bo:3'>
  <area shape='rect' coords='573.078,7007,825.281,7059' href='#mc:0,bo:3,bo:17,bo:3,bo:0'>
  <area shape='rect' coords='579.031,7061,825.281,7113' href='#mc:0,bo:3,bo:17,bo:3,bo:1'>
  <area shape='rect' coords='740.422,7157,1007.92,7209' href='#mc:0,bo:3,bo:17,bo:4'>
  <area shape='rect' coords='571.078,7115,719.422,7141' href='#mc:0,bo:3,bo:17,bo:4,bo:0'>
  <area shape='rect' coords='572.297,7143,719.422,7169' href='#mc:0,bo:3,bo:17,bo:4,bo:1'>
  <area shape='rect' coords='510.844,7171,719.422,7197' href='#mc:0,bo:3,bo:17,bo:4,bo:2'>
  <area shape='rect' coords='478.281,7199,719.422,7251' href='#mc:0,bo:3,bo:17,bo:4,bo:3'>
  <area shape='rect' coords='963.938,7308,1007.92,7334' href='#mc:0,bo:3,bo:17,bo:5'>
  <area shape='rect' coords='787.734,7253,809.734,7275' href='http://underscorejs.org'>
  <area shape='rect' coords='809.734,7253,942.938,7279' href='#mc:0,bo:3,bo:17,bo:5,bo:0'>
  <area shape='rect' coords='751.984,7253,766.734,7279' href='#mc:0,bo:3,bo:17,bo:5,bo:0,bo:0'>
  <area shape='rect' coords='778.75,7308,942.938,7334' href='#mc:0,bo:3,bo:17,bo:5,bo:1'>
  <area shape='rect' coords='558.422,7281,757.75,7307' href='#mc:0,bo:3,bo:17,bo:5,bo:1,bo:0'>
  <area shape='rect' coords='498.562,7309,757.75,7361' href='#mc:0,bo:3,bo:17,bo:5,bo:1,bo:1'>
  <area shape='rect' coords='796.766,7363,942.938,7389' href='#mc:0,bo:3,bo:17,bo:5,bo:2'>
  <area shape='rect' coords='3081.78,10301.8,3362.84,10369.8' href='#mc:0,bo:4'>
  <area shape='rect' coords='3383.84,9898.78,3613.59,9958.78' href='#mc:0,bo:4,bo:0'>
  <area shape='rect' coords='3634.59,9806.78,3890.39,9884.78' href='#mc:0,bo:4,bo:0,bo:0'>
  <area shape='rect' coords='3634.59,9914.78,3694.06,9940.78' href='#mc:0,bo:4,bo:0,bo:1'>
  <area shape='rect' coords='3715.06,9886.78,3881.31,9912.78' href='#mc:0,bo:4,bo:0,bo:1,bo:0'>
  <area shape='rect' coords='3715.06,9914.78,3808.9,9940.78' href='#mc:0,bo:4,bo:0,bo:1,bo:1'>
  <area shape='rect' coords='3715.06,9942.78,3850.45,9968.78' href='#mc:0,bo:4,bo:0,bo:1,bo:2'>
  <area shape='rect' coords='3634.59,9997.78,3706.01,10023.8' href='#mc:0,bo:4,bo:0,bo:2'>
  <area shape='rect' coords='3727.01,9970.78,3952.92,9996.78' href='#mc:0,bo:4,bo:0,bo:2,bo:0'>
  <area shape='rect' coords='3727.01,9998.78,3974.89,10050.8' href='#mc:0,bo:4,bo:0,bo:2,bo:1'>
  <area shape='rect' coords='3383.84,10186.8,3611.87,10216.8' href='#mc:0,bo:4,bo:1'>
  <area shape='rect' coords='3632.87,10052.8,3855.56,10104.8' href='#mc:0,bo:4,bo:1,bo:0'>
  <area shape='rect' coords='3632.87,10106.8,3654.87,10128.8' href='/home/juxley/Pictures/proto.png'>
  <area shape='rect' coords='3654.87,10106.8,3701.99,10132.8' href='#mc:0,bo:4,bo:1,bo:1'>
  <area shape='rect' coords='3632.87,10134.8,3845.04,10160.8' href='#mc:0,bo:4,bo:1,bo:2'>
  <area shape='rect' coords='3632.87,10162.8,3873.74,10188.8' href='#mc:0,bo:4,bo:1,bo:3'>
  <area shape='rect' coords='3632.87,10190.8,3879.59,10242.8' href='#mc:0,bo:4,bo:1,bo:4'>
  <area shape='rect' coords='3900.59,10190.8,4102.34,10242.8' href='#mc:0,bo:4,bo:1,bo:4,bo:0'>
  <area shape='rect' coords='3654.87,10284.8,3749.78,10310.8' href='#mc:0,bo:4,bo:1,bo:5'>
  <area shape='rect' coords='3770.78,10244.8,4046.89,10296.8' href='#mc:0,bo:4,bo:1,bo:5,bo:0'>
  <area shape='rect' coords='3770.78,10298.8,3963.95,10350.8' href='#mc:0,bo:4,bo:1,bo:5,bo:1'>
  <area shape='rect' coords='3383.84,10498.8,3683.01,10528.8' href='#mc:0,bo:4,bo:2'>
  <area shape='rect' coords='3704.01,10352.8,3902.98,10404.8' href='#mc:0,bo:4,bo:2,bo:0'>
  <area shape='rect' coords='3704.01,10419.8,3855.95,10445.8' href='#mc:0,bo:4,bo:2,bo:1'>
  <area shape='rect' coords='3876.95,10406.8,4123.06,10458.8' href='#mc:0,bo:4,bo:2,bo:1,bo:0'>
  <area shape='rect' coords='3726.01,10460.8,3765.39,10486.8' href='#mc:0,bo:4,bo:2,bo:2'>
  <area shape='rect' coords='3704.01,10488.8,3947.46,10566.8' href='#mc:0,bo:4,bo:2,bo:3'>
  <area shape='rect' coords='3704.01,10568.8,3937.79,10620.8' href='#mc:0,bo:4,bo:2,bo:4'>
  <area shape='rect' coords='3704.01,10622.8,3945.84,10674.8' href='#mc:0,bo:4,bo:2,bo:5'>
  <area shape='rect' coords='3383.84,10755.8,3576.95,10785.8' href='#mc:0,bo:4,bo:3'>
  <area shape='rect' coords='3597.95,10676.8,3835.65,10754.8' href='#mc:0,bo:4,bo:3,bo:0'>
  <area shape='rect' coords='3619.95,10769.8,3680.1,10795.8' href='#mc:0,bo:4,bo:3,bo:1'>
  <area shape='rect' coords='3701.1,10756.8,3949.64,10808.8' href='#mc:0,bo:4,bo:3,bo:1,bo:0'>
  <area shape='rect' coords='3619.95,10824.8,3670.06,10850.8' href='#mc:0,bo:4,bo:3,bo:2'>
  <area shape='rect' coords='3691.06,10810.8,3867.71,10836.8' href='#mc:0,bo:4,bo:3,bo:2,bo:0'>
  <area shape='rect' coords='3888.71,10810.8,3903.46,10836.8' href='#mc:0,bo:4,bo:3,bo:2,bo:0,bo:0'>
  <area shape='rect' coords='3691.06,10838.8,3855.99,10864.8' href='#mc:0,bo:4,bo:3,bo:2,bo:1'>
  <area shape='rect' coords='1070.81,8635.07,1224.75,8669.07' href='#mc:0,bo:5'>
  <area shape='rect' coords='762.485,7863.07,1049.81,7923.07' href='#mc:0,bo:5,bo:0'>
  <area shape='rect' coords='689.766,7690.07,741.485,7716.07' href='#mc:0,bo:5,bo:0,bo:0'>
  <area shape='rect' coords='538.985,7649.07,668.766,7675.07' href='#mc:0,bo:5,bo:0,bo:0,bo:0'>
  <area shape='rect' coords='484.829,7677.07,668.766,7729.07' href='#mc:0,bo:5,bo:0,bo:0,bo:1'>
  <area shape='rect' coords='517.454,7731.07,668.766,7757.07' href='#mc:0,bo:5,bo:0,bo:0,bo:2'>
  <area shape='rect' coords='370.454,7731.07,496.454,7757.07' href='#mc:0,bo:5,bo:0,bo:0,bo:2,bo:0'>
  <area shape='rect' coords='646.579,7759.07,741.485,7785.07' href='#mc:0,bo:5,bo:0,bo:1'>
  <area shape='rect' coords='486.266,7787.07,741.485,7865.07' href='#mc:0,bo:5,bo:0,bo:2'>
  <area shape='rect' coords='610.454,7935.07,741.485,7961.07' href='#mc:0,bo:5,bo:0,bo:3'>
  <area shape='rect' coords='333.891,7867.07,589.454,7893.07' href='#mc:0,bo:5,bo:0,bo:3,bo:0'>
  <area shape='rect' coords='378.344,7935.07,589.454,7961.07' href='#mc:0,bo:5,bo:0,bo:3,bo:1'>
  <area shape='rect' coords='115.235,7895.07,357.344,7947.07' href='#mc:0,bo:5,bo:0,bo:3,bo:1,bo:0'>
  <area shape='rect' coords='124.063,7949.07,357.344,8001.07' href='#mc:0,bo:5,bo:0,bo:3,bo:1,bo:1'>
  <area shape='rect' coords='372.907,8003.07,589.454,8029.07' href='#mc:0,bo:5,bo:0,bo:3,bo:2'>
  <area shape='rect' coords='533.547,8071.07,741.485,8097.07' href='#mc:0,bo:5,bo:0,bo:4'>
  <area shape='rect' coords='258.641,8031.07,512.547,8057.07' href='#mc:0,bo:5,bo:0,bo:4,bo:0'>
  <area shape='rect' coords='275.594,8059.07,512.547,8137.07' href='#mc:0,bo:5,bo:0,bo:4,bo:1'>
  <area shape='rect' coords='760.001,8286.07,1049.81,8316.07' href='#mc:0,bo:5,bo:1'>
  <area shape='rect' coords='669.876,8139.07,691.876,8161.07' href='/home/juxley/Picture/funcproto.png'>
  <area shape='rect' coords='691.876,8139.07,739.001,8165.07' href='#mc:0,bo:5,bo:1,bo:0'>
  <area shape='rect' coords='499.204,8167.07,739.001,8219.07' href='#mc:0,bo:5,bo:1,bo:1'>
  <area shape='rect' coords='517.422,8221.07,739.001,8247.07' href='#mc:0,bo:5,bo:1,bo:2'>
  <area shape='rect' coords='504.454,8249.07,739.001,8301.07' href='#mc:0,bo:5,bo:1,bo:3'>
  <area shape='rect' coords='489.219,8330.07,739.001,8382.07' href='#mc:0,bo:5,bo:1,bo:4'>
  <area shape='rect' coords='245.844,8303.07,468.219,8355.07' href='#mc:0,bo:5,bo:1,bo:4,bo:0'>
  <area shape='rect' coords='202.547,8357.07,468.219,8409.07' href='#mc:0,bo:5,bo:1,bo:4,bo:1'>
  <area shape='rect' coords='678.844,8424.07,739.001,8450.07' href='#mc:0,bo:5,bo:1,bo:5'>
  <area shape='rect' coords='412.797,8411.07,635.844,8463.07' href='#mc:0,bo:5,bo:1,bo:5,bo:0'>
  <area shape='rect' coords='774.547,8528.07,1049.81,8588.07' href='#mc:0,bo:5,bo:2'>
  <area shape='rect' coords='507.141,8465.07,753.547,8543.07' href='#mc:0,bo:5,bo:2,bo:0'>
  <area shape='rect' coords='486.86,8545.07,753.547,8597.07' href='#mc:0,bo:5,bo:2,bo:1'>
  <area shape='rect' coords='500.454,8599.07,753.547,8651.07' href='#mc:0,bo:5,bo:2,bo:2'>
  <area shape='rect' coords='780.282,8893.07,1049.81,8953.07' href='#mc:0,bo:5,bo:3'>
  <area shape='rect' coords='540.11,8653.07,759.282,8705.07' href='#mc:0,bo:5,bo:3,bo:0'>
  <area shape='rect' coords='589.907,8721.07,759.282,8747.07' href='#mc:0,bo:5,bo:3,bo:1'>
  <area shape='rect' coords='475.61,8707.07,568.907,8733.07' href='#mc:0,bo:5,bo:3,bo:1,bo:0'>
  <area shape='rect' coords='383.329,8735.07,568.907,8761.07' href='#mc:0,bo:5,bo:3,bo:1,bo:1'>
  <area shape='rect' coords='510.313,8763.07,759.282,8815.07' href='#mc:0,bo:5,bo:3,bo:2'>
  <area shape='rect' coords='664.922,8843.07,759.282,8869.07' href='#mc:0,bo:5,bo:3,bo:3'>
  <area shape='rect' coords='402.266,8817.07,643.922,8895.07' href='#mc:0,bo:5,bo:3,bo:3,bo:0'>
  <area shape='rect' coords='591.188,8897.07,759.282,8923.07' href='#mc:0,bo:5,bo:3,bo:4'>
  <area shape='rect' coords='530.86,8925.07,759.282,8977.07' href='#mc:0,bo:5,bo:3,bo:5'>
  <area shape='rect' coords='498.672,8979.07,759.282,9031.07' href='#mc:0,bo:5,bo:3,bo:6'>
  <area shape='rect' coords='539.938,9033.07,759.282,9111.07' href='#mc:0,bo:5,bo:3,bo:7'>
  <area shape='rect' coords='518.657,9113.07,759.282,9165.07' href='#mc:0,bo:5,bo:3,bo:8'>
  <area shape='rect' coords='524.688,9167.07,759.282,9193.07' href='#mc:0,bo:5,bo:3,bo:9'>
  <area shape='rect' coords='778.094,9301.07,1049.81,9361.07' href='#mc:0,bo:5,bo:4'>
  <area shape='rect' coords='664.157,9195.07,757.094,9221.07' href='#mc:0,bo:5,bo:4,bo:0'>
  <area shape='rect' coords='506.641,9223.07,757.094,9249.07' href='#mc:0,bo:5,bo:4,bo:1'>
  <area shape='rect' coords='599.766,9251.07,757.094,9277.07' href='#mc:0,bo:5,bo:4,bo:2'>
  <area shape='rect' coords='510.282,9279.07,757.094,9331.07' href='#mc:0,bo:5,bo:4,bo:3'>
  <area shape='rect' coords='524.735,9333.07,757.094,9359.07' href='#mc:0,bo:5,bo:4,bo:4'>
  <area shape='rect' coords='566.672,9361.07,757.094,9413.07' href='#mc:0,bo:5,bo:4,bo:5'>
  <area shape='rect' coords='519.751,9415.07,757.094,9467.07' href='#mc:0,bo:5,bo:4,bo:6'>
  <area shape='rect' coords='780.141,9547.07,1049.81,9577.07' href='#mc:0,bo:5,bo:5'>
  <area shape='rect' coords='638.391,9469.07,759.141,9495.07' href='#mc:0,bo:5,bo:5,bo:0'>
  <area shape='rect' coords='719.766,9497.07,759.141,9523.07' href='#mc:0,bo:5,bo:5,bo:1'>
  <area shape='rect' coords='503.141,9525.07,759.141,9655.07' href='#mc:0,bo:5,bo:5,bo:2'>
</map>
<hr/>
<table class="vym-footer">   
        <tr> 
        <td class="vym-footerL">/var/www/html/vym/JavaScriptWeirdStuff/JavaScript the Weird Parts.html</td> 
            <td class="vym-footerC">2018-06-20</td> 
            <td class="vym-footerR"> <a href='http://www.insilmaril.de/vym'>vym 2.5.0</a></td> 
            </tr> 
             </table>
</body></html>